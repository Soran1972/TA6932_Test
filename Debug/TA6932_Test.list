
TA6932_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001e28  08001e28  00011e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e74  08001e74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e74  08001e74  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e74  08001e74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e74  08001e74  00011e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e78  08001e78  00011e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08001e88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001e88  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006150  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016c3  00000000  00000000  000261c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c0  00000000  00000000  00027890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000505  00000000  00000000  00027f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011b5e  00000000  00000000  00028455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000082a9  00000000  00000000  00039fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006ce4b  00000000  00000000  0004225c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016a0  00000000  00000000  000af0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000b0748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e10 	.word	0x08001e10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001e10 	.word	0x08001e10

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb39 	bl	800089a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f819 	bl	800025e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f898 	bl	8000360 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f858 	bl	80002e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  TA6932_Init();
 8000234:	f000 fa40 	bl	80006b8 <TA6932_Init>
  TA6932_Clear();                    // يمسح ويكتب
 8000238:	f000 faec 	bl	8000814 <TA6932_Clear>
  TA6932_putDigit(0x00, 2, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2102      	movs	r1, #2
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fa69 	bl	8000718 <TA6932_putDigit>
  TA6932_putChar(0x01, '-', 0);
 8000246:	2200      	movs	r2, #0
 8000248:	212d      	movs	r1, #45	; 0x2d
 800024a:	2001      	movs	r0, #1
 800024c:	f000 fa96 	bl	800077c <TA6932_putChar>
  TA6932_putRaw(0x0E, 0x80);         // colon ON
 8000250:	2180      	movs	r1, #128	; 0x80
 8000252:	200e      	movs	r0, #14
 8000254:	f000 fa4a 	bl	80006ec <TA6932_putRaw>
  TA6932_WriteAll();
 8000258:	f000 fa3a 	bl	80006d0 <TA6932_WriteAll>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025c:	e7fe      	b.n	800025c <main+0x3c>

0800025e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025e:	b590      	push	{r4, r7, lr}
 8000260:	b08d      	sub	sp, #52	; 0x34
 8000262:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000264:	2414      	movs	r4, #20
 8000266:	193b      	adds	r3, r7, r4
 8000268:	0018      	movs	r0, r3
 800026a:	231c      	movs	r3, #28
 800026c:	001a      	movs	r2, r3
 800026e:	2100      	movs	r1, #0
 8000270:	f001 fda2 	bl	8001db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	003b      	movs	r3, r7
 8000276:	0018      	movs	r0, r3
 8000278:	2314      	movs	r3, #20
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f001 fd9b 	bl	8001db8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2202      	movs	r2, #2
 8000286:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	0052      	lsls	r2, r2, #1
 800028e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2200      	movs	r2, #0
 8000294:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2240      	movs	r2, #64	; 0x40
 800029a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fdb4 	bl	8000e0c <HAL_RCC_OscConfig>
 80002a4:	1e03      	subs	r3, r0, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002a8:	f000 f89e 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	003b      	movs	r3, r7
 80002ae:	2207      	movs	r2, #7
 80002b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b2:	003b      	movs	r3, r7
 80002b4:	2200      	movs	r2, #0
 80002b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	003b      	movs	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002be:	003b      	movs	r3, r7
 80002c0:	2200      	movs	r2, #0
 80002c2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002c4:	003b      	movs	r3, r7
 80002c6:	2200      	movs	r2, #0
 80002c8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ca:	003b      	movs	r3, r7
 80002cc:	2101      	movs	r1, #1
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 ff80 	bl	80011d4 <HAL_RCC_ClockConfig>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002d8:	f000 f886 	bl	80003e8 <Error_Handler>
  }
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b00d      	add	sp, #52	; 0x34
 80002e2:	bd90      	pop	{r4, r7, pc}

080002e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_SPI1_Init+0x74>)
 80002ea:	4a1c      	ldr	r2, [pc, #112]	; (800035c <MX_SPI1_Init+0x78>)
 80002ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_SPI1_Init+0x74>)
 80002f0:	2282      	movs	r2, #130	; 0x82
 80002f2:	0052      	lsls	r2, r2, #1
 80002f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002f6:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_SPI1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002fc:	4b16      	ldr	r3, [pc, #88]	; (8000358 <MX_SPI1_Init+0x74>)
 80002fe:	22e0      	movs	r2, #224	; 0xe0
 8000300:	00d2      	lsls	r2, r2, #3
 8000302:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_SPI1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <MX_SPI1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000310:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_SPI1_Init+0x74>)
 8000312:	2280      	movs	r2, #128	; 0x80
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_SPI1_Init+0x74>)
 800031a:	2228      	movs	r2, #40	; 0x28
 800031c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_SPI1_Init+0x74>)
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_SPI1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_SPI1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_SPI1_Init+0x74>)
 8000332:	2207      	movs	r2, #7
 8000334:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_SPI1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_SPI1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <MX_SPI1_Init+0x74>)
 8000344:	0018      	movs	r0, r3
 8000346:	f001 f97f 	bl	8001648 <HAL_SPI_Init>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800034e:	f000 f84b 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000028 	.word	0x20000028
 800035c:	40013000 	.word	0x40013000

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	240c      	movs	r4, #12
 8000368:	193b      	adds	r3, r7, r4
 800036a:	0018      	movs	r0, r3
 800036c:	2314      	movs	r3, #20
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f001 fd21 	bl	8001db8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000376:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_GPIO_Init+0x84>)
 8000378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <MX_GPIO_Init+0x84>)
 800037c:	2104      	movs	r1, #4
 800037e:	430a      	orrs	r2, r1
 8000380:	635a      	str	r2, [r3, #52]	; 0x34
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_GPIO_Init+0x84>)
 8000384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000386:	2204      	movs	r2, #4
 8000388:	4013      	ands	r3, r2
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_GPIO_Init+0x84>)
 8000390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_GPIO_Init+0x84>)
 8000394:	2101      	movs	r1, #1
 8000396:	430a      	orrs	r2, r1
 8000398:	635a      	str	r2, [r3, #52]	; 0x34
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_GPIO_Init+0x84>)
 800039c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800039e:	2201      	movs	r2, #1
 80003a0:	4013      	ands	r3, r2
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80003a6:	23a0      	movs	r3, #160	; 0xa0
 80003a8:	05db      	lsls	r3, r3, #23
 80003aa:	2201      	movs	r2, #1
 80003ac:	2110      	movs	r1, #16
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 fd0e 	bl	8000dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80003b4:	0021      	movs	r1, r4
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2210      	movs	r2, #16
 80003ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2201      	movs	r2, #1
 80003c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2202      	movs	r2, #2
 80003cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	187a      	adds	r2, r7, r1
 80003d0:	23a0      	movs	r3, #160	; 0xa0
 80003d2:	05db      	lsls	r3, r3, #23
 80003d4:	0011      	movs	r1, r2
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 fb90 	bl	8000afc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b009      	add	sp, #36	; 0x24
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	40021000 	.word	0x40021000

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <Error_Handler+0x8>
	...

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x44>)
 80003fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <HAL_MspInit+0x44>)
 8000400:	2101      	movs	r1, #1
 8000402:	430a      	orrs	r2, r1
 8000404:	641a      	str	r2, [r3, #64]	; 0x40
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x44>)
 8000408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800040a:	2201      	movs	r2, #1
 800040c:	4013      	ands	r3, r2
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_MspInit+0x44>)
 8000414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <HAL_MspInit+0x44>)
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0549      	lsls	r1, r1, #21
 800041c:	430a      	orrs	r2, r1
 800041e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <HAL_MspInit+0x44>)
 8000422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	055b      	lsls	r3, r3, #21
 8000428:	4013      	ands	r3, r2
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40021000 	.word	0x40021000

0800043c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b091      	sub	sp, #68	; 0x44
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	232c      	movs	r3, #44	; 0x2c
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	0018      	movs	r0, r3
 800044a:	2314      	movs	r3, #20
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f001 fcb2 	bl	8001db8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000454:	2410      	movs	r4, #16
 8000456:	193b      	adds	r3, r7, r4
 8000458:	0018      	movs	r0, r3
 800045a:	231c      	movs	r3, #28
 800045c:	001a      	movs	r2, r3
 800045e:	2100      	movs	r1, #0
 8000460:	f001 fcaa 	bl	8001db8 <memset>
  if(hspi->Instance==SPI1)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a23      	ldr	r2, [pc, #140]	; (80004f8 <HAL_SPI_MspInit+0xbc>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d13f      	bne.n	80004ee <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	0112      	lsls	r2, r2, #4
 8000474:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fff4 	bl	800146c <HAL_RCCEx_PeriphCLKConfig>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000488:	f7ff ffae 	bl	80003e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <HAL_SPI_MspInit+0xc0>)
 800048e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000490:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <HAL_SPI_MspInit+0xc0>)
 8000492:	2180      	movs	r1, #128	; 0x80
 8000494:	0149      	lsls	r1, r1, #5
 8000496:	430a      	orrs	r2, r1
 8000498:	641a      	str	r2, [r3, #64]	; 0x40
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <HAL_SPI_MspInit+0xc0>)
 800049c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	015b      	lsls	r3, r3, #5
 80004a2:	4013      	ands	r3, r2
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <HAL_SPI_MspInit+0xc0>)
 80004aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <HAL_SPI_MspInit+0xc0>)
 80004ae:	2101      	movs	r1, #1
 80004b0:	430a      	orrs	r2, r1
 80004b2:	635a      	str	r2, [r3, #52]	; 0x34
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <HAL_SPI_MspInit+0xc0>)
 80004b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b8:	2201      	movs	r2, #1
 80004ba:	4013      	ands	r3, r2
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80004c0:	212c      	movs	r1, #44	; 0x2c
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2206      	movs	r2, #6
 80004c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2202      	movs	r2, #2
 80004cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	187a      	adds	r2, r7, r1
 80004e2:	23a0      	movs	r3, #160	; 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fb07 	bl	8000afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b011      	add	sp, #68	; 0x44
 80004f4:	bd90      	pop	{r4, r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40013000 	.word	0x40013000
 80004fc:	40021000 	.word	0x40021000

08000500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000504:	e7fe      	b.n	8000504 <NMI_Handler+0x4>

08000506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <HardFault_Handler+0x4>

0800050c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000524:	f000 fa1a 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <SystemInit+0x14>)
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	0512      	lsls	r2, r2, #20
 800053a:	609a      	str	r2, [r3, #8]
#endif
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <TA_STB>:

// SPI handle generated by CubeMX for SPI1 (adjust if you use another instance)
extern SPI_HandleTypeDef hspi1;

// === Low-level ===
static inline void TA_STB(int v){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(TA_STB_PORT, TA_STB_PIN, v ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	4193      	sbcs	r3, r2
 8000556:	b2db      	uxtb	r3, r3
 8000558:	001a      	movs	r2, r3
 800055a:	23a0      	movs	r3, #160	; 0xa0
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	2110      	movs	r1, #16
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fc35 	bl	8000dd0 <HAL_GPIO_WritePin>
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <TA_sendByte>:

static HAL_StatusTypeDef TA_sendByte(uint8_t b){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	0002      	movs	r2, r0
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	701a      	strb	r2, [r3, #0]
  return HAL_SPI_Transmit(&hspi1, &b, 1, 10);
 800057c:	1df9      	adds	r1, r7, #7
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <TA_sendByte+0x24>)
 8000580:	230a      	movs	r3, #10
 8000582:	2201      	movs	r2, #1
 8000584:	f001 f918 	bl	80017b8 <HAL_SPI_Transmit>
 8000588:	0003      	movs	r3, r0
}
 800058a:	0018      	movs	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	20000028 	.word	0x20000028

08000598 <TA_cmd>:

static void TA_cmd(uint8_t cmd){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	0002      	movs	r2, r0
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	701a      	strb	r2, [r3, #0]
  TA_STB(0);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f7ff ffcf 	bl	8000548 <TA_STB>
  TA_sendByte(cmd);
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	0018      	movs	r0, r3
 80005b0:	f7ff ffde 	bl	8000570 <TA_sendByte>
  TA_STB(1);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff ffc7 	bl	8000548 <TA_STB>
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <TA_writeSeq>:

static void TA_writeSeq(uint8_t startAddr, const uint8_t *data, uint8_t len){
 80005c2:	b590      	push	{r4, r7, lr}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	0011      	movs	r1, r2
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	1c02      	adds	r2, r0, #0
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	1dbb      	adds	r3, r7, #6
 80005d4:	1c0a      	adds	r2, r1, #0
 80005d6:	701a      	strb	r2, [r3, #0]
  TA_cmd(0x40); // Data set: write, auto-increment
 80005d8:	2040      	movs	r0, #64	; 0x40
 80005da:	f7ff ffdd 	bl	8000598 <TA_cmd>
  TA_STB(0);
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff ffb2 	bl	8000548 <TA_STB>
  uint8_t a = 0xC0 | (startAddr & 0x0F);
 80005e4:	1dfb      	adds	r3, r7, #7
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	220f      	movs	r2, #15
 80005ec:	4013      	ands	r3, r2
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	2240      	movs	r2, #64	; 0x40
 80005f2:	4252      	negs	r2, r2
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b25a      	sxtb	r2, r3
 80005f8:	210e      	movs	r1, #14
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	701a      	strb	r2, [r3, #0]
  TA_sendByte(a);
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff ffb4 	bl	8000570 <TA_sendByte>
  for(uint8_t i=0;i<len && i<16;i++) TA_sendByte(data[i]);
 8000608:	230f      	movs	r3, #15
 800060a:	18fb      	adds	r3, r7, r3
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	e00d      	b.n	800062e <TA_writeSeq+0x6c>
 8000612:	240f      	movs	r4, #15
 8000614:	193b      	adds	r3, r7, r4
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	18d3      	adds	r3, r2, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff ffa6 	bl	8000570 <TA_sendByte>
 8000624:	193b      	adds	r3, r7, r4
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	193b      	adds	r3, r7, r4
 800062a:	3201      	adds	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	210f      	movs	r1, #15
 8000630:	187a      	adds	r2, r7, r1
 8000632:	1dbb      	adds	r3, r7, #6
 8000634:	7812      	ldrb	r2, [r2, #0]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	429a      	cmp	r2, r3
 800063a:	d203      	bcs.n	8000644 <TA_writeSeq+0x82>
 800063c:	187b      	adds	r3, r7, r1
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	d9e6      	bls.n	8000612 <TA_writeSeq+0x50>
  TA_STB(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff ff7f 	bl	8000548 <TA_STB>
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b005      	add	sp, #20
 8000650:	bd90      	pop	{r4, r7, pc}

08000652 <TA6932_SetBrightness>:

// === Display control ===
void TA6932_SetBrightness(uint8_t level){  // 0..7
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	0002      	movs	r2, r0
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	701a      	strb	r2, [r3, #0]
  if(level > 7) level = 7;
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b07      	cmp	r3, #7
 8000664:	d902      	bls.n	800066c <TA6932_SetBrightness+0x1a>
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	2207      	movs	r2, #7
 800066a:	701a      	strb	r2, [r3, #0]
  TA_cmd(0x88 | level);  // Display ON + brightness
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2278      	movs	r2, #120	; 0x78
 8000672:	4252      	negs	r2, r2
 8000674:	4313      	orrs	r3, r2
 8000676:	b2db      	uxtb	r3, r3
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff ff8d 	bl	8000598 <TA_cmd>
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <putRaw>:
  0x3F,0x21,0x5D,0x75,0x63,0x76,0x7E,0x25,0x7F,0x77, 0x00,0x40
};

static uint8_t g_buf[16];

static inline void putRaw(uint8_t addr, uint8_t v){ g_buf[addr & 0x0F] = v; }
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	0002      	movs	r2, r0
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	1dbb      	adds	r3, r7, #6
 8000696:	1c0a      	adds	r2, r1, #0
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	220f      	movs	r2, #15
 80006a0:	4013      	ands	r3, r2
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <putRaw+0x2c>)
 80006a4:	1db9      	adds	r1, r7, #6
 80006a6:	7809      	ldrb	r1, [r1, #0]
 80006a8:	54d1      	strb	r1, [r2, r3]
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	2000008c 	.word	0x2000008c

080006b8 <TA6932_Init>:
  if(dp) v |= 0x80;
  putRaw(addr, v);
}

// === Public API ===
void TA6932_Init(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  TA_STB(1);                 // idle high
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ff43 	bl	8000548 <TA_STB>
  TA6932_SetBrightness(7);   // ON + full brightness
 80006c2:	2007      	movs	r0, #7
 80006c4:	f7ff ffc5 	bl	8000652 <TA6932_SetBrightness>
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <TA6932_WriteAll>:

void TA6932_WriteAll(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  TA_writeSeq(0x00, g_buf, 16);
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <TA6932_WriteAll+0x18>)
 80006d6:	2210      	movs	r2, #16
 80006d8:	0019      	movs	r1, r3
 80006da:	2000      	movs	r0, #0
 80006dc:	f7ff ff71 	bl	80005c2 <TA_writeSeq>
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	2000008c 	.word	0x2000008c

080006ec <TA6932_putRaw>:
  }
}


// ==== Public buffer helpers ====
void TA6932_putRaw(uint8_t addr, uint8_t v){ putRaw(addr, v); }
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	0002      	movs	r2, r0
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	1dbb      	adds	r3, r7, #6
 80006fa:	1c0a      	adds	r2, r1, #0
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	1dbb      	adds	r3, r7, #6
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff ffbd 	bl	8000688 <putRaw>
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <TA6932_putDigit>:

void TA6932_putDigit(uint8_t addr, int d, int dp){
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	230f      	movs	r3, #15
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	1c02      	adds	r2, r0, #0
 8000728:	701a      	strb	r2, [r3, #0]
  uint8_t v = (d>=0 && d<=9)? SEG_FONT[d] : SEG_FONT[10]; // fallback blank
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db07      	blt.n	8000740 <TA6932_putDigit+0x28>
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	2b09      	cmp	r3, #9
 8000734:	dc04      	bgt.n	8000740 <TA6932_putDigit+0x28>
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <TA6932_putDigit+0x60>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	e000      	b.n	8000742 <TA6932_putDigit+0x2a>
 8000740:	2200      	movs	r2, #0
 8000742:	2117      	movs	r1, #23
 8000744:	187b      	adds	r3, r7, r1
 8000746:	701a      	strb	r2, [r3, #0]
  if(dp) v |= 0x80;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d006      	beq.n	800075c <TA6932_putDigit+0x44>
 800074e:	187b      	adds	r3, r7, r1
 8000750:	187a      	adds	r2, r7, r1
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	4249      	negs	r1, r1
 8000758:	430a      	orrs	r2, r1
 800075a:	701a      	strb	r2, [r3, #0]
  putRaw(addr, v);
 800075c:	2317      	movs	r3, #23
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	230f      	movs	r3, #15
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff ff8c 	bl	8000688 <putRaw>
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b006      	add	sp, #24
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08001e68 	.word	0x08001e68

0800077c <TA6932_putChar>:

// minimal char support: digits, '-', space; others blank
void TA6932_putChar(uint8_t addr, char ch, int dp){
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	603a      	str	r2, [r7, #0]
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	1c02      	adds	r2, r0, #0
 8000788:	701a      	strb	r2, [r3, #0]
 800078a:	1dbb      	adds	r3, r7, #6
 800078c:	1c0a      	adds	r2, r1, #0
 800078e:	701a      	strb	r2, [r3, #0]
  uint8_t v = 0x00;
 8000790:	200f      	movs	r0, #15
 8000792:	183b      	adds	r3, r7, r0
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
  if(ch >= '0' && ch <= '9') v = SEG_FONT[(uint8_t)(ch - '0')];
 8000798:	1dbb      	adds	r3, r7, #6
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b2f      	cmp	r3, #47	; 0x2f
 800079e:	d90d      	bls.n	80007bc <TA6932_putChar+0x40>
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b39      	cmp	r3, #57	; 0x39
 80007a6:	d809      	bhi.n	80007bc <TA6932_putChar+0x40>
 80007a8:	1dbb      	adds	r3, r7, #6
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3b30      	subs	r3, #48	; 0x30
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	0019      	movs	r1, r3
 80007b2:	183b      	adds	r3, r7, r0
 80007b4:	4a16      	ldr	r2, [pc, #88]	; (8000810 <TA6932_putChar+0x94>)
 80007b6:	5c52      	ldrb	r2, [r2, r1]
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	e010      	b.n	80007de <TA6932_putChar+0x62>
  else if(ch == '-') v = SEG_FONT[11];
 80007bc:	1dbb      	adds	r3, r7, #6
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b2d      	cmp	r3, #45	; 0x2d
 80007c2:	d104      	bne.n	80007ce <TA6932_putChar+0x52>
 80007c4:	230f      	movs	r3, #15
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	2240      	movs	r2, #64	; 0x40
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e007      	b.n	80007de <TA6932_putChar+0x62>
  else if(ch == ' ') v = 0x00;
 80007ce:	1dbb      	adds	r3, r7, #6
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b20      	cmp	r3, #32
 80007d4:	d103      	bne.n	80007de <TA6932_putChar+0x62>
 80007d6:	230f      	movs	r3, #15
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
  if(dp) v |= 0x80;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d007      	beq.n	80007f4 <TA6932_putChar+0x78>
 80007e4:	220f      	movs	r2, #15
 80007e6:	18bb      	adds	r3, r7, r2
 80007e8:	18ba      	adds	r2, r7, r2
 80007ea:	7812      	ldrb	r2, [r2, #0]
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	4249      	negs	r1, r1
 80007f0:	430a      	orrs	r2, r1
 80007f2:	701a      	strb	r2, [r3, #0]
  putRaw(addr, v);
 80007f4:	230f      	movs	r3, #15
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff ff41 	bl	8000688 <putRaw>
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b004      	add	sp, #16
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	08001e68 	.word	0x08001e68

08000814 <TA6932_Clear>:

// Clear whole display buffer and send
void TA6932_Clear(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  for (int i=0;i<16;i++) g_buf[i] = 0x00;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	e007      	b.n	8000830 <TA6932_Clear+0x1c>
 8000820:	4a08      	ldr	r2, [pc, #32]	; (8000844 <TA6932_Clear+0x30>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3301      	adds	r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b0f      	cmp	r3, #15
 8000834:	ddf4      	ble.n	8000820 <TA6932_Clear+0xc>
  TA6932_WriteAll();
 8000836:	f7ff ff4b 	bl	80006d0 <TA6932_WriteAll>
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	2000008c 	.word	0x2000008c

08000848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800084a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800084c:	f7ff fe70 	bl	8000530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000850:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000852:	e003      	b.n	800085c <LoopCopyDataInit>

08000854 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000856:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000858:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800085a:	3104      	adds	r1, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800085c:	480a      	ldr	r0, [pc, #40]	; (8000888 <LoopForever+0xa>)
  ldr r3, =_edata
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <LoopForever+0xe>)
  adds r2, r0, r1
 8000860:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000862:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000864:	d3f6      	bcc.n	8000854 <CopyDataInit>
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopForever+0x12>)
  b LoopFillZerobss
 8000868:	e002      	b.n	8000870 <LoopFillZerobss>

0800086a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  str  r3, [r2]
 800086c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086e:	3204      	adds	r2, #4

08000870 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <LoopForever+0x16>)
  cmp r2, r3
 8000872:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000874:	d3f9      	bcc.n	800086a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000876:	f001 faa7 	bl	8001dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087a:	f7ff fcd1 	bl	8000220 <main>

0800087e <LoopForever>:

LoopForever:
    b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   r0, =_estack
 8000880:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000884:	08001e7c 	.word	0x08001e7c
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800088c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000890:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000894:	200000a0 	.word	0x200000a0

08000898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_IRQHandler>

0800089a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a6:	2003      	movs	r0, #3
 80008a8:	f000 f80e 	bl	80008c8 <HAL_InitTick>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d003      	beq.n	80008b8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	e001      	b.n	80008bc <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b8:	f7ff fd9c 	bl	80003f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	230f      	movs	r3, #15
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <HAL_InitTick+0x88>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d02b      	beq.n	8000938 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_InitTick+0x8c>)
 80008e2:	681c      	ldr	r4, [r3, #0]
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <HAL_InitTick+0x88>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	0019      	movs	r1, r3
 80008ea:	23fa      	movs	r3, #250	; 0xfa
 80008ec:	0098      	lsls	r0, r3, #2
 80008ee:	f7ff fc0b 	bl	8000108 <__udivsi3>
 80008f2:	0003      	movs	r3, r0
 80008f4:	0019      	movs	r1, r3
 80008f6:	0020      	movs	r0, r4
 80008f8:	f7ff fc06 	bl	8000108 <__udivsi3>
 80008fc:	0003      	movs	r3, r0
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 f8ef 	bl	8000ae2 <HAL_SYSTICK_Config>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d112      	bne.n	800092e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b03      	cmp	r3, #3
 800090c:	d80a      	bhi.n	8000924 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	2301      	movs	r3, #1
 8000912:	425b      	negs	r3, r3
 8000914:	2200      	movs	r2, #0
 8000916:	0018      	movs	r0, r3
 8000918:	f000 f8ce 	bl	8000ab8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_InitTick+0x90>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	e00d      	b.n	8000940 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000924:	230f      	movs	r3, #15
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	e008      	b.n	8000940 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800092e:	230f      	movs	r3, #15
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	e003      	b.n	8000940 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000938:	230f      	movs	r3, #15
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000940:	230f      	movs	r3, #15
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	781b      	ldrb	r3, [r3, #0]
}
 8000946:	0018      	movs	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	b005      	add	sp, #20
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	20000008 	.word	0x20000008
 8000954:	20000000 	.word	0x20000000
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	001a      	movs	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	18d2      	adds	r2, r2, r3
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_IncTick+0x20>)
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000008 	.word	0x20000008
 800097c:	2000009c 	.word	0x2000009c

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	2000009c 	.word	0x2000009c

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	0002      	movs	r2, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b7f      	cmp	r3, #127	; 0x7f
 80009a8:	d828      	bhi.n	80009fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009aa:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <__NVIC_SetPriority+0xd4>)
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	33c0      	adds	r3, #192	; 0xc0
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	589b      	ldr	r3, [r3, r2]
 80009ba:	1dfa      	adds	r2, r7, #7
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	0011      	movs	r1, r2
 80009c0:	2203      	movs	r2, #3
 80009c2:	400a      	ands	r2, r1
 80009c4:	00d2      	lsls	r2, r2, #3
 80009c6:	21ff      	movs	r1, #255	; 0xff
 80009c8:	4091      	lsls	r1, r2
 80009ca:	000a      	movs	r2, r1
 80009cc:	43d2      	mvns	r2, r2
 80009ce:	401a      	ands	r2, r3
 80009d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	019b      	lsls	r3, r3, #6
 80009d6:	22ff      	movs	r2, #255	; 0xff
 80009d8:	401a      	ands	r2, r3
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	0018      	movs	r0, r3
 80009e0:	2303      	movs	r3, #3
 80009e2:	4003      	ands	r3, r0
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e8:	481f      	ldr	r0, [pc, #124]	; (8000a68 <__NVIC_SetPriority+0xd4>)
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	430a      	orrs	r2, r1
 80009f4:	33c0      	adds	r3, #192	; 0xc0
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009fa:	e031      	b.n	8000a60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <__NVIC_SetPriority+0xd8>)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	0019      	movs	r1, r3
 8000a04:	230f      	movs	r3, #15
 8000a06:	400b      	ands	r3, r1
 8000a08:	3b08      	subs	r3, #8
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	3306      	adds	r3, #6
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	18d3      	adds	r3, r2, r3
 8000a12:	3304      	adds	r3, #4
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1dfa      	adds	r2, r7, #7
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	400a      	ands	r2, r1
 8000a20:	00d2      	lsls	r2, r2, #3
 8000a22:	21ff      	movs	r1, #255	; 0xff
 8000a24:	4091      	lsls	r1, r2
 8000a26:	000a      	movs	r2, r1
 8000a28:	43d2      	mvns	r2, r2
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	019b      	lsls	r3, r3, #6
 8000a32:	22ff      	movs	r2, #255	; 0xff
 8000a34:	401a      	ands	r2, r3
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	4003      	ands	r3, r0
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <__NVIC_SetPriority+0xd8>)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	001c      	movs	r4, r3
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	4023      	ands	r3, r4
 8000a50:	3b08      	subs	r3, #8
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	430a      	orrs	r2, r1
 8000a56:	3306      	adds	r3, #6
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	18c3      	adds	r3, r0, r3
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b003      	add	sp, #12
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	1e5a      	subs	r2, r3, #1
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	045b      	lsls	r3, r3, #17
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d301      	bcc.n	8000a88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a84:	2301      	movs	r3, #1
 8000a86:	e010      	b.n	8000aaa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <SysTick_Config+0x44>)
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	3a01      	subs	r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a90:	2301      	movs	r3, #1
 8000a92:	425b      	negs	r3, r3
 8000a94:	2103      	movs	r1, #3
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff ff7c 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <SysTick_Config+0x44>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SysTick_Config+0x44>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	1c02      	adds	r2, r0, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff ff5d 	bl	8000994 <__NVIC_SetPriority>
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b004      	add	sp, #16
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff ffbf 	bl	8000a70 <SysTick_Config>
 8000af2:	0003      	movs	r3, r0
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b002      	add	sp, #8
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b0a:	e14d      	b.n	8000da8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2101      	movs	r1, #1
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d100      	bne.n	8000b24 <HAL_GPIO_Init+0x28>
 8000b22:	e13e      	b.n	8000da2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x38>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b12      	cmp	r3, #18
 8000b32:	d125      	bne.n	8000b80 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	08da      	lsrs	r2, r3, #3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3208      	adds	r2, #8
 8000b3c:	0092      	lsls	r2, r2, #2
 8000b3e:	58d3      	ldr	r3, [r2, r3]
 8000b40:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	2207      	movs	r2, #7
 8000b46:	4013      	ands	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	0013      	movs	r3, r2
 8000b50:	43da      	mvns	r2, r3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	4013      	ands	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	401a      	ands	r2, r3
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	2107      	movs	r1, #7
 8000b64:	400b      	ands	r3, r1
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	08da      	lsrs	r2, r3, #3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3208      	adds	r2, #8
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	6979      	ldr	r1, [r7, #20]
 8000b7e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	409a      	lsls	r2, r3
 8000b8e:	0013      	movs	r3, r2
 8000b90:	43da      	mvns	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	4013      	ands	r3, r2
 8000b96:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	409a      	lsls	r2, r3
 8000ba6:	0013      	movs	r3, r2
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d00b      	beq.n	8000bd4 <HAL_GPIO_Init+0xd8>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d007      	beq.n	8000bd4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc8:	2b11      	cmp	r3, #17
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2b12      	cmp	r3, #18
 8000bd2:	d130      	bne.n	8000c36 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	409a      	lsls	r2, r3
 8000be2:	0013      	movs	r3, r2
 8000be4:	43da      	mvns	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	4013      	ands	r3, r2
 8000bea:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	0013      	movs	r3, r2
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	43da      	mvns	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	4013      	ands	r3, r2
 8000c18:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	091b      	lsrs	r3, r3, #4
 8000c20:	2201      	movs	r2, #1
 8000c22:	401a      	ands	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d017      	beq.n	8000c6e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	0013      	movs	r3, r2
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	4013      	ands	r3, r2
 8000c54:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	055b      	lsls	r3, r3, #21
 8000c76:	4013      	ands	r3, r2
 8000c78:	d100      	bne.n	8000c7c <HAL_GPIO_Init+0x180>
 8000c7a:	e092      	b.n	8000da2 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000c7c:	4a50      	ldr	r2, [pc, #320]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	3318      	adds	r3, #24
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	589b      	ldr	r3, [r3, r2]
 8000c88:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4013      	ands	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	220f      	movs	r2, #15
 8000c94:	409a      	lsls	r2, r3
 8000c96:	0013      	movs	r3, r2
 8000c98:	43da      	mvns	r2, r3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	23a0      	movs	r3, #160	; 0xa0
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d013      	beq.n	8000cd2 <HAL_GPIO_Init+0x1d6>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a45      	ldr	r2, [pc, #276]	; (8000dc4 <HAL_GPIO_Init+0x2c8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00d      	beq.n	8000cce <HAL_GPIO_Init+0x1d2>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a44      	ldr	r2, [pc, #272]	; (8000dc8 <HAL_GPIO_Init+0x2cc>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d007      	beq.n	8000cca <HAL_GPIO_Init+0x1ce>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a43      	ldr	r2, [pc, #268]	; (8000dcc <HAL_GPIO_Init+0x2d0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d101      	bne.n	8000cc6 <HAL_GPIO_Init+0x1ca>
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x1d8>
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	e004      	b.n	8000cd4 <HAL_GPIO_Init+0x1d8>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e002      	b.n	8000cd4 <HAL_GPIO_Init+0x1d8>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <HAL_GPIO_Init+0x1d8>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	2103      	movs	r1, #3
 8000cd8:	400a      	ands	r2, r1
 8000cda:	00d2      	lsls	r2, r2, #3
 8000cdc:	4093      	lsls	r3, r2
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000ce4:	4936      	ldr	r1, [pc, #216]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3318      	adds	r3, #24
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000cf2:	4a33      	ldr	r2, [pc, #204]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	58d3      	ldr	r3, [r2, r3]
 8000cf8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43da      	mvns	r2, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	4013      	ands	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	025b      	lsls	r3, r3, #9
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000d18:	4929      	ldr	r1, [pc, #164]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000d20:	4a27      	ldr	r2, [pc, #156]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000d22:	2384      	movs	r3, #132	; 0x84
 8000d24:	58d3      	ldr	r3, [r2, r3]
 8000d26:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	029b      	lsls	r3, r3, #10
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000d46:	491e      	ldr	r1, [pc, #120]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000d48:	2284      	movs	r2, #132	; 0x84
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43da      	mvns	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	035b      	lsls	r3, r3, #13
 8000d66:	4013      	ands	r3, r2
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43da      	mvns	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	039b      	lsls	r3, r3, #14
 8000d90:	4013      	ands	r3, r2
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	3301      	adds	r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	40da      	lsrs	r2, r3
 8000db0:	1e13      	subs	r3, r2, #0
 8000db2:	d000      	beq.n	8000db6 <HAL_GPIO_Init+0x2ba>
 8000db4:	e6aa      	b.n	8000b0c <HAL_GPIO_Init+0x10>
  }
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b006      	add	sp, #24
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021800 	.word	0x40021800
 8000dc4:	50000400 	.word	0x50000400
 8000dc8:	50000800 	.word	0x50000800
 8000dcc:	50001400 	.word	0x50001400

08000dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	0008      	movs	r0, r1
 8000dda:	0011      	movs	r1, r2
 8000ddc:	1cbb      	adds	r3, r7, #2
 8000dde:	1c02      	adds	r2, r0, #0
 8000de0:	801a      	strh	r2, [r3, #0]
 8000de2:	1c7b      	adds	r3, r7, #1
 8000de4:	1c0a      	adds	r2, r1, #0
 8000de6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000de8:	1c7b      	adds	r3, r7, #1
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d004      	beq.n	8000dfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000df0:	1cbb      	adds	r3, r7, #2
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000df8:	e003      	b.n	8000e02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dfa:	1cbb      	adds	r3, r7, #2
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e1d0      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2201      	movs	r2, #1
 8000e24:	4013      	ands	r3, r2
 8000e26:	d100      	bne.n	8000e2a <HAL_RCC_OscConfig+0x1e>
 8000e28:	e069      	b.n	8000efe <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e2a:	4bc8      	ldr	r3, [pc, #800]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2238      	movs	r2, #56	; 0x38
 8000e30:	4013      	ands	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d105      	bne.n	8000e46 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d15d      	bne.n	8000efe <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e1bc      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	025b      	lsls	r3, r3, #9
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d107      	bne.n	8000e62 <HAL_RCC_OscConfig+0x56>
 8000e52:	4bbe      	ldr	r3, [pc, #760]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4bbd      	ldr	r3, [pc, #756]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	0249      	lsls	r1, r1, #9
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e020      	b.n	8000ea4 <HAL_RCC_OscConfig+0x98>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	23a0      	movs	r3, #160	; 0xa0
 8000e68:	02db      	lsls	r3, r3, #11
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d10e      	bne.n	8000e8c <HAL_RCC_OscConfig+0x80>
 8000e6e:	4bb7      	ldr	r3, [pc, #732]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4bb6      	ldr	r3, [pc, #728]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	02c9      	lsls	r1, r1, #11
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	4bb3      	ldr	r3, [pc, #716]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4bb2      	ldr	r3, [pc, #712]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e00b      	b.n	8000ea4 <HAL_RCC_OscConfig+0x98>
 8000e8c:	4baf      	ldr	r3, [pc, #700]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4bae      	ldr	r3, [pc, #696]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e92:	49af      	ldr	r1, [pc, #700]	; (8001150 <HAL_RCC_OscConfig+0x344>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	4bac      	ldr	r3, [pc, #688]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4bab      	ldr	r3, [pc, #684]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000e9e:	49ad      	ldr	r1, [pc, #692]	; (8001154 <HAL_RCC_OscConfig+0x348>)
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d014      	beq.n	8000ed6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eac:	f7ff fd68 	bl	8000980 <HAL_GetTick>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fd63 	bl	8000980 <HAL_GetTick>
 8000eba:	0002      	movs	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b64      	cmp	r3, #100	; 0x64
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e17b      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec8:	4ba0      	ldr	r3, [pc, #640]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	029b      	lsls	r3, r3, #10
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0xaa>
 8000ed4:	e013      	b.n	8000efe <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fd53 	bl	8000980 <HAL_GetTick>
 8000eda:	0003      	movs	r3, r0
 8000edc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fd4e 	bl	8000980 <HAL_GetTick>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b64      	cmp	r3, #100	; 0x64
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e166      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ef2:	4b96      	ldr	r3, [pc, #600]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	029b      	lsls	r3, r3, #10
 8000efa:	4013      	ands	r3, r2
 8000efc:	d1f0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	d100      	bne.n	8000f0a <HAL_RCC_OscConfig+0xfe>
 8000f08:	e086      	b.n	8001018 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f0a:	4b90      	ldr	r3, [pc, #576]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	2238      	movs	r2, #56	; 0x38
 8000f10:	4013      	ands	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d12f      	bne.n	8000f7a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e14c      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f26:	4b89      	ldr	r3, [pc, #548]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4a8b      	ldr	r2, [pc, #556]	; (8001158 <HAL_RCC_OscConfig+0x34c>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	0019      	movs	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	021a      	lsls	r2, r3, #8
 8000f36:	4b85      	ldr	r3, [pc, #532]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d112      	bne.n	8000f68 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f42:	4b82      	ldr	r3, [pc, #520]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a85      	ldr	r2, [pc, #532]	; (800115c <HAL_RCC_OscConfig+0x350>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	4b7e      	ldr	r3, [pc, #504]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000f52:	430a      	orrs	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000f56:	4b7d      	ldr	r3, [pc, #500]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	0adb      	lsrs	r3, r3, #11
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	4013      	ands	r3, r2
 8000f60:	4a7f      	ldr	r2, [pc, #508]	; (8001160 <HAL_RCC_OscConfig+0x354>)
 8000f62:	40da      	lsrs	r2, r3
 8000f64:	4b7f      	ldr	r3, [pc, #508]	; (8001164 <HAL_RCC_OscConfig+0x358>)
 8000f66:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f68:	4b7f      	ldr	r3, [pc, #508]	; (8001168 <HAL_RCC_OscConfig+0x35c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff fcab 	bl	80008c8 <HAL_InitTick>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d050      	beq.n	8001018 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e122      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d030      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f82:	4b72      	ldr	r3, [pc, #456]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a75      	ldr	r2, [pc, #468]	; (800115c <HAL_RCC_OscConfig+0x350>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	4b6e      	ldr	r3, [pc, #440]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000f96:	4b6d      	ldr	r3, [pc, #436]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b6c      	ldr	r3, [pc, #432]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	0049      	lsls	r1, r1, #1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fcec 	bl	8000980 <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fce7 	bl	8000980 <HAL_GetTick>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e0ff      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc0:	4b62      	ldr	r3, [pc, #392]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b5f      	ldr	r3, [pc, #380]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a61      	ldr	r2, [pc, #388]	; (8001158 <HAL_RCC_OscConfig+0x34c>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	021a      	lsls	r2, r3, #8
 8000fdc:	4b5b      	ldr	r3, [pc, #364]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	e019      	b.n	8001018 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000fe4:	4b59      	ldr	r3, [pc, #356]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b58      	ldr	r3, [pc, #352]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8000fea:	4960      	ldr	r1, [pc, #384]	; (800116c <HAL_RCC_OscConfig+0x360>)
 8000fec:	400a      	ands	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fcc6 	bl	8000980 <HAL_GetTick>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fcc1 	bl	8000980 <HAL_GetTick>
 8000ffe:	0002      	movs	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e0d9      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800100c:	4b4f      	ldr	r3, [pc, #316]	; (800114c <HAL_RCC_OscConfig+0x340>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4013      	ands	r3, r2
 8001016:	d1f0      	bne.n	8000ffa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2208      	movs	r2, #8
 800101e:	4013      	ands	r3, r2
 8001020:	d042      	beq.n	80010a8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001022:	4b4a      	ldr	r3, [pc, #296]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2238      	movs	r2, #56	; 0x38
 8001028:	4013      	ands	r3, r2
 800102a:	2b18      	cmp	r3, #24
 800102c:	d105      	bne.n	800103a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d138      	bne.n	80010a8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0c2      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d019      	beq.n	8001076 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001042:	4b42      	ldr	r3, [pc, #264]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8001044:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001046:	4b41      	ldr	r3, [pc, #260]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8001048:	2101      	movs	r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104e:	f7ff fc97 	bl	8000980 <HAL_GetTick>
 8001052:	0003      	movs	r3, r0
 8001054:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001058:	f7ff fc92 	bl	8000980 <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e0aa      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800106a:	4b38      	ldr	r3, [pc, #224]	; (800114c <HAL_RCC_OscConfig+0x340>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	2202      	movs	r2, #2
 8001070:	4013      	ands	r3, r2
 8001072:	d0f1      	beq.n	8001058 <HAL_RCC_OscConfig+0x24c>
 8001074:	e018      	b.n	80010a8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8001078:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800107a:	4b34      	ldr	r3, [pc, #208]	; (800114c <HAL_RCC_OscConfig+0x340>)
 800107c:	2101      	movs	r1, #1
 800107e:	438a      	bics	r2, r1
 8001080:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001082:	f7ff fc7d 	bl	8000980 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800108c:	f7ff fc78 	bl	8000980 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e090      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <HAL_RCC_OscConfig+0x340>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	d1f1      	bne.n	800108c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2204      	movs	r2, #4
 80010ae:	4013      	ands	r3, r2
 80010b0:	d100      	bne.n	80010b4 <HAL_RCC_OscConfig+0x2a8>
 80010b2:	e084      	b.n	80011be <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010b4:	230f      	movs	r3, #15
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <HAL_RCC_OscConfig+0x340>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2238      	movs	r2, #56	; 0x38
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b20      	cmp	r3, #32
 80010c6:	d106      	bne.n	80010d6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d000      	beq.n	80010d2 <HAL_RCC_OscConfig+0x2c6>
 80010d0:	e075      	b.n	80011be <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e074      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d106      	bne.n	80010ec <HAL_RCC_OscConfig+0x2e0>
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_RCC_OscConfig+0x340>)
 80010e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_RCC_OscConfig+0x340>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80010ea:	e01c      	b.n	8001126 <HAL_RCC_OscConfig+0x31a>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d10c      	bne.n	800110e <HAL_RCC_OscConfig+0x302>
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_RCC_OscConfig+0x340>)
 80010f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_RCC_OscConfig+0x340>)
 80010fa:	2104      	movs	r1, #4
 80010fc:	430a      	orrs	r2, r1
 80010fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8001102:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8001106:	2101      	movs	r1, #1
 8001108:	430a      	orrs	r2, r1
 800110a:	65da      	str	r2, [r3, #92]	; 0x5c
 800110c:	e00b      	b.n	8001126 <HAL_RCC_OscConfig+0x31a>
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8001110:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8001114:	2101      	movs	r1, #1
 8001116:	438a      	bics	r2, r1
 8001118:	65da      	str	r2, [r3, #92]	; 0x5c
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_RCC_OscConfig+0x340>)
 800111c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_RCC_OscConfig+0x340>)
 8001120:	2104      	movs	r1, #4
 8001122:	438a      	bics	r2, r1
 8001124:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d028      	beq.n	8001180 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fc27 	bl	8000980 <HAL_GetTick>
 8001132:	0003      	movs	r3, r0
 8001134:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001136:	e01d      	b.n	8001174 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001138:	f7ff fc22 	bl	8000980 <HAL_GetTick>
 800113c:	0002      	movs	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <HAL_RCC_OscConfig+0x364>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d915      	bls.n	8001174 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e039      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
 800114c:	40021000 	.word	0x40021000
 8001150:	fffeffff 	.word	0xfffeffff
 8001154:	fffbffff 	.word	0xfffbffff
 8001158:	ffff80ff 	.word	0xffff80ff
 800115c:	ffffc7ff 	.word	0xffffc7ff
 8001160:	02dc6c00 	.word	0x02dc6c00
 8001164:	20000000 	.word	0x20000000
 8001168:	20000004 	.word	0x20000004
 800116c:	fffffeff 	.word	0xfffffeff
 8001170:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_RCC_OscConfig+0x3bc>)
 8001176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001178:	2202      	movs	r2, #2
 800117a:	4013      	ands	r3, r2
 800117c:	d0dc      	beq.n	8001138 <HAL_RCC_OscConfig+0x32c>
 800117e:	e013      	b.n	80011a8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001180:	f7ff fbfe 	bl	8000980 <HAL_GetTick>
 8001184:	0003      	movs	r3, r0
 8001186:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001188:	e009      	b.n	800119e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff fbf9 	bl	8000980 <HAL_GetTick>
 800118e:	0002      	movs	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <HAL_RCC_OscConfig+0x3c0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e010      	b.n	80011c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_RCC_OscConfig+0x3bc>)
 80011a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a2:	2202      	movs	r2, #2
 80011a4:	4013      	ands	r3, r2
 80011a6:	d1f0      	bne.n	800118a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80011a8:	230f      	movs	r3, #15
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d105      	bne.n	80011be <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RCC_OscConfig+0x3bc>)
 80011b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_RCC_OscConfig+0x3bc>)
 80011b8:	4905      	ldr	r1, [pc, #20]	; (80011d0 <HAL_RCC_OscConfig+0x3c4>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b006      	add	sp, #24
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	00001388 	.word	0x00001388
 80011d0:	efffffff 	.word	0xefffffff

080011d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0e9      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2207      	movs	r2, #7
 80011ee:	4013      	ands	r3, r2
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d91e      	bls.n	8001234 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2207      	movs	r2, #7
 80011fc:	4393      	bics	r3, r2
 80011fe:	0019      	movs	r1, r3
 8001200:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001208:	f7ff fbba 	bl	8000980 <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001210:	e009      	b.n	8001226 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001212:	f7ff fbb5 	bl	8000980 <HAL_GetTick>
 8001216:	0002      	movs	r2, r0
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	4a6a      	ldr	r2, [pc, #424]	; (80013c8 <HAL_RCC_ClockConfig+0x1f4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e0ca      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001226:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2207      	movs	r2, #7
 800122c:	4013      	ands	r3, r2
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d1ee      	bne.n	8001212 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2202      	movs	r2, #2
 800123a:	4013      	ands	r3, r2
 800123c:	d017      	beq.n	800126e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2204      	movs	r2, #4
 8001244:	4013      	ands	r3, r2
 8001246:	d008      	beq.n	800125a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001248:	4b60      	ldr	r3, [pc, #384]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a60      	ldr	r2, [pc, #384]	; (80013d0 <HAL_RCC_ClockConfig+0x1fc>)
 800124e:	401a      	ands	r2, r3
 8001250:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 8001252:	21b0      	movs	r1, #176	; 0xb0
 8001254:	0109      	lsls	r1, r1, #4
 8001256:	430a      	orrs	r2, r1
 8001258:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800125a:	4b5c      	ldr	r3, [pc, #368]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	4a5d      	ldr	r2, [pc, #372]	; (80013d4 <HAL_RCC_ClockConfig+0x200>)
 8001260:	4013      	ands	r3, r2
 8001262:	0019      	movs	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	4b58      	ldr	r3, [pc, #352]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800126a:	430a      	orrs	r2, r1
 800126c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2201      	movs	r2, #1
 8001274:	4013      	ands	r3, r2
 8001276:	d055      	beq.n	8001324 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001278:	4b54      	ldr	r3, [pc, #336]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	221c      	movs	r2, #28
 800127e:	4393      	bics	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	4b51      	ldr	r3, [pc, #324]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d107      	bne.n	80012a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001294:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	029b      	lsls	r3, r3, #10
 800129c:	4013      	ands	r3, r2
 800129e:	d11f      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e08b      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4013      	ands	r3, r2
 80012b6:	d113      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e07f      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d106      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80012c4:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 80012c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c8:	2202      	movs	r2, #2
 80012ca:	4013      	ands	r3, r2
 80012cc:	d108      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e074      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 80012d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e06d      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012e0:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2207      	movs	r2, #7
 80012e6:	4393      	bics	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012f4:	f7ff fb44 	bl	8000980 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fc:	e009      	b.n	8001312 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80012fe:	f7ff fb3f 	bl	8000980 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <HAL_RCC_ClockConfig+0x1f4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e054      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2238      	movs	r2, #56	; 0x38
 8001318:	401a      	ands	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	429a      	cmp	r2, r3
 8001322:	d1ec      	bne.n	80012fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2207      	movs	r2, #7
 800132a:	4013      	ands	r3, r2
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d21e      	bcs.n	8001370 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2207      	movs	r2, #7
 8001338:	4393      	bics	r3, r2
 800133a:	0019      	movs	r1, r3
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001344:	f7ff fb1c 	bl	8000980 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800134c:	e009      	b.n	8001362 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800134e:	f7ff fb17 	bl	8000980 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <HAL_RCC_ClockConfig+0x1f4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e02c      	b.n	80013bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2207      	movs	r2, #7
 8001368:	4013      	ands	r3, r2
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d1ee      	bne.n	800134e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2204      	movs	r2, #4
 8001376:	4013      	ands	r3, r2
 8001378:	d009      	beq.n	800138e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_RCC_ClockConfig+0x204>)
 8001380:	4013      	ands	r3, r2
 8001382:	0019      	movs	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 800138a:	430a      	orrs	r2, r1
 800138c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800138e:	f000 f82b 	bl	80013e8 <HAL_RCC_GetSysClockFreq>
 8001392:	0001      	movs	r1, r0
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_ClockConfig+0x1f8>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	220f      	movs	r2, #15
 800139c:	401a      	ands	r2, r3
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_RCC_ClockConfig+0x208>)
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	58d3      	ldr	r3, [r2, r3]
 80013a4:	221f      	movs	r2, #31
 80013a6:	4013      	ands	r3, r2
 80013a8:	000a      	movs	r2, r1
 80013aa:	40da      	lsrs	r2, r3
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_RCC_ClockConfig+0x20c>)
 80013ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_RCC_ClockConfig+0x210>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff fa87 	bl	80008c8 <HAL_InitTick>
 80013ba:	0003      	movs	r3, r0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b004      	add	sp, #16
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40022000 	.word	0x40022000
 80013c8:	00001388 	.word	0x00001388
 80013cc:	40021000 	.word	0x40021000
 80013d0:	ffff84ff 	.word	0xffff84ff
 80013d4:	fffff0ff 	.word	0xfffff0ff
 80013d8:	ffff8fff 	.word	0xffff8fff
 80013dc:	08001e28 	.word	0x08001e28
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_RCC_GetSysClockFreq+0x78>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2238      	movs	r2, #56	; 0x38
 80013f4:	4013      	ands	r3, r2
 80013f6:	d10f      	bne.n	8001418 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_RCC_GetSysClockFreq+0x78>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0adb      	lsrs	r3, r3, #11
 80013fe:	2207      	movs	r2, #7
 8001400:	4013      	ands	r3, r2
 8001402:	2201      	movs	r2, #1
 8001404:	409a      	lsls	r2, r3
 8001406:	0013      	movs	r3, r2
 8001408:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	4815      	ldr	r0, [pc, #84]	; (8001464 <HAL_RCC_GetSysClockFreq+0x7c>)
 800140e:	f7fe fe7b 	bl	8000108 <__udivsi3>
 8001412:	0003      	movs	r3, r0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	e01e      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_RCC_GetSysClockFreq+0x78>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2238      	movs	r2, #56	; 0x38
 800141e:	4013      	ands	r3, r2
 8001420:	2b08      	cmp	r3, #8
 8001422:	d102      	bne.n	800142a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_RCC_GetSysClockFreq+0x80>)
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	e015      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_RCC_GetSysClockFreq+0x78>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2238      	movs	r2, #56	; 0x38
 8001430:	4013      	ands	r3, r2
 8001432:	2b20      	cmp	r3, #32
 8001434:	d103      	bne.n	800143e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	e00b      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_RCC_GetSysClockFreq+0x78>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2238      	movs	r2, #56	; 0x38
 8001444:	4013      	ands	r3, r2
 8001446:	2b18      	cmp	r3, #24
 8001448:	d103      	bne.n	8001452 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800144a:	23fa      	movs	r3, #250	; 0xfa
 800144c:	01db      	lsls	r3, r3, #7
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	e001      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001456:	687b      	ldr	r3, [r7, #4]
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	02dc6c00 	.word	0x02dc6c00
 8001468:	007a1200 	.word	0x007a1200

0800146c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001474:	2313      	movs	r3, #19
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800147c:	2312      	movs	r3, #18
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	029b      	lsls	r3, r3, #10
 800148c:	4013      	ands	r3, r2
 800148e:	d100      	bne.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001490:	e079      	b.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001492:	2011      	movs	r0, #17
 8001494:	183b      	adds	r3, r7, r0
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b64      	ldr	r3, [pc, #400]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800149c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	055b      	lsls	r3, r3, #21
 80014a2:	4013      	ands	r3, r2
 80014a4:	d110      	bne.n	80014c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b61      	ldr	r3, [pc, #388]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80014a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014aa:	4b60      	ldr	r3, [pc, #384]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	0549      	lsls	r1, r1, #21
 80014b0:	430a      	orrs	r2, r1
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80014b4:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80014b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	055b      	lsls	r3, r3, #21
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	183b      	adds	r3, r7, r0
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80014c8:	4b58      	ldr	r3, [pc, #352]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80014ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014cc:	23c0      	movs	r3, #192	; 0xc0
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4013      	ands	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d019      	beq.n	800150e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d014      	beq.n	800150e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80014e4:	4b51      	ldr	r3, [pc, #324]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80014e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e8:	4a51      	ldr	r2, [pc, #324]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014ee:	4b4f      	ldr	r3, [pc, #316]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80014f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f2:	4b4e      	ldr	r3, [pc, #312]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0249      	lsls	r1, r1, #9
 80014f8:	430a      	orrs	r2, r1
 80014fa:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80014fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001500:	4b4a      	ldr	r3, [pc, #296]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001502:	494c      	ldr	r1, [pc, #304]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001504:	400a      	ands	r2, r1
 8001506:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001508:	4b48      	ldr	r3, [pc, #288]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2201      	movs	r2, #1
 8001512:	4013      	ands	r3, r2
 8001514:	d016      	beq.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001516:	f7ff fa33 	bl	8000980 <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800151e:	e00c      	b.n	800153a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff fa2e 	bl	8000980 <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	4a43      	ldr	r2, [pc, #268]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d904      	bls.n	800153a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001530:	2313      	movs	r3, #19
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	2203      	movs	r2, #3
 8001536:	701a      	strb	r2, [r3, #0]
          break;
 8001538:	e004      	b.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800153a:	4b3c      	ldr	r3, [pc, #240]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800153c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153e:	2202      	movs	r2, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d0ed      	beq.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001544:	2313      	movs	r3, #19
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10a      	bne.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	4a37      	ldr	r2, [pc, #220]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001554:	4013      	ands	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699a      	ldr	r2, [r3, #24]
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800155e:	430a      	orrs	r2, r1
 8001560:	65da      	str	r2, [r3, #92]	; 0x5c
 8001562:	e005      	b.n	8001570 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001564:	2312      	movs	r3, #18
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	2213      	movs	r2, #19
 800156a:	18ba      	adds	r2, r7, r2
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001570:	2311      	movs	r3, #17
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d105      	bne.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800157c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001580:	492e      	ldr	r1, [pc, #184]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001582:	400a      	ands	r2, r1
 8001584:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
 800158e:	d009      	beq.n	80015a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001594:	2203      	movs	r2, #3
 8001596:	4393      	bics	r3, r2
 8001598:	0019      	movs	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2240      	movs	r2, #64	; 0x40
 80015aa:	4013      	ands	r3, r2
 80015ac:	d009      	beq.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	0019      	movs	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015be:	430a      	orrs	r2, r1
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	01db      	lsls	r3, r3, #7
 80015ca:	4013      	ands	r3, r2
 80015cc:	d008      	beq.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	0899      	lsrs	r1, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015dc:	430a      	orrs	r2, r1
 80015de:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4013      	ands	r3, r2
 80015ea:	d009      	beq.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015fc:	430a      	orrs	r2, r1
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	da09      	bge.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	22e0      	movs	r2, #224	; 0xe0
 800160e:	4393      	bics	r3, r2
 8001610:	0019      	movs	r1, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800161c:	2312      	movs	r3, #18
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	781b      	ldrb	r3, [r3, #0]
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b006      	add	sp, #24
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40021000 	.word	0x40021000
 8001630:	fffffcff 	.word	0xfffffcff
 8001634:	fffeffff 	.word	0xfffeffff
 8001638:	00001388 	.word	0x00001388
 800163c:	efffffff 	.word	0xefffffff
 8001640:	ffffcfff 	.word	0xffffcfff
 8001644:	ffff3fff 	.word	0xffff3fff

08001648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0a8      	b.n	80017ac <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	2382      	movs	r3, #130	; 0x82
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	429a      	cmp	r2, r3
 800166c:	d009      	beq.n	8001682 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	61da      	str	r2, [r3, #28]
 8001674:	e005      	b.n	8001682 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	225d      	movs	r2, #93	; 0x5d
 800168c:	5c9b      	ldrb	r3, [r3, r2]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	225c      	movs	r2, #92	; 0x5c
 8001698:	2100      	movs	r1, #0
 800169a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	0018      	movs	r0, r3
 80016a0:	f7fe fecc 	bl	800043c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	225d      	movs	r2, #93	; 0x5d
 80016a8:	2102      	movs	r1, #2
 80016aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2140      	movs	r1, #64	; 0x40
 80016b8:	438a      	bics	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	23e0      	movs	r3, #224	; 0xe0
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d902      	bls.n	80016ce <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	e002      	b.n	80016d4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	015b      	lsls	r3, r3, #5
 80016d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	23f0      	movs	r3, #240	; 0xf0
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	429a      	cmp	r2, r3
 80016de:	d008      	beq.n	80016f2 <HAL_SPI_Init+0xaa>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	23e0      	movs	r3, #224	; 0xe0
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d002      	beq.n	80016f2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	2382      	movs	r3, #130	; 0x82
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	401a      	ands	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6899      	ldr	r1, [r3, #8]
 8001700:	2384      	movs	r3, #132	; 0x84
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	400b      	ands	r3, r1
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	2102      	movs	r1, #2
 800170e:	400b      	ands	r3, r1
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	2101      	movs	r1, #1
 8001718:	400b      	ands	r3, r1
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6999      	ldr	r1, [r3, #24]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	400b      	ands	r3, r1
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	2138      	movs	r1, #56	; 0x38
 800172e:	400b      	ands	r3, r1
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	400b      	ands	r3, r1
 800173a:	431a      	orrs	r2, r3
 800173c:	0011      	movs	r1, r2
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	401a      	ands	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	0c1b      	lsrs	r3, r3, #16
 8001756:	2204      	movs	r2, #4
 8001758:	401a      	ands	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	2110      	movs	r1, #16
 8001760:	400b      	ands	r3, r1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001768:	2108      	movs	r1, #8
 800176a:	400b      	ands	r3, r1
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	23f0      	movs	r3, #240	; 0xf0
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	400b      	ands	r3, r1
 8001778:	431a      	orrs	r2, r3
 800177a:	0011      	movs	r1, r2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	015b      	lsls	r3, r3, #5
 8001782:	401a      	ands	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4907      	ldr	r1, [pc, #28]	; (80017b4 <HAL_SPI_Init+0x16c>)
 8001798:	400a      	ands	r2, r1
 800179a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	225d      	movs	r2, #93	; 0x5d
 80017a6:	2101      	movs	r1, #1
 80017a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	0018      	movs	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b004      	add	sp, #16
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	fffff7ff 	.word	0xfffff7ff

080017b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	1dbb      	adds	r3, r7, #6
 80017c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017c8:	231f      	movs	r3, #31
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	225c      	movs	r2, #92	; 0x5c
 80017d4:	5c9b      	ldrb	r3, [r3, r2]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_SPI_Transmit+0x26>
 80017da:	2302      	movs	r3, #2
 80017dc:	e171      	b.n	8001ac2 <HAL_SPI_Transmit+0x30a>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	225c      	movs	r2, #92	; 0x5c
 80017e2:	2101      	movs	r1, #1
 80017e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017e6:	f7ff f8cb 	bl	8000980 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80017ee:	2316      	movs	r3, #22
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	1dba      	adds	r2, r7, #6
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	225d      	movs	r2, #93	; 0x5d
 80017fc:	5c9b      	ldrb	r3, [r3, r2]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d004      	beq.n	800180e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001804:	231f      	movs	r3, #31
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	2202      	movs	r2, #2
 800180a:	701a      	strb	r2, [r3, #0]
    goto error;
 800180c:	e14e      	b.n	8001aac <HAL_SPI_Transmit+0x2f4>
  }

  if ((pData == NULL) || (Size == 0U))
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_SPI_Transmit+0x64>
 8001814:	1dbb      	adds	r3, r7, #6
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d104      	bne.n	8001826 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800181c:	231f      	movs	r3, #31
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
    goto error;
 8001824:	e142      	b.n	8001aac <HAL_SPI_Transmit+0x2f4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	225d      	movs	r2, #93	; 0x5d
 800182a:	2103      	movs	r1, #3
 800182c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1dba      	adds	r2, r7, #6
 800183e:	8812      	ldrh	r2, [r2, #0]
 8001840:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1dba      	adds	r2, r7, #6
 8001846:	8812      	ldrh	r2, [r2, #0]
 8001848:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2244      	movs	r2, #68	; 0x44
 8001854:	2100      	movs	r1, #0
 8001856:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2246      	movs	r2, #70	; 0x46
 800185c:	2100      	movs	r1, #0
 800185e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	429a      	cmp	r2, r3
 8001876:	d110      	bne.n	800189a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2140      	movs	r1, #64	; 0x40
 8001884:	438a      	bics	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	01c9      	lsls	r1, r1, #7
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2240      	movs	r2, #64	; 0x40
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b40      	cmp	r3, #64	; 0x40
 80018a6:	d007      	beq.n	80018b8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	23e0      	movs	r3, #224	; 0xe0
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d94e      	bls.n	8001962 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_SPI_Transmit+0x11e>
 80018cc:	2316      	movs	r3, #22
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d13f      	bne.n	8001956 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018da:	881a      	ldrh	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e6:	1c9a      	adds	r2, r3, #2
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80018fa:	e02c      	b.n	8001956 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d112      	bne.n	8001930 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191a:	1c9a      	adds	r2, r3, #2
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001924:	b29b      	uxth	r3, r3
 8001926:	3b01      	subs	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800192e:	e012      	b.n	8001956 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001930:	f7ff f826 	bl	8000980 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d802      	bhi.n	8001946 <HAL_SPI_Transmit+0x18e>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	d102      	bne.n	800194c <HAL_SPI_Transmit+0x194>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d104      	bne.n	8001956 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800194c:	231f      	movs	r3, #31
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	2203      	movs	r2, #3
 8001952:	701a      	strb	r2, [r3, #0]
          goto error;
 8001954:	e0aa      	b.n	8001aac <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800195a:	b29b      	uxth	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1cd      	bne.n	80018fc <HAL_SPI_Transmit+0x144>
 8001960:	e080      	b.n	8001a64 <HAL_SPI_Transmit+0x2ac>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_SPI_Transmit+0x1be>
 800196a:	2316      	movs	r3, #22
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d000      	beq.n	8001976 <HAL_SPI_Transmit+0x1be>
 8001974:	e071      	b.n	8001a5a <HAL_SPI_Transmit+0x2a2>
    {
      if (hspi->TxXferCount > 1U)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d912      	bls.n	80019a6 <HAL_SPI_Transmit+0x1ee>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	881a      	ldrh	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	1c9a      	adds	r2, r3, #2
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800199a:	b29b      	uxth	r3, r3
 800199c:	3b02      	subs	r3, #2
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80019a4:	e059      	b.n	8001a5a <HAL_SPI_Transmit+0x2a2>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	330c      	adds	r3, #12
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80019cc:	e045      	b.n	8001a5a <HAL_SPI_Transmit+0x2a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2202      	movs	r2, #2
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d12b      	bne.n	8001a34 <HAL_SPI_Transmit+0x27c>
      {
        if (hspi->TxXferCount > 1U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d912      	bls.n	8001a0c <HAL_SPI_Transmit+0x254>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ea:	881a      	ldrh	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	1c9a      	adds	r2, r3, #2
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3b02      	subs	r3, #2
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a0a:	e026      	b.n	8001a5a <HAL_SPI_Transmit+0x2a2>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	330c      	adds	r3, #12
 8001a16:	7812      	ldrb	r2, [r2, #0]
 8001a18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a32:	e012      	b.n	8001a5a <HAL_SPI_Transmit+0x2a2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a34:	f7fe ffa4 	bl	8000980 <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d802      	bhi.n	8001a4a <HAL_SPI_Transmit+0x292>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	d102      	bne.n	8001a50 <HAL_SPI_Transmit+0x298>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d104      	bne.n	8001a5a <HAL_SPI_Transmit+0x2a2>
        {
          errorcode = HAL_TIMEOUT;
 8001a50:	231f      	movs	r3, #31
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	2203      	movs	r2, #3
 8001a56:	701a      	strb	r2, [r3, #0]
          goto error;
 8001a58:	e028      	b.n	8001aac <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1b4      	bne.n	80019ce <HAL_SPI_Transmit+0x216>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f000 f95e 	bl	8001d2c <SPI_EndRxTxTransaction>
 8001a70:	1e03      	subs	r3, r0, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_SPI_Transmit+0x2c2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10a      	bne.n	8001a98 <HAL_SPI_Transmit+0x2e0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_SPI_Transmit+0x2f2>
  {
    errorcode = HAL_ERROR;
 8001aa0:	231f      	movs	r3, #31
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	e000      	b.n	8001aac <HAL_SPI_Transmit+0x2f4>
  }

error:
 8001aaa:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	225d      	movs	r2, #93	; 0x5d
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	225c      	movs	r2, #92	; 0x5c
 8001ab8:	2100      	movs	r1, #0
 8001aba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001abc:	231f      	movs	r3, #31
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b008      	add	sp, #32
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	1dfb      	adds	r3, r7, #7
 8001ada:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001adc:	f7fe ff50 	bl	8000980 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	18d3      	adds	r3, r2, r3
 8001aea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001aec:	f7fe ff48 	bl	8000980 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	015b      	lsls	r3, r3, #5
 8001afa:	0d1b      	lsrs	r3, r3, #20
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	4353      	muls	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b02:	e058      	b.n	8001bb6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	d055      	beq.n	8001bb6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b0a:	f7fe ff39 	bl	8000980 <HAL_GetTick>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d902      	bls.n	8001b20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d142      	bne.n	8001ba6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	21e0      	movs	r1, #224	; 0xe0
 8001b2c:	438a      	bics	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	2382      	movs	r3, #130	; 0x82
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d113      	bne.n	8001b64 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d005      	beq.n	8001b54 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d107      	bne.n	8001b64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2140      	movs	r1, #64	; 0x40
 8001b60:	438a      	bics	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	019b      	lsls	r3, r3, #6
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d110      	bne.n	8001b92 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	491a      	ldr	r1, [pc, #104]	; (8001be4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	0189      	lsls	r1, r1, #6
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	225d      	movs	r2, #93	; 0x5d
 8001b96:	2101      	movs	r1, #1
 8001b98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	225c      	movs	r2, #92	; 0x5c
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e017      	b.n	8001bd6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	425a      	negs	r2, r3
 8001bc6:	4153      	adcs	r3, r2
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	001a      	movs	r2, r3
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d197      	bne.n	8001b04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b008      	add	sp, #32
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	20000000 	.word	0x20000000
 8001be4:	ffffdfff 	.word	0xffffdfff

08001be8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001bf6:	2317      	movs	r3, #23
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001bfe:	f7fe febf 	bl	8000980 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	18d3      	adds	r3, r2, r3
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001c0e:	f7fe feb7 	bl	8000980 <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	330c      	adds	r3, #12
 8001c1c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	0013      	movs	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	189b      	adds	r3, r3, r2
 8001c28:	00da      	lsls	r2, r3, #3
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	0d1b      	lsrs	r3, r3, #20
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	4353      	muls	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001c34:	e068      	b.n	8001d08 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	23c0      	movs	r3, #192	; 0xc0
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d10a      	bne.n	8001c56 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d107      	bne.n	8001c56 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	2117      	movs	r1, #23
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	d055      	beq.n	8001d08 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c5c:	f7fe fe90 	bl	8000980 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d902      	bls.n	8001c72 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d142      	bne.n	8001cf8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	21e0      	movs	r1, #224	; 0xe0
 8001c7e:	438a      	bics	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	2382      	movs	r3, #130	; 0x82
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d113      	bne.n	8001cb6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d005      	beq.n	8001ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d107      	bne.n	8001cb6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2140      	movs	r1, #64	; 0x40
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	019b      	lsls	r3, r3, #6
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d110      	bne.n	8001ce4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4916      	ldr	r1, [pc, #88]	; (8001d28 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	0189      	lsls	r1, r1, #6
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	225d      	movs	r2, #93	; 0x5d
 8001ce8:	2101      	movs	r1, #1
 8001cea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	225c      	movs	r2, #92	; 0x5c
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e010      	b.n	8001d1a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	4013      	ands	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d18e      	bne.n	8001c36 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b00a      	add	sp, #40	; 0x28
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	20000000 	.word	0x20000000
 8001d28:	ffffdfff 	.word	0xffffdfff

08001d2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	23c0      	movs	r3, #192	; 0xc0
 8001d3c:	0159      	lsls	r1, r3, #5
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	0013      	movs	r3, r2
 8001d46:	2200      	movs	r2, #0
 8001d48:	f7ff ff4e 	bl	8001be8 <SPI_WaitFifoStateUntilTimeout>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	d007      	beq.n	8001d60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d54:	2220      	movs	r2, #32
 8001d56:	431a      	orrs	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e027      	b.n	8001db0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	0013      	movs	r3, r2
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	f7ff fead 	bl	8001acc <SPI_WaitFlagStateUntilTimeout>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d007      	beq.n	8001d86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e014      	b.n	8001db0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	23c0      	movs	r3, #192	; 0xc0
 8001d8a:	00d9      	lsls	r1, r3, #3
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	0013      	movs	r3, r2
 8001d94:	2200      	movs	r2, #0
 8001d96:	f7ff ff27 	bl	8001be8 <SPI_WaitFifoStateUntilTimeout>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d007      	beq.n	8001dae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	2220      	movs	r2, #32
 8001da4:	431a      	orrs	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e000      	b.n	8001db0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b004      	add	sp, #16
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <memset>:
 8001db8:	0003      	movs	r3, r0
 8001dba:	1882      	adds	r2, r0, r2
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d100      	bne.n	8001dc2 <memset+0xa>
 8001dc0:	4770      	bx	lr
 8001dc2:	7019      	strb	r1, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	e7f9      	b.n	8001dbc <memset+0x4>

08001dc8 <__libc_init_array>:
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	2600      	movs	r6, #0
 8001dcc:	4c0c      	ldr	r4, [pc, #48]	; (8001e00 <__libc_init_array+0x38>)
 8001dce:	4d0d      	ldr	r5, [pc, #52]	; (8001e04 <__libc_init_array+0x3c>)
 8001dd0:	1b64      	subs	r4, r4, r5
 8001dd2:	10a4      	asrs	r4, r4, #2
 8001dd4:	42a6      	cmp	r6, r4
 8001dd6:	d109      	bne.n	8001dec <__libc_init_array+0x24>
 8001dd8:	2600      	movs	r6, #0
 8001dda:	f000 f819 	bl	8001e10 <_init>
 8001dde:	4c0a      	ldr	r4, [pc, #40]	; (8001e08 <__libc_init_array+0x40>)
 8001de0:	4d0a      	ldr	r5, [pc, #40]	; (8001e0c <__libc_init_array+0x44>)
 8001de2:	1b64      	subs	r4, r4, r5
 8001de4:	10a4      	asrs	r4, r4, #2
 8001de6:	42a6      	cmp	r6, r4
 8001de8:	d105      	bne.n	8001df6 <__libc_init_array+0x2e>
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
 8001dec:	00b3      	lsls	r3, r6, #2
 8001dee:	58eb      	ldr	r3, [r5, r3]
 8001df0:	4798      	blx	r3
 8001df2:	3601      	adds	r6, #1
 8001df4:	e7ee      	b.n	8001dd4 <__libc_init_array+0xc>
 8001df6:	00b3      	lsls	r3, r6, #2
 8001df8:	58eb      	ldr	r3, [r5, r3]
 8001dfa:	4798      	blx	r3
 8001dfc:	3601      	adds	r6, #1
 8001dfe:	e7f2      	b.n	8001de6 <__libc_init_array+0x1e>
 8001e00:	08001e74 	.word	0x08001e74
 8001e04:	08001e74 	.word	0x08001e74
 8001e08:	08001e78 	.word	0x08001e78
 8001e0c:	08001e74 	.word	0x08001e74

08001e10 <_init>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e16:	bc08      	pop	{r3}
 8001e18:	469e      	mov	lr, r3
 8001e1a:	4770      	bx	lr

08001e1c <_fini>:
 8001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e22:	bc08      	pop	{r3}
 8001e24:	469e      	mov	lr, r3
 8001e26:	4770      	bx	lr
