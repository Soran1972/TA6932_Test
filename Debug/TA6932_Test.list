
TA6932_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020d8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002198  08002198  00003198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021e4  080021e4  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  080021e4  080021e4  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021e4  080021e4  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021e4  080021e4  000031e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021e8  080021e8  000031e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080021ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  080021fc  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080021fc  00004128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000638f  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172d  00000000  00000000  0000a3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000526  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b8b  00000000  00000000  0000c706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000840e  00000000  00000000  0001e291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006cf83  00000000  00000000  0002669f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00093622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000174c  00000000  00000000  00093668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00094db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002180 	.word	0x08002180

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002180 	.word	0x08002180

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fccc 	bl	8000bc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f89d 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f91d 	bl	800046c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000232:	f000 f8dd 	bl	80003f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  TA6932_Init();
 8000236:	f000 fb93 	bl	8000960 <TA6932_Init>
  TA6932_Clear();                    // يمسح ويكتب
 800023a:	f000 fbb1 	bl	80009a0 <TA6932_Clear>
 HAL_Delay(1000);
 800023e:	23fa      	movs	r3, #250	@ 0xfa
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fd3a 	bl	8000cbc <HAL_Delay>
 goto Test_2;
 8000248:	46c0      	nop			@ (mov r8, r8)
TA6932_putDigitOne(13, 9,0); // write 9 to digit 13
TA6932_putCharOne(1, 'A', 0);
TA6932_WriteOneRaw(4, 3);
//=========
Test_2:
TA6932_putOne(0, 1, 0);
 800024a:	2200      	movs	r2, #0
 800024c:	2101      	movs	r1, #1
 800024e:	2000      	movs	r0, #0
 8000250:	f000 fc50 	bl	8000af4 <TA6932_putOne>
TA6932_putOne(1, 'A', 0);
 8000254:	2200      	movs	r2, #0
 8000256:	2141      	movs	r1, #65	@ 0x41
 8000258:	2001      	movs	r0, #1
 800025a:	f000 fc4b 	bl	8000af4 <TA6932_putOne>
TA6932_putOne(2,'t', 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2174      	movs	r1, #116	@ 0x74
 8000262:	2002      	movs	r0, #2
 8000264:	f000 fc46 	bl	8000af4 <TA6932_putOne>
//===================
TA6932_putOneBuf(0, 0, 0);
 8000268:	2200      	movs	r2, #0
 800026a:	2100      	movs	r1, #0
 800026c:	2000      	movs	r0, #0
 800026e:	f000 fc60 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(1, 1, 0);
 8000272:	2200      	movs	r2, #0
 8000274:	2101      	movs	r1, #1
 8000276:	2001      	movs	r0, #1
 8000278:	f000 fc5b 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(2, 2, 0);
 800027c:	2200      	movs	r2, #0
 800027e:	2102      	movs	r1, #2
 8000280:	2002      	movs	r0, #2
 8000282:	f000 fc56 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(3, 3, 0);
 8000286:	2200      	movs	r2, #0
 8000288:	2103      	movs	r1, #3
 800028a:	2003      	movs	r0, #3
 800028c:	f000 fc51 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(4, 4, 0);
 8000290:	2200      	movs	r2, #0
 8000292:	2104      	movs	r1, #4
 8000294:	2004      	movs	r0, #4
 8000296:	f000 fc4c 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(5, 5, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	2105      	movs	r1, #5
 800029e:	2005      	movs	r0, #5
 80002a0:	f000 fc47 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(6, 6, 0);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2106      	movs	r1, #6
 80002a8:	2006      	movs	r0, #6
 80002aa:	f000 fc42 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(7, 7, 0);
 80002ae:	2200      	movs	r2, #0
 80002b0:	2107      	movs	r1, #7
 80002b2:	2007      	movs	r0, #7
 80002b4:	f000 fc3d 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(8, 8, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2108      	movs	r1, #8
 80002bc:	2008      	movs	r0, #8
 80002be:	f000 fc38 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(9, 9, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2109      	movs	r1, #9
 80002c6:	2009      	movs	r0, #9
 80002c8:	f000 fc33 	bl	8000b32 <TA6932_putOneBuf>

TA6932_putOneBuf(0xA,'A', 0);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2141      	movs	r1, #65	@ 0x41
 80002d0:	200a      	movs	r0, #10
 80002d2:	f000 fc2e 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(0xB,'b', 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2162      	movs	r1, #98	@ 0x62
 80002da:	200b      	movs	r0, #11
 80002dc:	f000 fc29 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(0xC,'c', 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2163      	movs	r1, #99	@ 0x63
 80002e4:	200c      	movs	r0, #12
 80002e6:	f000 fc24 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(0xD,'d', 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2164      	movs	r1, #100	@ 0x64
 80002ee:	200d      	movs	r0, #13
 80002f0:	f000 fc1f 	bl	8000b32 <TA6932_putOneBuf>
TA6932_putOneBuf(0xE,'F', 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2146      	movs	r1, #70	@ 0x46
 80002f8:	200e      	movs	r0, #14
 80002fa:	f000 fc1a 	bl	8000b32 <TA6932_putOneBuf>
TA6932_WriteAll();
 80002fe:	f000 fb41 	bl	8000984 <TA6932_WriteAll>

HAL_Delay(1000);
 8000302:	23fa      	movs	r3, #250	@ 0xfa
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	0018      	movs	r0, r3
 8000308:	f000 fcd8 	bl	8000cbc <HAL_Delay>
TA6932_Clear();
 800030c:	f000 fb48 	bl	80009a0 <TA6932_Clear>
for(counter=0;counter<16;counter++)
 8000310:	4b13      	ldr	r3, [pc, #76]	@ (8000360 <main+0x140>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
 8000316:	e00f      	b.n	8000338 <main+0x118>
{
	TA6932_putOne(counter, 1, 0);
 8000318:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <main+0x140>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2200      	movs	r2, #0
 800031e:	2101      	movs	r1, #1
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fbe7 	bl	8000af4 <TA6932_putOne>
 HAL_Delay(200);
 8000326:	20c8      	movs	r0, #200	@ 0xc8
 8000328:	f000 fcc8 	bl	8000cbc <HAL_Delay>
for(counter=0;counter<16;counter++)
 800032c:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <main+0x140>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	b2da      	uxtb	r2, r3
 8000334:	4b0a      	ldr	r3, [pc, #40]	@ (8000360 <main+0x140>)
 8000336:	701a      	strb	r2, [r3, #0]
 8000338:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <main+0x140>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b0f      	cmp	r3, #15
 800033e:	d9eb      	bls.n	8000318 <main+0xf8>
}
//                       A     b   c     d
uint8_t digit []={0x21, 0x6F,0x7A,0x58,0x79,0,0,0,0x21, 0x5D, 0x75 };
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4a08      	ldr	r2, [pc, #32]	@ (8000364 <main+0x144>)
 8000344:	ca03      	ldmia	r2!, {r0, r1}
 8000346:	c303      	stmia	r3!, {r0, r1}
 8000348:	8811      	ldrh	r1, [r2, #0]
 800034a:	8019      	strh	r1, [r3, #0]
 800034c:	7892      	ldrb	r2, [r2, #2]
 800034e:	709a      	strb	r2, [r3, #2]
TA6932_loadBuffer(digit);
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fae6 	bl	8000924 <TA6932_loadBuffer>
TA6932_WriteAll();
 8000358:	f000 fb14 	bl	8000984 <TA6932_WriteAll>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800035c:	46c0      	nop			@ (mov r8, r8)
 800035e:	e7fd      	b.n	800035c <main+0x13c>
 8000360:	2000002c 	.word	0x2000002c
 8000364:	08002198 	.word	0x08002198

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b08d      	sub	sp, #52	@ 0x34
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	2414      	movs	r4, #20
 8000370:	193b      	adds	r3, r7, r4
 8000372:	0018      	movs	r0, r3
 8000374:	231c      	movs	r3, #28
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f001 fed5 	bl	8002128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037e:	003b      	movs	r3, r7
 8000380:	0018      	movs	r0, r3
 8000382:	2314      	movs	r3, #20
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f001 fece 	bl	8002128 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038c:	193b      	adds	r3, r7, r4
 800038e:	2202      	movs	r2, #2
 8000390:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000392:	193b      	adds	r3, r7, r4
 8000394:	2280      	movs	r2, #128	@ 0x80
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800039a:	193b      	adds	r3, r7, r4
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	2240      	movs	r2, #64	@ 0x40
 80003a4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	193b      	adds	r3, r7, r4
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 fee7 	bl	800117c <HAL_RCC_OscConfig>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80003b2:	f000 f89f 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b6:	003b      	movs	r3, r7
 80003b8:	2207      	movs	r2, #7
 80003ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003bc:	003b      	movs	r3, r7
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	003b      	movs	r3, r7
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003c8:	003b      	movs	r3, r7
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003ce:	003b      	movs	r3, r7
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d4:	003b      	movs	r3, r7
 80003d6:	2101      	movs	r1, #1
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 f8b3 	bl	8001544 <HAL_RCC_ClockConfig>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003e2:	f000 f887 	bl	80004f4 <Error_Handler>
  }
}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b00d      	add	sp, #52	@ 0x34
 80003ec:	bd90      	pop	{r4, r7, pc}
	...

080003f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_SPI1_Init+0x74>)
 80003f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000468 <MX_SPI1_Init+0x78>)
 80003f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_SPI1_Init+0x74>)
 80003fc:	2282      	movs	r2, #130	@ 0x82
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000402:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_SPI1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000408:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <MX_SPI1_Init+0x74>)
 800040a:	22e0      	movs	r2, #224	@ 0xe0
 800040c:	00d2      	lsls	r2, r2, #3
 800040e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <MX_SPI1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <MX_SPI1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <MX_SPI1_Init+0x74>)
 800041e:	2280      	movs	r2, #128	@ 0x80
 8000420:	0092      	lsls	r2, r2, #2
 8000422:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000424:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <MX_SPI1_Init+0x74>)
 8000426:	2228      	movs	r2, #40	@ 0x28
 8000428:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800042a:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_SPI1_Init+0x74>)
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000430:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <MX_SPI1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <MX_SPI1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800043c:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <MX_SPI1_Init+0x74>)
 800043e:	2207      	movs	r2, #7
 8000440:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000442:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <MX_SPI1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800044e:	4b05      	ldr	r3, [pc, #20]	@ (8000464 <MX_SPI1_Init+0x74>)
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fab1 	bl	80019b8 <HAL_SPI_Init>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800045a:	f000 f84b 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000030 	.word	0x20000030
 8000468:	40013000 	.word	0x40013000

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b089      	sub	sp, #36	@ 0x24
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	240c      	movs	r4, #12
 8000474:	193b      	adds	r3, r7, r4
 8000476:	0018      	movs	r0, r3
 8000478:	2314      	movs	r3, #20
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f001 fe53 	bl	8002128 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000482:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <MX_GPIO_Init+0x84>)
 8000484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000486:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <MX_GPIO_Init+0x84>)
 8000488:	2104      	movs	r1, #4
 800048a:	430a      	orrs	r2, r1
 800048c:	635a      	str	r2, [r3, #52]	@ 0x34
 800048e:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <MX_GPIO_Init+0x84>)
 8000490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000492:	2204      	movs	r2, #4
 8000494:	4013      	ands	r3, r2
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_GPIO_Init+0x84>)
 800049c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800049e:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <MX_GPIO_Init+0x84>)
 80004a0:	2101      	movs	r1, #1
 80004a2:	430a      	orrs	r2, r1
 80004a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004a6:	4b12      	ldr	r3, [pc, #72]	@ (80004f0 <MX_GPIO_Init+0x84>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004aa:	2201      	movs	r2, #1
 80004ac:	4013      	ands	r3, r2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80004b2:	23a0      	movs	r3, #160	@ 0xa0
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	2201      	movs	r2, #1
 80004b8:	2110      	movs	r1, #16
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fe40 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004c0:	0021      	movs	r1, r4
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2210      	movs	r2, #16
 80004c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2201      	movs	r2, #1
 80004cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2202      	movs	r2, #2
 80004d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	187a      	adds	r2, r7, r1
 80004dc:	23a0      	movs	r3, #160	@ 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fcc2 	bl	8000e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b009      	add	sp, #36	@ 0x24
 80004ee:	bd90      	pop	{r4, r7, pc}
 80004f0:	40021000 	.word	0x40021000

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	e7fd      	b.n	80004fc <Error_Handler+0x8>

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <HAL_MspInit+0x44>)
 8000508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <HAL_MspInit+0x44>)
 800050c:	2101      	movs	r1, #1
 800050e:	430a      	orrs	r2, r1
 8000510:	641a      	str	r2, [r3, #64]	@ 0x40
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <HAL_MspInit+0x44>)
 8000514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000516:	2201      	movs	r2, #1
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <HAL_MspInit+0x44>)
 8000520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <HAL_MspInit+0x44>)
 8000524:	2180      	movs	r1, #128	@ 0x80
 8000526:	0549      	lsls	r1, r1, #21
 8000528:	430a      	orrs	r2, r1
 800052a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <HAL_MspInit+0x44>)
 800052e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000530:	2380      	movs	r3, #128	@ 0x80
 8000532:	055b      	lsls	r3, r3, #21
 8000534:	4013      	ands	r3, r2
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	40021000 	.word	0x40021000

08000548 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b091      	sub	sp, #68	@ 0x44
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	232c      	movs	r3, #44	@ 0x2c
 8000552:	18fb      	adds	r3, r7, r3
 8000554:	0018      	movs	r0, r3
 8000556:	2314      	movs	r3, #20
 8000558:	001a      	movs	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	f001 fde4 	bl	8002128 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	2410      	movs	r4, #16
 8000562:	193b      	adds	r3, r7, r4
 8000564:	0018      	movs	r0, r3
 8000566:	231c      	movs	r3, #28
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f001 fddc 	bl	8002128 <memset>
  if(hspi->Instance==SPI1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a23      	ldr	r2, [pc, #140]	@ (8000604 <HAL_SPI_MspInit+0xbc>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d13f      	bne.n	80005fa <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2280      	movs	r2, #128	@ 0x80
 800057e:	0112      	lsls	r2, r2, #4
 8000580:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000582:	193b      	adds	r3, r7, r4
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000588:	193b      	adds	r3, r7, r4
 800058a:	0018      	movs	r0, r3
 800058c:	f001 f926 	bl	80017dc <HAL_RCCEx_PeriphCLKConfig>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000594:	f7ff ffae 	bl	80004f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000598:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <HAL_SPI_MspInit+0xc0>)
 800059a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <HAL_SPI_MspInit+0xc0>)
 800059e:	2180      	movs	r1, #128	@ 0x80
 80005a0:	0149      	lsls	r1, r1, #5
 80005a2:	430a      	orrs	r2, r1
 80005a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <HAL_SPI_MspInit+0xc0>)
 80005a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005aa:	2380      	movs	r3, #128	@ 0x80
 80005ac:	015b      	lsls	r3, r3, #5
 80005ae:	4013      	ands	r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <HAL_SPI_MspInit+0xc0>)
 80005b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <HAL_SPI_MspInit+0xc0>)
 80005ba:	2101      	movs	r1, #1
 80005bc:	430a      	orrs	r2, r1
 80005be:	635a      	str	r2, [r3, #52]	@ 0x34
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <HAL_SPI_MspInit+0xc0>)
 80005c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005c4:	2201      	movs	r2, #1
 80005c6:	4013      	ands	r3, r2
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80005cc:	212c      	movs	r1, #44	@ 0x2c
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2206      	movs	r2, #6
 80005d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2202      	movs	r2, #2
 80005d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	187a      	adds	r2, r7, r1
 80005ee:	23a0      	movs	r3, #160	@ 0xa0
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fc39 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b011      	add	sp, #68	@ 0x44
 8000600:	bd90      	pop	{r4, r7, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	40013000 	.word	0x40013000
 8000608:	40021000 	.word	0x40021000

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	e7fd      	b.n	8000610 <NMI_Handler+0x4>

08000614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000618:	46c0      	nop			@ (mov r8, r8)
 800061a:	e7fd      	b.n	8000618 <HardFault_Handler+0x4>

0800061c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 fb26 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000644:	4b03      	ldr	r3, [pc, #12]	@ (8000654 <SystemInit+0x14>)
 8000646:	2280      	movs	r2, #128	@ 0x80
 8000648:	0512      	lsls	r2, r2, #20
 800064a:	609a      	str	r2, [r3, #8]
#endif
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <TA_STB>:

// SPI handle المُنشأ من CubeMX (عدّل لو تستخدم SPI ثاني)
extern SPI_HandleTypeDef hspi1;

// ===== Low-level =====
static inline void TA_STB(int v){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(TA_STB_PORT, TA_STB_PIN, v ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	4193      	sbcs	r3, r2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	001a      	movs	r2, r3
 800066a:	23a0      	movs	r3, #160	@ 0xa0
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	2110      	movs	r1, #16
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fd65 	bl	8001140 <HAL_GPIO_WritePin>
}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <TA_sendByte>:
static HAL_StatusTypeDef TA_sendByte(uint8_t b){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	0002      	movs	r2, r0
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	701a      	strb	r2, [r3, #0]
  return HAL_SPI_Transmit(&hspi1, &b, 1, 10);
 800068c:	1df9      	adds	r1, r7, #7
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <TA_sendByte+0x24>)
 8000690:	230a      	movs	r3, #10
 8000692:	2201      	movs	r2, #1
 8000694:	f001 fa48 	bl	8001b28 <HAL_SPI_Transmit>
 8000698:	0003      	movs	r3, r0
}
 800069a:	0018      	movs	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	20000030 	.word	0x20000030

080006a8 <TA_cmd>:
static void TA_cmd(uint8_t cmd){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	0002      	movs	r2, r0
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	701a      	strb	r2, [r3, #0]
  TA_STB(0);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ffcf 	bl	8000658 <TA_STB>
  TA_sendByte(cmd);
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff ffde 	bl	8000680 <TA_sendByte>
  TA_STB(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ffc7 	bl	8000658 <TA_STB>
}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <TA_writeSeq>:
static void TA_writeSeq(uint8_t startAddr, const uint8_t *data, uint8_t len){
 80006d2:	b590      	push	{r4, r7, lr}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	0011      	movs	r1, r2
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	1c02      	adds	r2, r0, #0
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	1c0a      	adds	r2, r1, #0
 80006e6:	701a      	strb	r2, [r3, #0]
  TA_cmd(0x40); // Data set: write, auto-increment
 80006e8:	2040      	movs	r0, #64	@ 0x40
 80006ea:	f7ff ffdd 	bl	80006a8 <TA_cmd>
  TA_STB(0);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff ffb2 	bl	8000658 <TA_STB>
  uint8_t a = 0xC0 | (startAddr & 0x0F);
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	220f      	movs	r2, #15
 80006fc:	4013      	ands	r3, r2
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	2240      	movs	r2, #64	@ 0x40
 8000702:	4252      	negs	r2, r2
 8000704:	4313      	orrs	r3, r2
 8000706:	b25a      	sxtb	r2, r3
 8000708:	210e      	movs	r1, #14
 800070a:	187b      	adds	r3, r7, r1
 800070c:	701a      	strb	r2, [r3, #0]
  TA_sendByte(a);
 800070e:	187b      	adds	r3, r7, r1
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff ffb4 	bl	8000680 <TA_sendByte>
  for(uint8_t i=0;i<len && i<16;i++) TA_sendByte(data[i]);
 8000718:	230f      	movs	r3, #15
 800071a:	18fb      	adds	r3, r7, r3
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e00d      	b.n	800073e <TA_writeSeq+0x6c>
 8000722:	240f      	movs	r4, #15
 8000724:	193b      	adds	r3, r7, r4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	18d3      	adds	r3, r2, r3
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	0018      	movs	r0, r3
 8000730:	f7ff ffa6 	bl	8000680 <TA_sendByte>
 8000734:	193b      	adds	r3, r7, r4
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	193b      	adds	r3, r7, r4
 800073a:	3201      	adds	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	210f      	movs	r1, #15
 8000740:	187a      	adds	r2, r7, r1
 8000742:	1dbb      	adds	r3, r7, #6
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d203      	bcs.n	8000754 <TA_writeSeq+0x82>
 800074c:	187b      	adds	r3, r7, r1
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b0f      	cmp	r3, #15
 8000752:	d9e6      	bls.n	8000722 <TA_writeSeq+0x50>
  TA_STB(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff ff7f 	bl	8000658 <TA_STB>
}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b005      	add	sp, #20
 8000760:	bd90      	pop	{r4, r7, pc}
	...

08000764 <font_init>:

// ===== Font table (Common-Cathode; bit7 للـ dp خارجياً) =====
static uint8_t font7seg[128];   // ASCII -> 7-seg pattern (bit7 for dp)
static void font_init(void);

static void font_init(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  // digits '0'..'9' (حسب خريطتك CC)
  font7seg['0'] = 0x3F; font7seg['1'] = 0x21; font7seg['2'] = 0x5D; font7seg['3'] = 0x75; font7seg['4'] = 0x63;
 8000768:	4b56      	ldr	r3, [pc, #344]	@ (80008c4 <font_init+0x160>)
 800076a:	2230      	movs	r2, #48	@ 0x30
 800076c:	213f      	movs	r1, #63	@ 0x3f
 800076e:	5499      	strb	r1, [r3, r2]
 8000770:	4b54      	ldr	r3, [pc, #336]	@ (80008c4 <font_init+0x160>)
 8000772:	2231      	movs	r2, #49	@ 0x31
 8000774:	2121      	movs	r1, #33	@ 0x21
 8000776:	5499      	strb	r1, [r3, r2]
 8000778:	4b52      	ldr	r3, [pc, #328]	@ (80008c4 <font_init+0x160>)
 800077a:	2232      	movs	r2, #50	@ 0x32
 800077c:	215d      	movs	r1, #93	@ 0x5d
 800077e:	5499      	strb	r1, [r3, r2]
 8000780:	4b50      	ldr	r3, [pc, #320]	@ (80008c4 <font_init+0x160>)
 8000782:	2233      	movs	r2, #51	@ 0x33
 8000784:	2175      	movs	r1, #117	@ 0x75
 8000786:	5499      	strb	r1, [r3, r2]
 8000788:	4b4e      	ldr	r3, [pc, #312]	@ (80008c4 <font_init+0x160>)
 800078a:	2234      	movs	r2, #52	@ 0x34
 800078c:	2163      	movs	r1, #99	@ 0x63
 800078e:	5499      	strb	r1, [r3, r2]
  font7seg['5'] = 0x76; font7seg['6'] = 0x7E; font7seg['7'] = 0x25; font7seg['8'] = 0x7F; font7seg['9'] = 0x77;
 8000790:	4b4c      	ldr	r3, [pc, #304]	@ (80008c4 <font_init+0x160>)
 8000792:	2235      	movs	r2, #53	@ 0x35
 8000794:	2176      	movs	r1, #118	@ 0x76
 8000796:	5499      	strb	r1, [r3, r2]
 8000798:	4b4a      	ldr	r3, [pc, #296]	@ (80008c4 <font_init+0x160>)
 800079a:	2236      	movs	r2, #54	@ 0x36
 800079c:	217e      	movs	r1, #126	@ 0x7e
 800079e:	5499      	strb	r1, [r3, r2]
 80007a0:	4b48      	ldr	r3, [pc, #288]	@ (80008c4 <font_init+0x160>)
 80007a2:	2237      	movs	r2, #55	@ 0x37
 80007a4:	2125      	movs	r1, #37	@ 0x25
 80007a6:	5499      	strb	r1, [r3, r2]
 80007a8:	4b46      	ldr	r3, [pc, #280]	@ (80008c4 <font_init+0x160>)
 80007aa:	2238      	movs	r2, #56	@ 0x38
 80007ac:	217f      	movs	r1, #127	@ 0x7f
 80007ae:	5499      	strb	r1, [r3, r2]
 80007b0:	4b44      	ldr	r3, [pc, #272]	@ (80008c4 <font_init+0x160>)
 80007b2:	2239      	movs	r2, #57	@ 0x39
 80007b4:	2177      	movs	r1, #119	@ 0x77
 80007b6:	5499      	strb	r1, [r3, r2]

  // رموز شائعة
  font7seg[' '] = 0x00; // فراغ
 80007b8:	4b42      	ldr	r3, [pc, #264]	@ (80008c4 <font_init+0x160>)
 80007ba:	2220      	movs	r2, #32
 80007bc:	2100      	movs	r1, #0
 80007be:	5499      	strb	r1, [r3, r2]
  font7seg['-'] = 0x40; // شرطة (g فقط)
 80007c0:	4b40      	ldr	r3, [pc, #256]	@ (80008c4 <font_init+0x160>)
 80007c2:	222d      	movs	r2, #45	@ 0x2d
 80007c4:	2140      	movs	r1, #64	@ 0x40
 80007c6:	5499      	strb	r1, [r3, r2]
  font7seg['_'] = 0x10; // underscore (d)
 80007c8:	4b3e      	ldr	r3, [pc, #248]	@ (80008c4 <font_init+0x160>)
 80007ca:	225f      	movs	r2, #95	@ 0x5f
 80007cc:	2110      	movs	r1, #16
 80007ce:	5499      	strb	r1, [r3, r2]

  // حروف تقريبية (يمكن تعديلها بـ setGlyph)
  font7seg['A'] = font7seg['a'] = 0x6F;
 80007d0:	4b3c      	ldr	r3, [pc, #240]	@ (80008c4 <font_init+0x160>)
 80007d2:	2261      	movs	r2, #97	@ 0x61
 80007d4:	216f      	movs	r1, #111	@ 0x6f
 80007d6:	5499      	strb	r1, [r3, r2]
 80007d8:	4b3a      	ldr	r3, [pc, #232]	@ (80008c4 <font_init+0x160>)
 80007da:	2261      	movs	r2, #97	@ 0x61
 80007dc:	5c99      	ldrb	r1, [r3, r2]
 80007de:	4b39      	ldr	r3, [pc, #228]	@ (80008c4 <font_init+0x160>)
 80007e0:	2241      	movs	r2, #65	@ 0x41
 80007e2:	5499      	strb	r1, [r3, r2]
  font7seg['b'] = 0x7A;
 80007e4:	4b37      	ldr	r3, [pc, #220]	@ (80008c4 <font_init+0x160>)
 80007e6:	2262      	movs	r2, #98	@ 0x62
 80007e8:	217a      	movs	r1, #122	@ 0x7a
 80007ea:	5499      	strb	r1, [r3, r2]
  font7seg['C'] = 0x5A;
 80007ec:	4b35      	ldr	r3, [pc, #212]	@ (80008c4 <font_init+0x160>)
 80007ee:	2243      	movs	r2, #67	@ 0x43
 80007f0:	215a      	movs	r1, #90	@ 0x5a
 80007f2:	5499      	strb	r1, [r3, r2]
  font7seg['c'] = 0x58;
 80007f4:	4b33      	ldr	r3, [pc, #204]	@ (80008c4 <font_init+0x160>)
 80007f6:	2263      	movs	r2, #99	@ 0x63
 80007f8:	2158      	movs	r1, #88	@ 0x58
 80007fa:	5499      	strb	r1, [r3, r2]
  font7seg['d'] = 0x79;
 80007fc:	4b31      	ldr	r3, [pc, #196]	@ (80008c4 <font_init+0x160>)
 80007fe:	2264      	movs	r2, #100	@ 0x64
 8000800:	2179      	movs	r1, #121	@ 0x79
 8000802:	5499      	strb	r1, [r3, r2]
  font7seg['E'] = 0x5E;
 8000804:	4b2f      	ldr	r3, [pc, #188]	@ (80008c4 <font_init+0x160>)
 8000806:	2245      	movs	r2, #69	@ 0x45
 8000808:	215e      	movs	r1, #94	@ 0x5e
 800080a:	5499      	strb	r1, [r3, r2]
  font7seg['F'] = 0x4E;
 800080c:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <font_init+0x160>)
 800080e:	2246      	movs	r2, #70	@ 0x46
 8000810:	214e      	movs	r1, #78	@ 0x4e
 8000812:	5499      	strb	r1, [r3, r2]
  font7seg['G'] = 0x7A;
 8000814:	4b2b      	ldr	r3, [pc, #172]	@ (80008c4 <font_init+0x160>)
 8000816:	2247      	movs	r2, #71	@ 0x47
 8000818:	217a      	movs	r1, #122	@ 0x7a
 800081a:	5499      	strb	r1, [r3, r2]
  font7seg['H'] = 0x6C;
 800081c:	4b29      	ldr	r3, [pc, #164]	@ (80008c4 <font_init+0x160>)
 800081e:	2248      	movs	r2, #72	@ 0x48
 8000820:	216c      	movs	r1, #108	@ 0x6c
 8000822:	5499      	strb	r1, [r3, r2]
  font7seg['I'] = 0x24;
 8000824:	4b27      	ldr	r3, [pc, #156]	@ (80008c4 <font_init+0x160>)
 8000826:	2249      	movs	r2, #73	@ 0x49
 8000828:	2124      	movs	r1, #36	@ 0x24
 800082a:	5499      	strb	r1, [r3, r2]
  font7seg['J'] = 0x31;
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <font_init+0x160>)
 800082e:	224a      	movs	r2, #74	@ 0x4a
 8000830:	2131      	movs	r1, #49	@ 0x31
 8000832:	5499      	strb	r1, [r3, r2]
  font7seg['K'] = 0x6C;
 8000834:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <font_init+0x160>)
 8000836:	224b      	movs	r2, #75	@ 0x4b
 8000838:	216c      	movs	r1, #108	@ 0x6c
 800083a:	5499      	strb	r1, [r3, r2]
  font7seg['L'] = 0x1A;
 800083c:	4b21      	ldr	r3, [pc, #132]	@ (80008c4 <font_init+0x160>)
 800083e:	224c      	movs	r2, #76	@ 0x4c
 8000840:	211a      	movs	r1, #26
 8000842:	5499      	strb	r1, [r3, r2]
  font7seg['M'] = 0x2D;
 8000844:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <font_init+0x160>)
 8000846:	224d      	movs	r2, #77	@ 0x4d
 8000848:	212d      	movs	r1, #45	@ 0x2d
 800084a:	5499      	strb	r1, [r3, r2]
  font7seg['N'] = 0x2C;
 800084c:	4b1d      	ldr	r3, [pc, #116]	@ (80008c4 <font_init+0x160>)
 800084e:	224e      	movs	r2, #78	@ 0x4e
 8000850:	212c      	movs	r1, #44	@ 0x2c
 8000852:	5499      	strb	r1, [r3, r2]
  font7seg['n'] = 0x68;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <font_init+0x160>)
 8000856:	226e      	movs	r2, #110	@ 0x6e
 8000858:	2168      	movs	r1, #104	@ 0x68
 800085a:	5499      	strb	r1, [r3, r2]
  font7seg['o'] = 0x78;
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <font_init+0x160>)
 800085e:	226f      	movs	r2, #111	@ 0x6f
 8000860:	2178      	movs	r1, #120	@ 0x78
 8000862:	5499      	strb	r1, [r3, r2]
  font7seg['P'] = 0x67;
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <font_init+0x160>)
 8000866:	2250      	movs	r2, #80	@ 0x50
 8000868:	2167      	movs	r1, #103	@ 0x67
 800086a:	5499      	strb	r1, [r3, r2]
  font7seg['Q'] = 0x73;
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <font_init+0x160>)
 800086e:	2251      	movs	r2, #81	@ 0x51
 8000870:	2173      	movs	r1, #115	@ 0x73
 8000872:	5499      	strb	r1, [r3, r2]
  font7seg['r'] = 0x48;
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <font_init+0x160>)
 8000876:	2272      	movs	r2, #114	@ 0x72
 8000878:	2148      	movs	r1, #72	@ 0x48
 800087a:	5499      	strb	r1, [r3, r2]
  font7seg['S'] = 0x76;
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <font_init+0x160>)
 800087e:	2253      	movs	r2, #83	@ 0x53
 8000880:	2176      	movs	r1, #118	@ 0x76
 8000882:	5499      	strb	r1, [r3, r2]
  font7seg['t'] = 0x5E & ~0x20;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <font_init+0x160>)
 8000886:	2274      	movs	r2, #116	@ 0x74
 8000888:	215e      	movs	r1, #94	@ 0x5e
 800088a:	5499      	strb	r1, [r3, r2]
  font7seg['U'] = 0x3A;
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <font_init+0x160>)
 800088e:	2255      	movs	r2, #85	@ 0x55
 8000890:	213a      	movs	r1, #58	@ 0x3a
 8000892:	5499      	strb	r1, [r3, r2]
  font7seg['V'] = 0x3A;
 8000894:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <font_init+0x160>)
 8000896:	2256      	movs	r2, #86	@ 0x56
 8000898:	213a      	movs	r1, #58	@ 0x3a
 800089a:	5499      	strb	r1, [r3, r2]
  font7seg['W'] = 0x3D;
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <font_init+0x160>)
 800089e:	2257      	movs	r2, #87	@ 0x57
 80008a0:	213d      	movs	r1, #61	@ 0x3d
 80008a2:	5499      	strb	r1, [r3, r2]
  font7seg['X'] = 0x6C;
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <font_init+0x160>)
 80008a6:	2258      	movs	r2, #88	@ 0x58
 80008a8:	216c      	movs	r1, #108	@ 0x6c
 80008aa:	5499      	strb	r1, [r3, r2]
  font7seg['Y'] = 0x73;
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <font_init+0x160>)
 80008ae:	2259      	movs	r2, #89	@ 0x59
 80008b0:	2173      	movs	r1, #115	@ 0x73
 80008b2:	5499      	strb	r1, [r3, r2]
  font7seg['Z'] = 0x5B;
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <font_init+0x160>)
 80008b6:	225a      	movs	r2, #90	@ 0x5a
 80008b8:	215b      	movs	r1, #91	@ 0x5b
 80008ba:	5499      	strb	r1, [r3, r2]
}
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	20000094 	.word	0x20000094

080008c8 <TA6932_DisplayOn>:
void TA6932_SetBrightness(uint8_t level){  // 0..7
  if(level > 7) level = 7;
  s_brightness = level;
  TA_cmd(0x88 | (s_brightness & 0x07));  // Display ON + brightness
}
void TA6932_DisplayOn(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  TA_cmd(0x88 | (s_brightness & 0x07));
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <TA6932_DisplayOn+0x28>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	2207      	movs	r2, #7
 80008d4:	4013      	ands	r3, r2
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	2278      	movs	r2, #120	@ 0x78
 80008da:	4252      	negs	r2, r2
 80008dc:	4313      	orrs	r3, r2
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	0018      	movs	r0, r3
 80008e4:	f7ff fee0 	bl	80006a8 <TA_cmd>
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	20000004 	.word	0x20000004

080008f4 <TA6932_putRaw>:
void TA6932_DisplayOff(void){
  TA_cmd(0x80); // OFF
}

// ===== Buffer helpers =====
void TA6932_putRaw(uint8_t addr, uint8_t v){ g_buf[addr & 0x0F] = v; }
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	0002      	movs	r2, r0
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	1dbb      	adds	r3, r7, #6
 8000902:	1c0a      	adds	r2, r1, #0
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	220f      	movs	r2, #15
 800090c:	4013      	ands	r3, r2
 800090e:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <TA6932_putRaw+0x2c>)
 8000910:	1db9      	adds	r1, r7, #6
 8000912:	7809      	ldrb	r1, [r1, #0]
 8000914:	54d1      	strb	r1, [r2, r3]
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b002      	add	sp, #8
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	20000114 	.word	0x20000114

08000924 <TA6932_loadBuffer>:
void TA6932_setGlyph(uint8_t ch, uint8_t pattern){
  font7seg[ch] = pattern & 0x7F; // bit7 للـ dp يُضاف خارجياً
}

// تعبئة البافر كامل (بدون memcpy حسب تفضيلك)
void TA6932_loadBuffer(const uint8_t *src){
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  for (int i=0;i<16;i++) g_buf[i] = src[i];
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e00b      	b.n	800094a <TA6932_loadBuffer+0x26>
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	18d3      	adds	r3, r2, r3
 8000938:	7819      	ldrb	r1, [r3, #0]
 800093a:	4a08      	ldr	r2, [pc, #32]	@ (800095c <TA6932_loadBuffer+0x38>)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	18d3      	adds	r3, r2, r3
 8000940:	1c0a      	adds	r2, r1, #0
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	ddf0      	ble.n	8000932 <TA6932_loadBuffer+0xe>
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b004      	add	sp, #16
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	20000114 	.word	0x20000114

08000960 <TA6932_Init>:
  g_buf[8]=b8;  g_buf[9]=b9;  g_buf[10]=b10; g_buf[11]=b11;
  g_buf[12]=b12; g_buf[13]=b13; g_buf[14]=b14; g_buf[15]=b15;
}

// ===== Public API =====
void TA6932_Init(void){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  TA_STB(1);                 // STB idle HIGH
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fe77 	bl	8000658 <TA_STB>
  font_init();               // تهيئة الفونت
 800096a:	f7ff fefb 	bl	8000764 <font_init>
  s_brightness = 7;
 800096e:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <TA6932_Init+0x20>)
 8000970:	2207      	movs	r2, #7
 8000972:	701a      	strb	r2, [r3, #0]
  TA6932_DisplayOn();        // تشغيل على سطوع 7
 8000974:	f7ff ffa8 	bl	80008c8 <TA6932_DisplayOn>
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	20000004 	.word	0x20000004

08000984 <TA6932_WriteAll>:
void TA6932_WriteAll(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  TA_writeSeq(0x00, g_buf, 16);
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <TA6932_WriteAll+0x18>)
 800098a:	2210      	movs	r2, #16
 800098c:	0019      	movs	r1, r3
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fe9f 	bl	80006d2 <TA_writeSeq>
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	20000114 	.word	0x20000114

080009a0 <TA6932_Clear>:
void TA6932_Clear(void){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  for (int i=0;i<16;i++) g_buf[i] = 0x00;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	e007      	b.n	80009bc <TA6932_Clear+0x1c>
 80009ac:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <TA6932_Clear+0x30>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3301      	adds	r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b0f      	cmp	r3, #15
 80009c0:	ddf4      	ble.n	80009ac <TA6932_Clear+0xc>
  TA6932_WriteAll();
 80009c2:	f7ff ffdf 	bl	8000984 <TA6932_WriteAll>
}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b002      	add	sp, #8
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	20000114 	.word	0x20000114

080009d4 <TA6932_WriteOneRaw>:

// ===== Fixed-address single write (واجهات قديمة) =====
void TA6932_WriteOneRaw(uint8_t addr, uint8_t value){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0002      	movs	r2, r0
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	1dbb      	adds	r3, r7, #6
 80009e2:	1c0a      	adds	r2, r1, #0
 80009e4:	701a      	strb	r2, [r3, #0]
  // 0x44: fixed-address write. ثم [0xC0|addr] + [data].
  TA_STB(0); uint8_t cmd = 0x44; HAL_SPI_Transmit(&hspi1, &cmd, 1, 10); TA_STB(1);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff fe36 	bl	8000658 <TA_STB>
 80009ec:	210f      	movs	r1, #15
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2244      	movs	r2, #68	@ 0x44
 80009f2:	701a      	strb	r2, [r3, #0]
 80009f4:	1879      	adds	r1, r7, r1
 80009f6:	481a      	ldr	r0, [pc, #104]	@ (8000a60 <TA6932_WriteOneRaw+0x8c>)
 80009f8:	230a      	movs	r3, #10
 80009fa:	2201      	movs	r2, #1
 80009fc:	f001 f894 	bl	8001b28 <HAL_SPI_Transmit>
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fe29 	bl	8000658 <TA_STB>
  TA_STB(0);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fe26 	bl	8000658 <TA_STB>
  uint8_t a = 0xC0 | (addr & 0x0F);
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	220f      	movs	r2, #15
 8000a14:	4013      	ands	r3, r2
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	2240      	movs	r2, #64	@ 0x40
 8000a1a:	4252      	negs	r2, r2
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	210e      	movs	r1, #14
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi1, &a, 1, 10);
 8000a28:	1879      	adds	r1, r7, r1
 8000a2a:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <TA6932_WriteOneRaw+0x8c>)
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f001 f87a 	bl	8001b28 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &value, 1, 10);
 8000a34:	1db9      	adds	r1, r7, #6
 8000a36:	480a      	ldr	r0, [pc, #40]	@ (8000a60 <TA6932_WriteOneRaw+0x8c>)
 8000a38:	230a      	movs	r3, #10
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f001 f874 	bl	8001b28 <HAL_SPI_Transmit>
  TA_STB(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fe09 	bl	8000658 <TA_STB>
  TA6932_putRaw(addr, value); // مزامنة البافر
 8000a46:	1dbb      	adds	r3, r7, #6
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff ff4f 	bl	80008f4 <TA6932_putRaw>
}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	20000030 	.word	0x20000030

08000a64 <TA_resolveValue>:
  if (dp) v |= 0x80;
  TA6932_WriteOneRaw(addr, v);
}

// ===== Unified One-API (الجديدة) =====
static uint8_t TA_resolveValue(int value, int dp){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint8_t v = 0x00;
 8000a6e:	210f      	movs	r1, #15
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
  if (value & 0x100){                // RAW via TA_RAW()
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	2380      	movs	r3, #128	@ 0x80
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d003      	beq.n	8000a88 <TA_resolveValue+0x24>
    v = (uint8_t)(value & 0xFF);
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e021      	b.n	8000acc <TA_resolveValue+0x68>
  } else if (value >= 0 && value <= 9){ // Digit
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <TA_resolveValue+0x42>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b09      	cmp	r3, #9
 8000a92:	dc08      	bgt.n	8000aa6 <TA_resolveValue+0x42>
    v = font7seg['0' + value];
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3330      	adds	r3, #48	@ 0x30
 8000a98:	001a      	movs	r2, r3
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	4914      	ldr	r1, [pc, #80]	@ (8000af0 <TA_resolveValue+0x8c>)
 8000aa0:	5c8a      	ldrb	r2, [r1, r2]
 8000aa2:	701a      	strb	r2, [r3, #0]
 8000aa4:	e012      	b.n	8000acc <TA_resolveValue+0x68>
  } else if (value >= 32 && value <= 126){ // Printable ASCII
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b1f      	cmp	r3, #31
 8000aaa:	dd0b      	ble.n	8000ac4 <TA_resolveValue+0x60>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b7e      	cmp	r3, #126	@ 0x7e
 8000ab0:	dc08      	bgt.n	8000ac4 <TA_resolveValue+0x60>
    v = font7seg[(uint8_t)value];
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	230f      	movs	r3, #15
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	4a0c      	ldr	r2, [pc, #48]	@ (8000af0 <TA_resolveValue+0x8c>)
 8000abe:	5c52      	ldrb	r2, [r2, r1]
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	e003      	b.n	8000acc <TA_resolveValue+0x68>
  } else {
    v = 0x00; // غير معروف → فراغ
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
  }
  if (dp) v |= 0x80;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d007      	beq.n	8000ae2 <TA_resolveValue+0x7e>
 8000ad2:	220f      	movs	r2, #15
 8000ad4:	18bb      	adds	r3, r7, r2
 8000ad6:	18ba      	adds	r2, r7, r2
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	4249      	negs	r1, r1
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
  return v;
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	781b      	ldrb	r3, [r3, #0]
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b004      	add	sp, #16
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000094 	.word	0x20000094

08000af4 <TA6932_putOne>:
void TA6932_putOne(uint8_t addr, int value, int dp){
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	250f      	movs	r5, #15
 8000b00:	197b      	adds	r3, r7, r5
 8000b02:	1c02      	adds	r2, r0, #0
 8000b04:	701a      	strb	r2, [r3, #0]
  uint8_t v = TA_resolveValue(value, dp);
 8000b06:	2617      	movs	r6, #23
 8000b08:	19bc      	adds	r4, r7, r6
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff ffa7 	bl	8000a64 <TA_resolveValue>
 8000b16:	0003      	movs	r3, r0
 8000b18:	7023      	strb	r3, [r4, #0]
  TA6932_WriteOneRaw(addr, v);
 8000b1a:	19bb      	adds	r3, r7, r6
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	197b      	adds	r3, r7, r5
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff ff55 	bl	80009d4 <TA6932_WriteOneRaw>
}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b007      	add	sp, #28
 8000b30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b32 <TA6932_putOneBuf>:
void TA6932_putOneBuf(uint8_t addr, int value, int dp){
 8000b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b34:	b087      	sub	sp, #28
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	250f      	movs	r5, #15
 8000b3e:	197b      	adds	r3, r7, r5
 8000b40:	1c02      	adds	r2, r0, #0
 8000b42:	701a      	strb	r2, [r3, #0]
  uint8_t v = TA_resolveValue(value, dp);
 8000b44:	2617      	movs	r6, #23
 8000b46:	19bc      	adds	r4, r7, r6
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff ff88 	bl	8000a64 <TA_resolveValue>
 8000b54:	0003      	movs	r3, r0
 8000b56:	7023      	strb	r3, [r4, #0]
  TA6932_putRaw(addr, v);
 8000b58:	19bb      	adds	r3, r7, r6
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	197b      	adds	r3, r7, r5
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff fec6 	bl	80008f4 <TA6932_putRaw>
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b007      	add	sp, #28
 8000b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b74:	f7ff fd64 	bl	8000640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b7a:	e003      	b.n	8000b84 <LoopCopyDataInit>

08000b7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b82:	3104      	adds	r1, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b84:	480a      	ldr	r0, [pc, #40]	@ (8000bb0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000b88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b8c:	d3f6      	bcc.n	8000b7c <CopyDataInit>
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <LoopForever+0x12>)
  b LoopFillZerobss
 8000b90:	e002      	b.n	8000b98 <LoopFillZerobss>

08000b92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b94:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b96:	3204      	adds	r2, #4

08000b98 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <LoopForever+0x16>)
  cmp r2, r3
 8000b9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b9c:	d3f9      	bcc.n	8000b92 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b9e:	f001 facb 	bl	8002138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba2:	f7ff fb3d 	bl	8000220 <main>

08000ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba6:	e7fe      	b.n	8000ba6 <LoopForever>
  ldr   r0, =_estack
 8000ba8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000bac:	080021ec 	.word	0x080021ec
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bb4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000bb8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000bbc:	20000128 	.word	0x20000128

08000bc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_IRQHandler>

08000bc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 f80e 	bl	8000bf0 <HAL_InitTick>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e001      	b.n	8000be4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be0:	f7ff fc8e 	bl	8000500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	781b      	ldrb	r3, [r3, #0]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <HAL_InitTick+0x88>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d02b      	beq.n	8000c60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <HAL_InitTick+0x8c>)
 8000c0a:	681c      	ldr	r4, [r3, #0]
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <HAL_InitTick+0x88>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	0019      	movs	r1, r3
 8000c12:	23fa      	movs	r3, #250	@ 0xfa
 8000c14:	0098      	lsls	r0, r3, #2
 8000c16:	f7ff fa77 	bl	8000108 <__udivsi3>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	0020      	movs	r0, r4
 8000c20:	f7ff fa72 	bl	8000108 <__udivsi3>
 8000c24:	0003      	movs	r3, r0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 f913 	bl	8000e52 <HAL_SYSTICK_Config>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d112      	bne.n	8000c56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d80a      	bhi.n	8000c4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 f8f2 	bl	8000e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_InitTick+0x90>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e00d      	b.n	8000c68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e008      	b.n	8000c68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c56:	230f      	movs	r3, #15
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e003      	b.n	8000c68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	781b      	ldrb	r3, [r3, #0]
}
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b005      	add	sp, #20
 8000c74:	bd90      	pop	{r4, r7, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	2000000c 	.word	0x2000000c
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000008 	.word	0x20000008

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	18d2      	adds	r2, r2, r3
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	2000000c 	.word	0x2000000c
 8000ca4:	20000124 	.word	0x20000124

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	@ (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	20000124 	.word	0x20000124

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff fff0 	bl	8000ca8 <HAL_GetTick>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	001a      	movs	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	189b      	adds	r3, r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	f7ff ffe0 	bl	8000ca8 <HAL_GetTick>
 8000ce8:	0002      	movs	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	2000000c 	.word	0x2000000c

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d18:	d828      	bhi.n	8000d6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd8 <__NVIC_SetPriority+0xd4>)
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b25b      	sxtb	r3, r3
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	33c0      	adds	r3, #192	@ 0xc0
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	589b      	ldr	r3, [r3, r2]
 8000d2a:	1dfa      	adds	r2, r7, #7
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	0011      	movs	r1, r2
 8000d30:	2203      	movs	r2, #3
 8000d32:	400a      	ands	r2, r1
 8000d34:	00d2      	lsls	r2, r2, #3
 8000d36:	21ff      	movs	r1, #255	@ 0xff
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	43d2      	mvns	r2, r2
 8000d3e:	401a      	ands	r2, r3
 8000d40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	019b      	lsls	r3, r3, #6
 8000d46:	22ff      	movs	r2, #255	@ 0xff
 8000d48:	401a      	ands	r2, r3
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2303      	movs	r3, #3
 8000d52:	4003      	ands	r3, r0
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d58:	481f      	ldr	r0, [pc, #124]	@ (8000dd8 <__NVIC_SetPriority+0xd4>)
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	430a      	orrs	r2, r1
 8000d64:	33c0      	adds	r3, #192	@ 0xc0
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d6a:	e031      	b.n	8000dd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <__NVIC_SetPriority+0xd8>)
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	0019      	movs	r1, r3
 8000d74:	230f      	movs	r3, #15
 8000d76:	400b      	ands	r3, r1
 8000d78:	3b08      	subs	r3, #8
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3306      	adds	r3, #6
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	18d3      	adds	r3, r2, r3
 8000d82:	3304      	adds	r3, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	1dfa      	adds	r2, r7, #7
 8000d88:	7812      	ldrb	r2, [r2, #0]
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	400a      	ands	r2, r1
 8000d90:	00d2      	lsls	r2, r2, #3
 8000d92:	21ff      	movs	r1, #255	@ 0xff
 8000d94:	4091      	lsls	r1, r2
 8000d96:	000a      	movs	r2, r1
 8000d98:	43d2      	mvns	r2, r2
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	019b      	lsls	r3, r3, #6
 8000da2:	22ff      	movs	r2, #255	@ 0xff
 8000da4:	401a      	ands	r2, r3
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	0018      	movs	r0, r3
 8000dac:	2303      	movs	r3, #3
 8000dae:	4003      	ands	r3, r0
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db4:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <__NVIC_SetPriority+0xd8>)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	001c      	movs	r4, r3
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	3b08      	subs	r3, #8
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	3306      	adds	r3, #6
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	18c3      	adds	r3, r0, r3
 8000dcc:	3304      	adds	r3, #4
 8000dce:	601a      	str	r2, [r3, #0]
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b003      	add	sp, #12
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	1e5a      	subs	r2, r3, #1
 8000dec:	2380      	movs	r3, #128	@ 0x80
 8000dee:	045b      	lsls	r3, r3, #17
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d301      	bcc.n	8000df8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df4:	2301      	movs	r3, #1
 8000df6:	e010      	b.n	8000e1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <SysTick_Config+0x44>)
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e00:	2301      	movs	r3, #1
 8000e02:	425b      	negs	r3, r3
 8000e04:	2103      	movs	r1, #3
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff ff7c 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <SysTick_Config+0x44>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <SysTick_Config+0x44>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	210f      	movs	r1, #15
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	1c02      	adds	r2, r0, #0
 8000e38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	0011      	movs	r1, r2
 8000e44:	0018      	movs	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff ffbf 	bl	8000de0 <SysTick_Config>
 8000e62:	0003      	movs	r3, r0
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e7a:	e14d      	b.n	8001118 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4091      	lsls	r1, r2
 8000e86:	000a      	movs	r2, r1
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d100      	bne.n	8000e94 <HAL_GPIO_Init+0x28>
 8000e92:	e13e      	b.n	8001112 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x38>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d125      	bne.n	8000ef0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	58d3      	ldr	r3, [r2, r3]
 8000eb0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	409a      	lsls	r2, r3
 8000ebe:	0013      	movs	r3, r2
 8000ec0:	43da      	mvns	r2, r3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	220f      	movs	r2, #15
 8000ece:	401a      	ands	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	400b      	ands	r3, r1
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	409a      	lsls	r2, r3
 8000eda:	0013      	movs	r3, r2
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	6979      	ldr	r1, [r7, #20]
 8000eee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	43da      	mvns	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	409a      	lsls	r2, r3
 8000f16:	0013      	movs	r3, r2
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d00b      	beq.n	8000f44 <HAL_GPIO_Init+0xd8>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f38:	2b11      	cmp	r3, #17
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b12      	cmp	r3, #18
 8000f42:	d130      	bne.n	8000fa6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	409a      	lsls	r2, r3
 8000f52:	0013      	movs	r3, r2
 8000f54:	43da      	mvns	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	43da      	mvns	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	4013      	ands	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	2201      	movs	r2, #1
 8000f92:	401a      	ands	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d017      	beq.n	8000fde <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	055b      	lsls	r3, r3, #21
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d100      	bne.n	8000fec <HAL_GPIO_Init+0x180>
 8000fea:	e092      	b.n	8001112 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000fec:	4a50      	ldr	r2, [pc, #320]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3318      	adds	r3, #24
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	589b      	ldr	r3, [r3, r2]
 8000ff8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	4013      	ands	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	220f      	movs	r2, #15
 8001004:	409a      	lsls	r2, r3
 8001006:	0013      	movs	r3, r2
 8001008:	43da      	mvns	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	4013      	ands	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	23a0      	movs	r3, #160	@ 0xa0
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	429a      	cmp	r2, r3
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x1d6>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a45      	ldr	r2, [pc, #276]	@ (8001134 <HAL_GPIO_Init+0x2c8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x1d2>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a44      	ldr	r2, [pc, #272]	@ (8001138 <HAL_GPIO_Init+0x2cc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x1ce>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a43      	ldr	r2, [pc, #268]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x1ca>
 8001032:	2305      	movs	r3, #5
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x1d8>
 8001036:	2306      	movs	r3, #6
 8001038:	e004      	b.n	8001044 <HAL_GPIO_Init+0x1d8>
 800103a:	2302      	movs	r3, #2
 800103c:	e002      	b.n	8001044 <HAL_GPIO_Init+0x1d8>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_GPIO_Init+0x1d8>
 8001042:	2300      	movs	r3, #0
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	2103      	movs	r1, #3
 8001048:	400a      	ands	r2, r1
 800104a:	00d2      	lsls	r2, r2, #3
 800104c:	4093      	lsls	r3, r2
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4313      	orrs	r3, r2
 8001052:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001054:	4936      	ldr	r1, [pc, #216]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3318      	adds	r3, #24
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001062:	4a33      	ldr	r2, [pc, #204]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	58d3      	ldr	r3, [r2, r3]
 8001068:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43da      	mvns	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	4013      	ands	r3, r2
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001088:	4929      	ldr	r1, [pc, #164]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 800108a:	2280      	movs	r2, #128	@ 0x80
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001090:	4a27      	ldr	r2, [pc, #156]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 8001092:	2384      	movs	r3, #132	@ 0x84
 8001094:	58d3      	ldr	r3, [r2, r3]
 8001096:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43da      	mvns	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	4013      	ands	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	2380      	movs	r3, #128	@ 0x80
 80010a8:	029b      	lsls	r3, r3, #10
 80010aa:	4013      	ands	r3, r2
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80010b6:	491e      	ldr	r1, [pc, #120]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 80010b8:	2284      	movs	r2, #132	@ 0x84
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43da      	mvns	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	4013      	ands	r3, r2
 80010cc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	035b      	lsls	r3, r3, #13
 80010d6:	4013      	ands	r3, r2
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43da      	mvns	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	039b      	lsls	r3, r3, #14
 8001100:	4013      	ands	r3, r2
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	3301      	adds	r3, #1
 8001116:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	40da      	lsrs	r2, r3
 8001120:	1e13      	subs	r3, r2, #0
 8001122:	d000      	beq.n	8001126 <HAL_GPIO_Init+0x2ba>
 8001124:	e6aa      	b.n	8000e7c <HAL_GPIO_Init+0x10>
  }
}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b006      	add	sp, #24
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021800 	.word	0x40021800
 8001134:	50000400 	.word	0x50000400
 8001138:	50000800 	.word	0x50000800
 800113c:	50001400 	.word	0x50001400

08001140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	0008      	movs	r0, r1
 800114a:	0011      	movs	r1, r2
 800114c:	1cbb      	adds	r3, r7, #2
 800114e:	1c02      	adds	r2, r0, #0
 8001150:	801a      	strh	r2, [r3, #0]
 8001152:	1c7b      	adds	r3, r7, #1
 8001154:	1c0a      	adds	r2, r1, #0
 8001156:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001158:	1c7b      	adds	r3, r7, #1
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001160:	1cbb      	adds	r3, r7, #2
 8001162:	881a      	ldrh	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116a:	1cbb      	adds	r3, r7, #2
 800116c:	881a      	ldrh	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e1d0      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2201      	movs	r2, #1
 8001194:	4013      	ands	r3, r2
 8001196:	d100      	bne.n	800119a <HAL_RCC_OscConfig+0x1e>
 8001198:	e069      	b.n	800126e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800119a:	4bc8      	ldr	r3, [pc, #800]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2238      	movs	r2, #56	@ 0x38
 80011a0:	4013      	ands	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d105      	bne.n	80011b6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d15d      	bne.n	800126e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e1bc      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	429a      	cmp	r2, r3
 80011c0:	d107      	bne.n	80011d2 <HAL_RCC_OscConfig+0x56>
 80011c2:	4bbe      	ldr	r3, [pc, #760]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4bbd      	ldr	r3, [pc, #756]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80011c8:	2180      	movs	r1, #128	@ 0x80
 80011ca:	0249      	lsls	r1, r1, #9
 80011cc:	430a      	orrs	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e020      	b.n	8001214 <HAL_RCC_OscConfig+0x98>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	23a0      	movs	r3, #160	@ 0xa0
 80011d8:	02db      	lsls	r3, r3, #11
 80011da:	429a      	cmp	r2, r3
 80011dc:	d10e      	bne.n	80011fc <HAL_RCC_OscConfig+0x80>
 80011de:	4bb7      	ldr	r3, [pc, #732]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4bb6      	ldr	r3, [pc, #728]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80011e4:	2180      	movs	r1, #128	@ 0x80
 80011e6:	02c9      	lsls	r1, r1, #11
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	4bb3      	ldr	r3, [pc, #716]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4bb2      	ldr	r3, [pc, #712]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80011f2:	2180      	movs	r1, #128	@ 0x80
 80011f4:	0249      	lsls	r1, r1, #9
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e00b      	b.n	8001214 <HAL_RCC_OscConfig+0x98>
 80011fc:	4baf      	ldr	r3, [pc, #700]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4bae      	ldr	r3, [pc, #696]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001202:	49af      	ldr	r1, [pc, #700]	@ (80014c0 <HAL_RCC_OscConfig+0x344>)
 8001204:	400a      	ands	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	4bac      	ldr	r3, [pc, #688]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4bab      	ldr	r3, [pc, #684]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800120e:	49ad      	ldr	r1, [pc, #692]	@ (80014c4 <HAL_RCC_OscConfig+0x348>)
 8001210:	400a      	ands	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d014      	beq.n	8001246 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fd44 	bl	8000ca8 <HAL_GetTick>
 8001220:	0003      	movs	r3, r0
 8001222:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001226:	f7ff fd3f 	bl	8000ca8 <HAL_GetTick>
 800122a:	0002      	movs	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b64      	cmp	r3, #100	@ 0x64
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e17b      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001238:	4ba0      	ldr	r3, [pc, #640]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	029b      	lsls	r3, r3, #10
 8001240:	4013      	ands	r3, r2
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0xaa>
 8001244:	e013      	b.n	800126e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001246:	f7ff fd2f 	bl	8000ca8 <HAL_GetTick>
 800124a:	0003      	movs	r3, r0
 800124c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001250:	f7ff fd2a 	bl	8000ca8 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	@ 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e166      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001262:	4b96      	ldr	r3, [pc, #600]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	029b      	lsls	r3, r3, #10
 800126a:	4013      	ands	r3, r2
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2202      	movs	r2, #2
 8001274:	4013      	ands	r3, r2
 8001276:	d100      	bne.n	800127a <HAL_RCC_OscConfig+0xfe>
 8001278:	e086      	b.n	8001388 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800127a:	4b90      	ldr	r3, [pc, #576]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2238      	movs	r2, #56	@ 0x38
 8001280:	4013      	ands	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d12f      	bne.n	80012ea <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e14c      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b89      	ldr	r3, [pc, #548]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a8b      	ldr	r2, [pc, #556]	@ (80014c8 <HAL_RCC_OscConfig+0x34c>)
 800129c:	4013      	ands	r3, r2
 800129e:	0019      	movs	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	021a      	lsls	r2, r3, #8
 80012a6:	4b85      	ldr	r3, [pc, #532]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80012a8:	430a      	orrs	r2, r1
 80012aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d112      	bne.n	80012d8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012b2:	4b82      	ldr	r3, [pc, #520]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a85      	ldr	r2, [pc, #532]	@ (80014cc <HAL_RCC_OscConfig+0x350>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	0019      	movs	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	4b7e      	ldr	r3, [pc, #504]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012c6:	4b7d      	ldr	r3, [pc, #500]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	0adb      	lsrs	r3, r3, #11
 80012cc:	2207      	movs	r2, #7
 80012ce:	4013      	ands	r3, r2
 80012d0:	4a7f      	ldr	r2, [pc, #508]	@ (80014d0 <HAL_RCC_OscConfig+0x354>)
 80012d2:	40da      	lsrs	r2, r3
 80012d4:	4b7f      	ldr	r3, [pc, #508]	@ (80014d4 <HAL_RCC_OscConfig+0x358>)
 80012d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012d8:	4b7f      	ldr	r3, [pc, #508]	@ (80014d8 <HAL_RCC_OscConfig+0x35c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff fc87 	bl	8000bf0 <HAL_InitTick>
 80012e2:	1e03      	subs	r3, r0, #0
 80012e4:	d050      	beq.n	8001388 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e122      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d030      	beq.n	8001354 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012f2:	4b72      	ldr	r3, [pc, #456]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a75      	ldr	r2, [pc, #468]	@ (80014cc <HAL_RCC_OscConfig+0x350>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	0019      	movs	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	4b6e      	ldr	r3, [pc, #440]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001306:	4b6d      	ldr	r3, [pc, #436]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b6c      	ldr	r3, [pc, #432]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800130c:	2180      	movs	r1, #128	@ 0x80
 800130e:	0049      	lsls	r1, r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fcc8 	bl	8000ca8 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800131e:	f7ff fcc3 	bl	8000ca8 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0ff      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001330:	4b62      	ldr	r3, [pc, #392]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4013      	ands	r3, r2
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b5f      	ldr	r3, [pc, #380]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a61      	ldr	r2, [pc, #388]	@ (80014c8 <HAL_RCC_OscConfig+0x34c>)
 8001342:	4013      	ands	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	021a      	lsls	r2, r3, #8
 800134c:	4b5b      	ldr	r3, [pc, #364]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800134e:	430a      	orrs	r2, r1
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	e019      	b.n	8001388 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001354:	4b59      	ldr	r3, [pc, #356]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b58      	ldr	r3, [pc, #352]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800135a:	4960      	ldr	r1, [pc, #384]	@ (80014dc <HAL_RCC_OscConfig+0x360>)
 800135c:	400a      	ands	r2, r1
 800135e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff fca2 	bl	8000ca8 <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800136a:	f7ff fc9d 	bl	8000ca8 <HAL_GetTick>
 800136e:	0002      	movs	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e0d9      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800137c:	4b4f      	ldr	r3, [pc, #316]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4013      	ands	r3, r2
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2208      	movs	r2, #8
 800138e:	4013      	ands	r3, r2
 8001390:	d042      	beq.n	8001418 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001392:	4b4a      	ldr	r3, [pc, #296]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2238      	movs	r2, #56	@ 0x38
 8001398:	4013      	ands	r3, r2
 800139a:	2b18      	cmp	r3, #24
 800139c:	d105      	bne.n	80013aa <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d138      	bne.n	8001418 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e0c2      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d019      	beq.n	80013e6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013b2:	4b42      	ldr	r3, [pc, #264]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80013b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013b6:	4b41      	ldr	r3, [pc, #260]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80013b8:	2101      	movs	r1, #1
 80013ba:	430a      	orrs	r2, r1
 80013bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fc73 	bl	8000ca8 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc6e 	bl	8000ca8 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e0aa      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80013da:	4b38      	ldr	r3, [pc, #224]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	d0f1      	beq.n	80013c8 <HAL_RCC_OscConfig+0x24c>
 80013e4:	e018      	b.n	8001418 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013e6:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80013e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ea:	4b34      	ldr	r3, [pc, #208]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	438a      	bics	r2, r1
 80013f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff fc59 	bl	8000ca8 <HAL_GetTick>
 80013f6:	0003      	movs	r3, r0
 80013f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc54 	bl	8000ca8 <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e090      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800140e:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d1f1      	bne.n	80013fc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2204      	movs	r2, #4
 800141e:	4013      	ands	r3, r2
 8001420:	d100      	bne.n	8001424 <HAL_RCC_OscConfig+0x2a8>
 8001422:	e084      	b.n	800152e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001424:	230f      	movs	r3, #15
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800142c:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2238      	movs	r2, #56	@ 0x38
 8001432:	4013      	ands	r3, r2
 8001434:	2b20      	cmp	r3, #32
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d000      	beq.n	8001442 <HAL_RCC_OscConfig+0x2c6>
 8001440:	e075      	b.n	800152e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e074      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d106      	bne.n	800145c <HAL_RCC_OscConfig+0x2e0>
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001450:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001454:	2101      	movs	r1, #1
 8001456:	430a      	orrs	r2, r1
 8001458:	65da      	str	r2, [r3, #92]	@ 0x5c
 800145a:	e01c      	b.n	8001496 <HAL_RCC_OscConfig+0x31a>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d10c      	bne.n	800147e <HAL_RCC_OscConfig+0x302>
 8001464:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001466:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800146a:	2104      	movs	r1, #4
 800146c:	430a      	orrs	r2, r1
 800146e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001472:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001476:	2101      	movs	r1, #1
 8001478:	430a      	orrs	r2, r1
 800147a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800147c:	e00b      	b.n	8001496 <HAL_RCC_OscConfig+0x31a>
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001480:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001484:	2101      	movs	r1, #1
 8001486:	438a      	bics	r2, r1
 8001488:	65da      	str	r2, [r3, #92]	@ 0x5c
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800148c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 8001490:	2104      	movs	r1, #4
 8001492:	438a      	bics	r2, r1
 8001494:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d028      	beq.n	80014f0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff fc03 	bl	8000ca8 <HAL_GetTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff fbfe 	bl	8000ca8 <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <HAL_RCC_OscConfig+0x364>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d915      	bls.n	80014e4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e039      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
 80014bc:	40021000 	.word	0x40021000
 80014c0:	fffeffff 	.word	0xfffeffff
 80014c4:	fffbffff 	.word	0xfffbffff
 80014c8:	ffff80ff 	.word	0xffff80ff
 80014cc:	ffffc7ff 	.word	0xffffc7ff
 80014d0:	02dc6c00 	.word	0x02dc6c00
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000008 	.word	0x20000008
 80014dc:	fffffeff 	.word	0xfffffeff
 80014e0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014e4:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <HAL_RCC_OscConfig+0x3bc>)
 80014e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d0dc      	beq.n	80014a8 <HAL_RCC_OscConfig+0x32c>
 80014ee:	e013      	b.n	8001518 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fbda 	bl	8000ca8 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80014f8:	e009      	b.n	800150e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff fbd5 	bl	8000ca8 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <HAL_RCC_OscConfig+0x3c0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e010      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_RCC_OscConfig+0x3bc>)
 8001510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001512:	2202      	movs	r2, #2
 8001514:	4013      	ands	r3, r2
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001518:	230f      	movs	r3, #15
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d105      	bne.n	800152e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_RCC_OscConfig+0x3bc>)
 8001524:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001526:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <HAL_RCC_OscConfig+0x3bc>)
 8001528:	4905      	ldr	r1, [pc, #20]	@ (8001540 <HAL_RCC_OscConfig+0x3c4>)
 800152a:	400a      	ands	r2, r1
 800152c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b006      	add	sp, #24
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	00001388 	.word	0x00001388
 8001540:	efffffff 	.word	0xefffffff

08001544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0e9      	b.n	800172c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001558:	4b76      	ldr	r3, [pc, #472]	@ (8001734 <HAL_RCC_ClockConfig+0x1f0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2207      	movs	r2, #7
 800155e:	4013      	ands	r3, r2
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d91e      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b73      	ldr	r3, [pc, #460]	@ (8001734 <HAL_RCC_ClockConfig+0x1f0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2207      	movs	r2, #7
 800156c:	4393      	bics	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	4b70      	ldr	r3, [pc, #448]	@ (8001734 <HAL_RCC_ClockConfig+0x1f0>)
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001578:	f7ff fb96 	bl	8000ca8 <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001580:	e009      	b.n	8001596 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001582:	f7ff fb91 	bl	8000ca8 <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	4a6a      	ldr	r2, [pc, #424]	@ (8001738 <HAL_RCC_ClockConfig+0x1f4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0ca      	b.n	800172c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001596:	4b67      	ldr	r3, [pc, #412]	@ (8001734 <HAL_RCC_ClockConfig+0x1f0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2207      	movs	r2, #7
 800159c:	4013      	ands	r3, r2
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d1ee      	bne.n	8001582 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d017      	beq.n	80015de <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2204      	movs	r2, #4
 80015b4:	4013      	ands	r3, r2
 80015b6:	d008      	beq.n	80015ca <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015b8:	4b60      	ldr	r3, [pc, #384]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a60      	ldr	r2, [pc, #384]	@ (8001740 <HAL_RCC_ClockConfig+0x1fc>)
 80015be:	401a      	ands	r2, r3
 80015c0:	4b5e      	ldr	r3, [pc, #376]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 80015c2:	21b0      	movs	r1, #176	@ 0xb0
 80015c4:	0109      	lsls	r1, r1, #4
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ca:	4b5c      	ldr	r3, [pc, #368]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	4a5d      	ldr	r2, [pc, #372]	@ (8001744 <HAL_RCC_ClockConfig+0x200>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	0019      	movs	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	4b58      	ldr	r3, [pc, #352]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 80015da:	430a      	orrs	r2, r1
 80015dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	d055      	beq.n	8001694 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80015e8:	4b54      	ldr	r3, [pc, #336]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	221c      	movs	r2, #28
 80015ee:	4393      	bics	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	4b51      	ldr	r3, [pc, #324]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d107      	bne.n	8001614 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001604:	4b4d      	ldr	r3, [pc, #308]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	4013      	ands	r3, r2
 800160e:	d11f      	bne.n	8001650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e08b      	b.n	800172c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d107      	bne.n	800162c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800161c:	4b47      	ldr	r3, [pc, #284]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4013      	ands	r3, r2
 8001626:	d113      	bne.n	8001650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e07f      	b.n	800172c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d106      	bne.n	8001642 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001634:	4b41      	ldr	r3, [pc, #260]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 8001636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001638:	2202      	movs	r2, #2
 800163a:	4013      	ands	r3, r2
 800163c:	d108      	bne.n	8001650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e074      	b.n	800172c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001642:	4b3e      	ldr	r3, [pc, #248]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 8001644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e06d      	b.n	800172c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001650:	4b3a      	ldr	r3, [pc, #232]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2207      	movs	r2, #7
 8001656:	4393      	bics	r3, r2
 8001658:	0019      	movs	r1, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4b37      	ldr	r3, [pc, #220]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 8001660:	430a      	orrs	r2, r1
 8001662:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001664:	f7ff fb20 	bl	8000ca8 <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166c:	e009      	b.n	8001682 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800166e:	f7ff fb1b 	bl	8000ca8 <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4a2f      	ldr	r2, [pc, #188]	@ (8001738 <HAL_RCC_ClockConfig+0x1f4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e054      	b.n	800172c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2238      	movs	r2, #56	@ 0x38
 8001688:	401a      	ands	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	429a      	cmp	r2, r3
 8001692:	d1ec      	bne.n	800166e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <HAL_RCC_ClockConfig+0x1f0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2207      	movs	r2, #7
 800169a:	4013      	ands	r3, r2
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d21e      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <HAL_RCC_ClockConfig+0x1f0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2207      	movs	r2, #7
 80016a8:	4393      	bics	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <HAL_RCC_ClockConfig+0x1f0>)
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016b4:	f7ff faf8 	bl	8000ca8 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016bc:	e009      	b.n	80016d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016be:	f7ff faf3 	bl	8000ca8 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <HAL_RCC_ClockConfig+0x1f4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e02c      	b.n	800172c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <HAL_RCC_ClockConfig+0x1f0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2207      	movs	r2, #7
 80016d8:	4013      	ands	r3, r2
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d1ee      	bne.n	80016be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2204      	movs	r2, #4
 80016e6:	4013      	ands	r3, r2
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4a16      	ldr	r2, [pc, #88]	@ (8001748 <HAL_RCC_ClockConfig+0x204>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	0019      	movs	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	4b10      	ldr	r3, [pc, #64]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016fe:	f000 f82b 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001702:	0001      	movs	r1, r0
 8001704:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <HAL_RCC_ClockConfig+0x1f8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	220f      	movs	r2, #15
 800170c:	401a      	ands	r2, r3
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_RCC_ClockConfig+0x208>)
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	58d3      	ldr	r3, [r2, r3]
 8001714:	221f      	movs	r2, #31
 8001716:	4013      	ands	r3, r2
 8001718:	000a      	movs	r2, r1
 800171a:	40da      	lsrs	r2, r3
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_RCC_ClockConfig+0x20c>)
 800171e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_RCC_ClockConfig+0x210>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff fa63 	bl	8000bf0 <HAL_InitTick>
 800172a:	0003      	movs	r3, r0
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b004      	add	sp, #16
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40022000 	.word	0x40022000
 8001738:	00001388 	.word	0x00001388
 800173c:	40021000 	.word	0x40021000
 8001740:	ffff84ff 	.word	0xffff84ff
 8001744:	fffff0ff 	.word	0xfffff0ff
 8001748:	ffff8fff 	.word	0xffff8fff
 800174c:	080021a4 	.word	0x080021a4
 8001750:	20000000 	.word	0x20000000
 8001754:	20000008 	.word	0x20000008

08001758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2238      	movs	r2, #56	@ 0x38
 8001764:	4013      	ands	r3, r2
 8001766:	d10f      	bne.n	8001788 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x78>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0adb      	lsrs	r3, r3, #11
 800176e:	2207      	movs	r2, #7
 8001770:	4013      	ands	r3, r2
 8001772:	2201      	movs	r2, #1
 8001774:	409a      	lsls	r2, r3
 8001776:	0013      	movs	r3, r2
 8001778:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	4815      	ldr	r0, [pc, #84]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800177e:	f7fe fcc3 	bl	8000108 <__udivsi3>
 8001782:	0003      	movs	r3, r0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e01e      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x78>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2238      	movs	r2, #56	@ 0x38
 800178e:	4013      	ands	r3, r2
 8001790:	2b08      	cmp	r3, #8
 8001792:	d102      	bne.n	800179a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001794:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	e015      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800179a:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x78>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2238      	movs	r2, #56	@ 0x38
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	d103      	bne.n	80017ae <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017a6:	2380      	movs	r3, #128	@ 0x80
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	e00b      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x78>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2238      	movs	r2, #56	@ 0x38
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b18      	cmp	r3, #24
 80017b8:	d103      	bne.n	80017c2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017ba:	23fa      	movs	r3, #250	@ 0xfa
 80017bc:	01db      	lsls	r3, r3, #7
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	e001      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80017c6:	687b      	ldr	r3, [r7, #4]
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	02dc6c00 	.word	0x02dc6c00
 80017d8:	007a1200 	.word	0x007a1200

080017dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80017e4:	2313      	movs	r3, #19
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80017ec:	2312      	movs	r3, #18
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	029b      	lsls	r3, r3, #10
 80017fc:	4013      	ands	r3, r2
 80017fe:	d100      	bne.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001800:	e079      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2011      	movs	r0, #17
 8001804:	183b      	adds	r3, r7, r0
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180a:	4b64      	ldr	r3, [pc, #400]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800180c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800180e:	2380      	movs	r3, #128	@ 0x80
 8001810:	055b      	lsls	r3, r3, #21
 8001812:	4013      	ands	r3, r2
 8001814:	d110      	bne.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b61      	ldr	r3, [pc, #388]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001818:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800181a:	4b60      	ldr	r3, [pc, #384]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800181c:	2180      	movs	r1, #128	@ 0x80
 800181e:	0549      	lsls	r1, r1, #21
 8001820:	430a      	orrs	r2, r1
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001824:	4b5d      	ldr	r3, [pc, #372]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001828:	2380      	movs	r3, #128	@ 0x80
 800182a:	055b      	lsls	r3, r3, #21
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001832:	183b      	adds	r3, r7, r0
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001838:	4b58      	ldr	r3, [pc, #352]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800183a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800183c:	23c0      	movs	r3, #192	@ 0xc0
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4013      	ands	r3, r2
 8001842:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d019      	beq.n	800187e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	429a      	cmp	r2, r3
 8001852:	d014      	beq.n	800187e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001854:	4b51      	ldr	r3, [pc, #324]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001858:	4a51      	ldr	r2, [pc, #324]	@ (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800185a:	4013      	ands	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800185e:	4b4f      	ldr	r3, [pc, #316]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001860:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001862:	4b4e      	ldr	r3, [pc, #312]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001864:	2180      	movs	r1, #128	@ 0x80
 8001866:	0249      	lsls	r1, r1, #9
 8001868:	430a      	orrs	r2, r1
 800186a:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800186c:	4b4b      	ldr	r3, [pc, #300]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800186e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001870:	4b4a      	ldr	r3, [pc, #296]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001872:	494c      	ldr	r1, [pc, #304]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001874:	400a      	ands	r2, r1
 8001876:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001878:	4b48      	ldr	r3, [pc, #288]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2201      	movs	r2, #1
 8001882:	4013      	ands	r3, r2
 8001884:	d016      	beq.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff fa0f 	bl	8000ca8 <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800188e:	e00c      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f7ff fa0a 	bl	8000ca8 <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	4a43      	ldr	r2, [pc, #268]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d904      	bls.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80018a0:	2313      	movs	r3, #19
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2203      	movs	r2, #3
 80018a6:	701a      	strb	r2, [r3, #0]
          break;
 80018a8:	e004      	b.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018aa:	4b3c      	ldr	r3, [pc, #240]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d0ed      	beq.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80018b4:	2313      	movs	r3, #19
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10a      	bne.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018be:	4b37      	ldr	r3, [pc, #220]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c2:	4a37      	ldr	r2, [pc, #220]	@ (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	0019      	movs	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699a      	ldr	r2, [r3, #24]
 80018cc:	4b33      	ldr	r3, [pc, #204]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018ce:	430a      	orrs	r2, r1
 80018d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018d2:	e005      	b.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018d4:	2312      	movs	r3, #18
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	2213      	movs	r2, #19
 80018da:	18ba      	adds	r2, r7, r2
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018e0:	2311      	movs	r3, #17
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d105      	bne.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ea:	4b2c      	ldr	r3, [pc, #176]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018ee:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018f0:	492e      	ldr	r1, [pc, #184]	@ (80019ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018f2:	400a      	ands	r2, r1
 80018f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4013      	ands	r3, r2
 80018fe:	d009      	beq.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001900:	4b26      	ldr	r3, [pc, #152]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001904:	2203      	movs	r2, #3
 8001906:	4393      	bics	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	4b23      	ldr	r3, [pc, #140]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001910:	430a      	orrs	r2, r1
 8001912:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2240      	movs	r2, #64	@ 0x40
 800191a:	4013      	ands	r3, r2
 800191c:	d009      	beq.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800191e:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001922:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001924:	4013      	ands	r3, r2
 8001926:	0019      	movs	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800192e:	430a      	orrs	r2, r1
 8001930:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	01db      	lsls	r3, r3, #7
 800193a:	4013      	ands	r3, r2
 800193c:	d008      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800193e:	4b17      	ldr	r3, [pc, #92]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	0899      	lsrs	r1, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800194c:	430a      	orrs	r2, r1
 800194e:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	@ 0x80
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4013      	ands	r3, r2
 800195a:	d009      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800195e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001960:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001962:	4013      	ands	r3, r2
 8001964:	0019      	movs	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691a      	ldr	r2, [r3, #16]
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800196c:	430a      	orrs	r2, r1
 800196e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	da09      	bge.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	22e0      	movs	r2, #224	@ 0xe0
 800197e:	4393      	bics	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800198c:	2312      	movs	r3, #18
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	781b      	ldrb	r3, [r3, #0]
}
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b006      	add	sp, #24
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	40021000 	.word	0x40021000
 80019a0:	fffffcff 	.word	0xfffffcff
 80019a4:	fffeffff 	.word	0xfffeffff
 80019a8:	00001388 	.word	0x00001388
 80019ac:	efffffff 	.word	0xefffffff
 80019b0:	ffffcfff 	.word	0xffffcfff
 80019b4:	ffff3fff 	.word	0xffff3fff

080019b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0a8      	b.n	8001b1c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	2382      	movs	r3, #130	@ 0x82
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	429a      	cmp	r2, r3
 80019dc:	d009      	beq.n	80019f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
 80019e4:	e005      	b.n	80019f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	225d      	movs	r2, #93	@ 0x5d
 80019fc:	5c9b      	ldrb	r3, [r3, r2]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	225c      	movs	r2, #92	@ 0x5c
 8001a08:	2100      	movs	r1, #0
 8001a0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7fe fd9a 	bl	8000548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	225d      	movs	r2, #93	@ 0x5d
 8001a18:	2102      	movs	r1, #2
 8001a1a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2140      	movs	r1, #64	@ 0x40
 8001a28:	438a      	bics	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	23e0      	movs	r3, #224	@ 0xe0
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d902      	bls.n	8001a3e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e002      	b.n	8001a44 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	015b      	lsls	r3, r3, #5
 8001a42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	23f0      	movs	r3, #240	@ 0xf0
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d008      	beq.n	8001a62 <HAL_SPI_Init+0xaa>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	23e0      	movs	r3, #224	@ 0xe0
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d002      	beq.n	8001a62 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	2382      	movs	r3, #130	@ 0x82
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6899      	ldr	r1, [r3, #8]
 8001a70:	2384      	movs	r3, #132	@ 0x84
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	400b      	ands	r3, r1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	400b      	ands	r3, r1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2101      	movs	r1, #1
 8001a88:	400b      	ands	r3, r1
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6999      	ldr	r1, [r3, #24]
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	400b      	ands	r3, r1
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2138      	movs	r1, #56	@ 0x38
 8001a9e:	400b      	ands	r3, r1
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2180      	movs	r1, #128	@ 0x80
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	0011      	movs	r1, r2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	019b      	lsls	r3, r3, #6
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	401a      	ands	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ace:	2110      	movs	r1, #16
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad8:	2108      	movs	r1, #8
 8001ada:	400b      	ands	r3, r1
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68d9      	ldr	r1, [r3, #12]
 8001ae2:	23f0      	movs	r3, #240	@ 0xf0
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	400b      	ands	r3, r1
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	0011      	movs	r1, r2
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	015b      	lsls	r3, r3, #5
 8001af2:	401a      	ands	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4907      	ldr	r1, [pc, #28]	@ (8001b24 <HAL_SPI_Init+0x16c>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	225d      	movs	r2, #93	@ 0x5d
 8001b16:	2101      	movs	r1, #1
 8001b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b004      	add	sp, #16
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	fffff7ff 	.word	0xfffff7ff

08001b28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	1dbb      	adds	r3, r7, #6
 8001b36:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b38:	231f      	movs	r3, #31
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	225c      	movs	r2, #92	@ 0x5c
 8001b44:	5c9b      	ldrb	r3, [r3, r2]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_SPI_Transmit+0x26>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e171      	b.n	8001e32 <HAL_SPI_Transmit+0x30a>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	225c      	movs	r2, #92	@ 0x5c
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b56:	f7ff f8a7 	bl	8000ca8 <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001b5e:	2316      	movs	r3, #22
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	1dba      	adds	r2, r7, #6
 8001b64:	8812      	ldrh	r2, [r2, #0]
 8001b66:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	225d      	movs	r2, #93	@ 0x5d
 8001b6c:	5c9b      	ldrb	r3, [r3, r2]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d004      	beq.n	8001b7e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001b74:	231f      	movs	r3, #31
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2202      	movs	r2, #2
 8001b7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001b7c:	e14e      	b.n	8001e1c <HAL_SPI_Transmit+0x2f4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_SPI_Transmit+0x64>
 8001b84:	1dbb      	adds	r3, r7, #6
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d104      	bne.n	8001b96 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001b8c:	231f      	movs	r3, #31
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
    goto error;
 8001b94:	e142      	b.n	8001e1c <HAL_SPI_Transmit+0x2f4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	225d      	movs	r2, #93	@ 0x5d
 8001b9a:	2103      	movs	r1, #3
 8001b9c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1dba      	adds	r2, r7, #6
 8001bae:	8812      	ldrh	r2, [r2, #0]
 8001bb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1dba      	adds	r2, r7, #6
 8001bb6:	8812      	ldrh	r2, [r2, #0]
 8001bb8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2244      	movs	r2, #68	@ 0x44
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2246      	movs	r2, #70	@ 0x46
 8001bcc:	2100      	movs	r1, #0
 8001bce:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d110      	bne.n	8001c0a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2140      	movs	r1, #64	@ 0x40
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2180      	movs	r1, #128	@ 0x80
 8001c04:	01c9      	lsls	r1, r1, #7
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2240      	movs	r2, #64	@ 0x40
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b40      	cmp	r3, #64	@ 0x40
 8001c16:	d007      	beq.n	8001c28 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2140      	movs	r1, #64	@ 0x40
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	23e0      	movs	r3, #224	@ 0xe0
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d94e      	bls.n	8001cd2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_SPI_Transmit+0x11e>
 8001c3c:	2316      	movs	r3, #22
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d13f      	bne.n	8001cc6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4a:	881a      	ldrh	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c56:	1c9a      	adds	r2, r3, #2
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c6a:	e02c      	b.n	8001cc6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d112      	bne.n	8001ca0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7e:	881a      	ldrh	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8a:	1c9a      	adds	r2, r3, #2
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c9e:	e012      	b.n	8001cc6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ca0:	f7ff f802 	bl	8000ca8 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d802      	bhi.n	8001cb6 <HAL_SPI_Transmit+0x18e>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_SPI_Transmit+0x194>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d104      	bne.n	8001cc6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001cbc:	231f      	movs	r3, #31
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	701a      	strb	r2, [r3, #0]
          goto error;
 8001cc4:	e0aa      	b.n	8001e1c <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1cd      	bne.n	8001c6c <HAL_SPI_Transmit+0x144>
 8001cd0:	e080      	b.n	8001dd4 <HAL_SPI_Transmit+0x2ac>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <HAL_SPI_Transmit+0x1be>
 8001cda:	2316      	movs	r3, #22
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d000      	beq.n	8001ce6 <HAL_SPI_Transmit+0x1be>
 8001ce4:	e071      	b.n	8001dca <HAL_SPI_Transmit+0x2a2>
    {
      if (hspi->TxXferCount > 1U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d912      	bls.n	8001d16 <HAL_SPI_Transmit+0x1ee>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d00:	1c9a      	adds	r2, r3, #2
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b02      	subs	r3, #2
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d14:	e059      	b.n	8001dca <HAL_SPI_Transmit+0x2a2>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	330c      	adds	r3, #12
 8001d20:	7812      	ldrb	r2, [r2, #0]
 8001d22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d3c:	e045      	b.n	8001dca <HAL_SPI_Transmit+0x2a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d12b      	bne.n	8001da4 <HAL_SPI_Transmit+0x27c>
      {
        if (hspi->TxXferCount > 1U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d912      	bls.n	8001d7c <HAL_SPI_Transmit+0x254>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5a:	881a      	ldrh	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d66:	1c9a      	adds	r2, r3, #2
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b02      	subs	r3, #2
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d7a:	e026      	b.n	8001dca <HAL_SPI_Transmit+0x2a2>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	330c      	adds	r3, #12
 8001d86:	7812      	ldrb	r2, [r2, #0]
 8001d88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001da2:	e012      	b.n	8001dca <HAL_SPI_Transmit+0x2a2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001da4:	f7fe ff80 	bl	8000ca8 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d802      	bhi.n	8001dba <HAL_SPI_Transmit+0x292>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	d102      	bne.n	8001dc0 <HAL_SPI_Transmit+0x298>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d104      	bne.n	8001dca <HAL_SPI_Transmit+0x2a2>
        {
          errorcode = HAL_TIMEOUT;
 8001dc0:	231f      	movs	r3, #31
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	701a      	strb	r2, [r3, #0]
          goto error;
 8001dc8:	e028      	b.n	8001e1c <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1b4      	bne.n	8001d3e <HAL_SPI_Transmit+0x216>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 f95e 	bl	800209c <SPI_EndRxTxTransaction>
 8001de0:	1e03      	subs	r3, r0, #0
 8001de2:	d002      	beq.n	8001dea <HAL_SPI_Transmit+0x2c2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10a      	bne.n	8001e08 <HAL_SPI_Transmit+0x2e0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_SPI_Transmit+0x2f2>
  {
    errorcode = HAL_ERROR;
 8001e10:	231f      	movs	r3, #31
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e000      	b.n	8001e1c <HAL_SPI_Transmit+0x2f4>
  }

error:
 8001e1a:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	225d      	movs	r2, #93	@ 0x5d
 8001e20:	2101      	movs	r1, #1
 8001e22:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	225c      	movs	r2, #92	@ 0x5c
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001e2c:	231f      	movs	r3, #31
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	781b      	ldrb	r3, [r3, #0]
}
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b008      	add	sp, #32
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	1dfb      	adds	r3, r7, #7
 8001e4a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e4c:	f7fe ff2c 	bl	8000ca8 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	18d3      	adds	r3, r2, r3
 8001e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e5c:	f7fe ff24 	bl	8000ca8 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e64:	4b3a      	ldr	r3, [pc, #232]	@ (8001f50 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	015b      	lsls	r3, r3, #5
 8001e6a:	0d1b      	lsrs	r3, r3, #20
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	4353      	muls	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e72:	e058      	b.n	8001f26 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	d055      	beq.n	8001f26 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e7a:	f7fe ff15 	bl	8000ca8 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d902      	bls.n	8001e90 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d142      	bne.n	8001f16 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	21e0      	movs	r1, #224	@ 0xe0
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	2382      	movs	r3, #130	@ 0x82
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d113      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d005      	beq.n	8001ec4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d107      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2140      	movs	r1, #64	@ 0x40
 8001ed0:	438a      	bics	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	019b      	lsls	r3, r3, #6
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d110      	bne.n	8001f02 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	491a      	ldr	r1, [pc, #104]	@ (8001f54 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2180      	movs	r1, #128	@ 0x80
 8001efc:	0189      	lsls	r1, r1, #6
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	225d      	movs	r2, #93	@ 0x5d
 8001f06:	2101      	movs	r1, #1
 8001f08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	225c      	movs	r2, #92	@ 0x5c
 8001f0e:	2100      	movs	r1, #0
 8001f10:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e017      	b.n	8001f46 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	425a      	negs	r2, r3
 8001f36:	4153      	adcs	r3, r2
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	1dfb      	adds	r3, r7, #7
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d197      	bne.n	8001e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b008      	add	sp, #32
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	20000000 	.word	0x20000000
 8001f54:	ffffdfff 	.word	0xffffdfff

08001f58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001f66:	2317      	movs	r3, #23
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f6e:	f7fe fe9b 	bl	8000ca8 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	18d3      	adds	r3, r2, r3
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001f7e:	f7fe fe93 	bl	8000ca8 <HAL_GetTick>
 8001f82:	0003      	movs	r3, r0
 8001f84:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	330c      	adds	r3, #12
 8001f8c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f8e:	4b41      	ldr	r3, [pc, #260]	@ (8002094 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	0013      	movs	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	189b      	adds	r3, r3, r2
 8001f98:	00da      	lsls	r2, r3, #3
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	0d1b      	lsrs	r3, r3, #20
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa0:	4353      	muls	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001fa4:	e068      	b.n	8002078 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	23c0      	movs	r3, #192	@ 0xc0
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d10a      	bne.n	8001fc6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d107      	bne.n	8001fc6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	2117      	movs	r1, #23
 8001fbe:	187b      	adds	r3, r7, r1
 8001fc0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	d055      	beq.n	8002078 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fcc:	f7fe fe6c 	bl	8000ca8 <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d902      	bls.n	8001fe2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d142      	bne.n	8002068 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	21e0      	movs	r1, #224	@ 0xe0
 8001fee:	438a      	bics	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	2382      	movs	r3, #130	@ 0x82
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d113      	bne.n	8002026 <SPI_WaitFifoStateUntilTimeout+0xce>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	429a      	cmp	r2, r3
 8002008:	d005      	beq.n	8002016 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	429a      	cmp	r2, r3
 8002014:	d107      	bne.n	8002026 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2140      	movs	r1, #64	@ 0x40
 8002022:	438a      	bics	r2, r1
 8002024:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	429a      	cmp	r2, r3
 8002030:	d110      	bne.n	8002054 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4916      	ldr	r1, [pc, #88]	@ (8002098 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800203e:	400a      	ands	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2180      	movs	r1, #128	@ 0x80
 800204e:	0189      	lsls	r1, r1, #6
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	225d      	movs	r2, #93	@ 0x5d
 8002058:	2101      	movs	r1, #1
 800205a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	225c      	movs	r2, #92	@ 0x5c
 8002060:	2100      	movs	r1, #0
 8002062:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e010      	b.n	800208a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	3b01      	subs	r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4013      	ands	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d18e      	bne.n	8001fa6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b00a      	add	sp, #40	@ 0x28
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	20000000 	.word	0x20000000
 8002098:	ffffdfff 	.word	0xffffdfff

0800209c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	23c0      	movs	r3, #192	@ 0xc0
 80020ac:	0159      	lsls	r1, r3, #5
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	0013      	movs	r3, r2
 80020b6:	2200      	movs	r2, #0
 80020b8:	f7ff ff4e 	bl	8001f58 <SPI_WaitFifoStateUntilTimeout>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d007      	beq.n	80020d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c4:	2220      	movs	r2, #32
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e027      	b.n	8002120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	0013      	movs	r3, r2
 80020da:	2200      	movs	r2, #0
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	f7ff fead 	bl	8001e3c <SPI_WaitFlagStateUntilTimeout>
 80020e2:	1e03      	subs	r3, r0, #0
 80020e4:	d007      	beq.n	80020f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ea:	2220      	movs	r2, #32
 80020ec:	431a      	orrs	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e014      	b.n	8002120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	23c0      	movs	r3, #192	@ 0xc0
 80020fa:	00d9      	lsls	r1, r3, #3
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	0013      	movs	r3, r2
 8002104:	2200      	movs	r2, #0
 8002106:	f7ff ff27 	bl	8001f58 <SPI_WaitFifoStateUntilTimeout>
 800210a:	1e03      	subs	r3, r0, #0
 800210c:	d007      	beq.n	800211e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002112:	2220      	movs	r2, #32
 8002114:	431a      	orrs	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e000      	b.n	8002120 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b004      	add	sp, #16
 8002126:	bd80      	pop	{r7, pc}

08002128 <memset>:
 8002128:	0003      	movs	r3, r0
 800212a:	1882      	adds	r2, r0, r2
 800212c:	4293      	cmp	r3, r2
 800212e:	d100      	bne.n	8002132 <memset+0xa>
 8002130:	4770      	bx	lr
 8002132:	7019      	strb	r1, [r3, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	e7f9      	b.n	800212c <memset+0x4>

08002138 <__libc_init_array>:
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	2600      	movs	r6, #0
 800213c:	4c0c      	ldr	r4, [pc, #48]	@ (8002170 <__libc_init_array+0x38>)
 800213e:	4d0d      	ldr	r5, [pc, #52]	@ (8002174 <__libc_init_array+0x3c>)
 8002140:	1b64      	subs	r4, r4, r5
 8002142:	10a4      	asrs	r4, r4, #2
 8002144:	42a6      	cmp	r6, r4
 8002146:	d109      	bne.n	800215c <__libc_init_array+0x24>
 8002148:	2600      	movs	r6, #0
 800214a:	f000 f819 	bl	8002180 <_init>
 800214e:	4c0a      	ldr	r4, [pc, #40]	@ (8002178 <__libc_init_array+0x40>)
 8002150:	4d0a      	ldr	r5, [pc, #40]	@ (800217c <__libc_init_array+0x44>)
 8002152:	1b64      	subs	r4, r4, r5
 8002154:	10a4      	asrs	r4, r4, #2
 8002156:	42a6      	cmp	r6, r4
 8002158:	d105      	bne.n	8002166 <__libc_init_array+0x2e>
 800215a:	bd70      	pop	{r4, r5, r6, pc}
 800215c:	00b3      	lsls	r3, r6, #2
 800215e:	58eb      	ldr	r3, [r5, r3]
 8002160:	4798      	blx	r3
 8002162:	3601      	adds	r6, #1
 8002164:	e7ee      	b.n	8002144 <__libc_init_array+0xc>
 8002166:	00b3      	lsls	r3, r6, #2
 8002168:	58eb      	ldr	r3, [r5, r3]
 800216a:	4798      	blx	r3
 800216c:	3601      	adds	r6, #1
 800216e:	e7f2      	b.n	8002156 <__libc_init_array+0x1e>
 8002170:	080021e4 	.word	0x080021e4
 8002174:	080021e4 	.word	0x080021e4
 8002178:	080021e8 	.word	0x080021e8
 800217c:	080021e4 	.word	0x080021e4

08002180 <_init>:
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002186:	bc08      	pop	{r3}
 8002188:	469e      	mov	lr, r3
 800218a:	4770      	bx	lr

0800218c <_fini>:
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002192:	bc08      	pop	{r3}
 8002194:	469e      	mov	lr, r3
 8002196:	4770      	bx	lr
