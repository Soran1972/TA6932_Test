
TA6932_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003570  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003678  08003678  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003678  08003678  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003678  08003678  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000014  08003694  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003694  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1d5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e00  00000000  00000000  0002a254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000803  00000000  00000000  0002cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012f79  00000000  00000000  0002d2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d582  00000000  00000000  0004024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000731a8  00000000  00000000  0004d7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002520  00000000  00000000  000c0978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000c2e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003618 	.word	0x08003618

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003618 	.word	0x08003618

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <DS3231_BCD2BIN>:
#include "string.h"

static I2C_HandleTypeDef *hI2C = NULL;

/* Helpers: BCD <-> Binary */
uint8_t DS3231_BCD2BIN(uint8_t val){ return (uint8_t)((val>>4)*10 + (val&0x0F)); }
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	091b      	lsrs	r3, r3, #4
 8000406:	b2db      	uxtb	r3, r3
 8000408:	1c1a      	adds	r2, r3, #0
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	18d3      	adds	r3, r2, r3
 800040e:	18db      	adds	r3, r3, r3
 8000410:	b2da      	uxtb	r2, r3
 8000412:	1dfb      	adds	r3, r7, #7
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	210f      	movs	r1, #15
 8000418:	400b      	ands	r3, r1
 800041a:	b2db      	uxtb	r3, r3
 800041c:	18d3      	adds	r3, r2, r3
 800041e:	b2db      	uxtb	r3, r3
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}

08000428 <DS3231_BIN2BCD>:
uint8_t DS3231_BIN2BCD(uint8_t val){ return (uint8_t)(((val/10)<<4) | (val%10)); }
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	0002      	movs	r2, r0
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	701a      	strb	r2, [r3, #0]
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	210a      	movs	r1, #10
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff fe64 	bl	8000108 <__udivsi3>
 8000440:	0003      	movs	r3, r0
 8000442:	b2db      	uxtb	r3, r3
 8000444:	011b      	lsls	r3, r3, #4
 8000446:	b25c      	sxtb	r4, r3
 8000448:	1dfb      	adds	r3, r7, #7
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	210a      	movs	r1, #10
 800044e:	0018      	movs	r0, r3
 8000450:	f7ff fee0 	bl	8000214 <__aeabi_uidivmod>
 8000454:	000b      	movs	r3, r1
 8000456:	b2db      	uxtb	r3, r3
 8000458:	b25b      	sxtb	r3, r3
 800045a:	4323      	orrs	r3, r4
 800045c:	b25b      	sxtb	r3, r3
 800045e:	b2db      	uxtb	r3, r3
 8000460:	0018      	movs	r0, r3
 8000462:	46bd      	mov	sp, r7
 8000464:	b003      	add	sp, #12
 8000466:	bd90      	pop	{r4, r7, pc}

08000468 <DS3231_Init>:

void DS3231_Init(I2C_HandleTypeDef *hi2c){ hI2C = hi2c; }
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <DS3231_Init+0x18>)
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	20000030 	.word	0x20000030

08000484 <ds_write>:

/* Low-level R/W */
static HAL_StatusTypeDef ds_write(uint8_t reg, const uint8_t *pdata, uint16_t size){
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af04      	add	r7, sp, #16
 800048a:	6039      	str	r1, [r7, #0]
 800048c:	0011      	movs	r1, r2
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	1c02      	adds	r2, r0, #0
 8000492:	701a      	strb	r2, [r3, #0]
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	1c0a      	adds	r2, r1, #0
 8000498:	801a      	strh	r2, [r3, #0]
    if (!hI2C) return HAL_ERROR;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <ds_write+0x50>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d101      	bne.n	80004a6 <ds_write+0x22>
 80004a2:	2301      	movs	r3, #1
 80004a4:	e011      	b.n	80004ca <ds_write+0x46>
    return HAL_I2C_Mem_Write(hI2C, DS3231_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)pdata, size, 1000);
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <ds_write+0x50>)
 80004a8:	6818      	ldr	r0, [r3, #0]
 80004aa:	1dfb      	adds	r3, r7, #7
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	23fa      	movs	r3, #250	; 0xfa
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	9302      	str	r3, [sp, #8]
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	9301      	str	r3, [sp, #4]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2301      	movs	r3, #1
 80004c2:	21d0      	movs	r1, #208	; 0xd0
 80004c4:	f001 faa8 	bl	8001a18 <HAL_I2C_Mem_Write>
 80004c8:	0003      	movs	r3, r0
}
 80004ca:	0018      	movs	r0, r3
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b002      	add	sp, #8
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	20000030 	.word	0x20000030

080004d8 <ds_read>:
static HAL_StatusTypeDef ds_read(uint8_t reg, uint8_t *pdata, uint16_t size){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af04      	add	r7, sp, #16
 80004de:	6039      	str	r1, [r7, #0]
 80004e0:	0011      	movs	r1, r2
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	1c02      	adds	r2, r0, #0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	1c0a      	adds	r2, r1, #0
 80004ec:	801a      	strh	r2, [r3, #0]
    if (!hI2C) return HAL_ERROR;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <ds_read+0x50>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d101      	bne.n	80004fa <ds_read+0x22>
 80004f6:	2301      	movs	r3, #1
 80004f8:	e011      	b.n	800051e <ds_read+0x46>
    return HAL_I2C_Mem_Read(hI2C, DS3231_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, pdata, size, 1000);
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <ds_read+0x50>)
 80004fc:	6818      	ldr	r0, [r3, #0]
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b29a      	uxth	r2, r3
 8000504:	23fa      	movs	r3, #250	; 0xfa
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	21d0      	movs	r1, #208	; 0xd0
 8000518:	f001 fbac 	bl	8001c74 <HAL_I2C_Mem_Read>
 800051c:	0003      	movs	r3, r0
}
 800051e:	0018      	movs	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	b002      	add	sp, #8
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	20000030 	.word	0x20000030

0800052c <DS3231_SetTime>:

/* Basic time I/O */
HAL_StatusTypeDef DS3231_SetTime(DS3231_TimeTypeDef *time){
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    if (!time) return HAL_ERROR;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d101      	bne.n	800053e <DS3231_SetTime+0x12>
 800053a:	2301      	movs	r3, #1
 800053c:	e04d      	b.n	80005da <DS3231_SetTime+0xae>
    uint8_t buf[7];
    buf[0]=DS3231_BIN2BCD(time->seconds);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	0018      	movs	r0, r3
 8000544:	f7ff ff70 	bl	8000428 <DS3231_BIN2BCD>
 8000548:	0003      	movs	r3, r0
 800054a:	001a      	movs	r2, r3
 800054c:	2408      	movs	r4, #8
 800054e:	193b      	adds	r3, r7, r4
 8000550:	701a      	strb	r2, [r3, #0]
    buf[1]=DS3231_BIN2BCD(time->minutes);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	785b      	ldrb	r3, [r3, #1]
 8000556:	0018      	movs	r0, r3
 8000558:	f7ff ff66 	bl	8000428 <DS3231_BIN2BCD>
 800055c:	0003      	movs	r3, r0
 800055e:	001a      	movs	r2, r3
 8000560:	193b      	adds	r3, r7, r4
 8000562:	705a      	strb	r2, [r3, #1]
    buf[2]=DS3231_BIN2BCD(time->hours);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ff5d 	bl	8000428 <DS3231_BIN2BCD>
 800056e:	0003      	movs	r3, r0
 8000570:	001a      	movs	r2, r3
 8000572:	193b      	adds	r3, r7, r4
 8000574:	709a      	strb	r2, [r3, #2]
    buf[3]=DS3231_BIN2BCD(time->day);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	78db      	ldrb	r3, [r3, #3]
 800057a:	0018      	movs	r0, r3
 800057c:	f7ff ff54 	bl	8000428 <DS3231_BIN2BCD>
 8000580:	0003      	movs	r3, r0
 8000582:	001a      	movs	r2, r3
 8000584:	193b      	adds	r3, r7, r4
 8000586:	70da      	strb	r2, [r3, #3]
    buf[4]=DS3231_BIN2BCD(time->date);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	0018      	movs	r0, r3
 800058e:	f7ff ff4b 	bl	8000428 <DS3231_BIN2BCD>
 8000592:	0003      	movs	r3, r0
 8000594:	001a      	movs	r2, r3
 8000596:	193b      	adds	r3, r7, r4
 8000598:	711a      	strb	r2, [r3, #4]
    buf[5]=DS3231_BIN2BCD(time->month);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	795b      	ldrb	r3, [r3, #5]
 800059e:	0018      	movs	r0, r3
 80005a0:	f7ff ff42 	bl	8000428 <DS3231_BIN2BCD>
 80005a4:	0003      	movs	r3, r0
 80005a6:	001a      	movs	r2, r3
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	715a      	strb	r2, [r3, #5]
    buf[6]=DS3231_BIN2BCD((uint8_t)(time->year%100));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	88db      	ldrh	r3, [r3, #6]
 80005b0:	2164      	movs	r1, #100	; 0x64
 80005b2:	0018      	movs	r0, r3
 80005b4:	f7ff fe2e 	bl	8000214 <__aeabi_uidivmod>
 80005b8:	000b      	movs	r3, r1
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ff32 	bl	8000428 <DS3231_BIN2BCD>
 80005c4:	0003      	movs	r3, r0
 80005c6:	001a      	movs	r2, r3
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	719a      	strb	r2, [r3, #6]
    return ds_write(DS3231_REG_SECONDS, buf, 7);
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2207      	movs	r2, #7
 80005d0:	0019      	movs	r1, r3
 80005d2:	2000      	movs	r0, #0
 80005d4:	f7ff ff56 	bl	8000484 <ds_write>
 80005d8:	0003      	movs	r3, r0
}
 80005da:	0018      	movs	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	b005      	add	sp, #20
 80005e0:	bd90      	pop	{r4, r7, pc}

080005e2 <DS3231_GetTime>:
HAL_StatusTypeDef DS3231_GetTime(DS3231_TimeTypeDef *time){
 80005e2:	b5b0      	push	{r4, r5, r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
    uint8_t buf[7];
    HAL_StatusTypeDef st = ds_read(DS3231_REG_SECONDS, buf, 7);
 80005ea:	250f      	movs	r5, #15
 80005ec:	197c      	adds	r4, r7, r5
 80005ee:	2308      	movs	r3, #8
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	2207      	movs	r2, #7
 80005f4:	0019      	movs	r1, r3
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff ff6e 	bl	80004d8 <ds_read>
 80005fc:	0003      	movs	r3, r0
 80005fe:	7023      	strb	r3, [r4, #0]
    if (st!=HAL_OK) return st;
 8000600:	197b      	adds	r3, r7, r5
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d002      	beq.n	800060e <DS3231_GetTime+0x2c>
 8000608:	197b      	adds	r3, r7, r5
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	e057      	b.n	80006be <DS3231_GetTime+0xdc>
    time->seconds=(uint8_t)DS3231_BCD2BIN(buf[0]&0x7F);
 800060e:	2408      	movs	r4, #8
 8000610:	193b      	adds	r3, r7, r4
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	227f      	movs	r2, #127	; 0x7f
 8000616:	4013      	ands	r3, r2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff feea 	bl	80003f4 <DS3231_BCD2BIN>
 8000620:	0003      	movs	r3, r0
 8000622:	001a      	movs	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	701a      	strb	r2, [r3, #0]
    time->minutes=(uint8_t)DS3231_BCD2BIN(buf[1]&0x7F);
 8000628:	193b      	adds	r3, r7, r4
 800062a:	785b      	ldrb	r3, [r3, #1]
 800062c:	227f      	movs	r2, #127	; 0x7f
 800062e:	4013      	ands	r3, r2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff fede 	bl	80003f4 <DS3231_BCD2BIN>
 8000638:	0003      	movs	r3, r0
 800063a:	001a      	movs	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	705a      	strb	r2, [r3, #1]
    time->hours  =(uint8_t)DS3231_BCD2BIN(buf[2]&0x3F); // 24h
 8000640:	193b      	adds	r3, r7, r4
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	223f      	movs	r2, #63	; 0x3f
 8000646:	4013      	ands	r3, r2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff fed2 	bl	80003f4 <DS3231_BCD2BIN>
 8000650:	0003      	movs	r3, r0
 8000652:	001a      	movs	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	709a      	strb	r2, [r3, #2]
    time->day    =(uint8_t)DS3231_BCD2BIN(buf[3]&0x07);
 8000658:	193b      	adds	r3, r7, r4
 800065a:	78db      	ldrb	r3, [r3, #3]
 800065c:	2207      	movs	r2, #7
 800065e:	4013      	ands	r3, r2
 8000660:	b2db      	uxtb	r3, r3
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff fec6 	bl	80003f4 <DS3231_BCD2BIN>
 8000668:	0003      	movs	r3, r0
 800066a:	001a      	movs	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	70da      	strb	r2, [r3, #3]
    time->date   =(uint8_t)DS3231_BCD2BIN(buf[4]&0x3F);
 8000670:	193b      	adds	r3, r7, r4
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	223f      	movs	r2, #63	; 0x3f
 8000676:	4013      	ands	r3, r2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	0018      	movs	r0, r3
 800067c:	f7ff feba 	bl	80003f4 <DS3231_BCD2BIN>
 8000680:	0003      	movs	r3, r0
 8000682:	001a      	movs	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	711a      	strb	r2, [r3, #4]
    time->month  =(uint8_t)DS3231_BCD2BIN(buf[5]&0x1F);
 8000688:	193b      	adds	r3, r7, r4
 800068a:	795b      	ldrb	r3, [r3, #5]
 800068c:	221f      	movs	r2, #31
 800068e:	4013      	ands	r3, r2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff feae 	bl	80003f4 <DS3231_BCD2BIN>
 8000698:	0003      	movs	r3, r0
 800069a:	001a      	movs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	715a      	strb	r2, [r3, #5]
    time->year   =(uint16_t)(2000 + DS3231_BCD2BIN(buf[6]));
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	799b      	ldrb	r3, [r3, #6]
 80006a4:	0018      	movs	r0, r3
 80006a6:	f7ff fea5 	bl	80003f4 <DS3231_BCD2BIN>
 80006aa:	0003      	movs	r3, r0
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	22fa      	movs	r2, #250	; 0xfa
 80006b0:	00d2      	lsls	r2, r2, #3
 80006b2:	4694      	mov	ip, r2
 80006b4:	4463      	add	r3, ip
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	80da      	strh	r2, [r3, #6]
    return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	0018      	movs	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b004      	add	sp, #16
 80006c4:	bdb0      	pop	{r4, r5, r7, pc}

080006c6 <DS3231_Enable1HzSQW>:

/* SQW control */
HAL_StatusTypeDef DS3231_Enable1HzSQW(void){
 80006c6:	b590      	push	{r4, r7, lr}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
    uint8_t ctrl;
    HAL_StatusTypeDef st = ds_read(DS3231_REG_CONTROL, &ctrl, 1);
 80006cc:	1dfc      	adds	r4, r7, #7
 80006ce:	1dbb      	adds	r3, r7, #6
 80006d0:	2201      	movs	r2, #1
 80006d2:	0019      	movs	r1, r3
 80006d4:	200e      	movs	r0, #14
 80006d6:	f7ff feff 	bl	80004d8 <ds_read>
 80006da:	0003      	movs	r3, r0
 80006dc:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) return st;
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d002      	beq.n	80006ec <DS3231_Enable1HzSQW+0x26>
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	e01b      	b.n	8000724 <DS3231_Enable1HzSQW+0x5e>
    ctrl &= ~DS3231_CONTROL_EOSC;             // ensure oscillator running
 80006ec:	1dbb      	adds	r3, r7, #6
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	227f      	movs	r2, #127	; 0x7f
 80006f2:	4013      	ands	r3, r2
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	1dbb      	adds	r3, r7, #6
 80006f8:	701a      	strb	r2, [r3, #0]
    ctrl &= ~DS3231_CONTROL_INTCN;            // route SQW
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2204      	movs	r2, #4
 8000700:	4393      	bics	r3, r2
 8000702:	b2da      	uxtb	r2, r3
 8000704:	1dbb      	adds	r3, r7, #6
 8000706:	701a      	strb	r2, [r3, #0]
    ctrl &= ~DS3231_CONTROL_RS_MASK;          // 00 => 1Hz
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2218      	movs	r2, #24
 800070e:	4393      	bics	r3, r2
 8000710:	b2da      	uxtb	r2, r3
 8000712:	1dbb      	adds	r3, r7, #6
 8000714:	701a      	strb	r2, [r3, #0]
    return ds_write(DS3231_REG_CONTROL, &ctrl, 1);
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	2201      	movs	r2, #1
 800071a:	0019      	movs	r1, r3
 800071c:	200e      	movs	r0, #14
 800071e:	f7ff feb1 	bl	8000484 <ds_write>
 8000722:	0003      	movs	r3, r0
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b003      	add	sp, #12
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <DS3231_ReadControl>:
    *temperature = (float)msb + ((float)(lsb >> 6) * 0.25f);
    return HAL_OK;
}

/* NEW in v3: direct register helpers */
HAL_StatusTypeDef DS3231_ReadControl(uint8_t *val){ return ds_read(DS3231_REG_CONTROL, val, 1); }
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2201      	movs	r2, #1
 8000738:	0019      	movs	r1, r3
 800073a:	200e      	movs	r0, #14
 800073c:	f7ff fecc 	bl	80004d8 <ds_read>
 8000740:	0003      	movs	r3, r0
 8000742:	0018      	movs	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}

0800074a <DS3231_WriteControl>:
HAL_StatusTypeDef DS3231_WriteControl(uint8_t val){ return ds_write(DS3231_REG_CONTROL, &val, 1); }
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	0002      	movs	r2, r0
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	2201      	movs	r2, #1
 800075a:	0019      	movs	r1, r3
 800075c:	200e      	movs	r0, #14
 800075e:	f7ff fe91 	bl	8000484 <ds_write>
 8000762:	0003      	movs	r3, r0
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}

0800076c <DS3231_ReadStatus>:
HAL_StatusTypeDef DS3231_ReadStatus(uint8_t *val){  return ds_read(DS3231_REG_STATUS,  val, 1); }
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	0019      	movs	r1, r3
 800077a:	200f      	movs	r0, #15
 800077c:	f7ff feac 	bl	80004d8 <ds_read>
 8000780:	0003      	movs	r3, r0
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}

0800078a <DS3231_WriteStatus>:
HAL_StatusTypeDef DS3231_WriteStatus(uint8_t val){  return ds_write(DS3231_REG_STATUS, &val, 1); }
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	0002      	movs	r2, r0
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	2201      	movs	r2, #1
 800079a:	0019      	movs	r1, r3
 800079c:	200f      	movs	r0, #15
 800079e:	f7ff fe71 	bl	8000484 <ds_write>
 80007a2:	0003      	movs	r3, r0
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}

080007ac <DS3231_EnsureInitialized>:

/* NEW in v3: one-shot initializer based on OSF bit */
HAL_StatusTypeDef DS3231_EnsureInitialized(const DS3231_TimeTypeDef *default_time){
 80007ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef st;
    uint8_t stat=0, ctrl=0;
 80007b4:	2116      	movs	r1, #22
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	2315      	movs	r3, #21
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]

    st = DS3231_ReadStatus(&stat);
 80007c4:	2517      	movs	r5, #23
 80007c6:	197c      	adds	r4, r7, r5
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	0018      	movs	r0, r3
 80007cc:	f7ff ffce 	bl	800076c <DS3231_ReadStatus>
 80007d0:	0003      	movs	r3, r0
 80007d2:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) return st;
 80007d4:	197b      	adds	r3, r7, r5
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <DS3231_EnsureInitialized+0x36>
 80007dc:	197b      	adds	r3, r7, r5
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	e06f      	b.n	80008c2 <DS3231_EnsureInitialized+0x116>

    if (stat & DS3231_STATUS_OSF){
 80007e2:	2316      	movs	r3, #22
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b25b      	sxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	da68      	bge.n	80008c0 <DS3231_EnsureInitialized+0x114>
        /* Ensure oscillator and 1Hz SQW */
        st = DS3231_ReadControl(&ctrl);
 80007ee:	2517      	movs	r5, #23
 80007f0:	197c      	adds	r4, r7, r5
 80007f2:	2315      	movs	r3, #21
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff ff98 	bl	800072c <DS3231_ReadControl>
 80007fc:	0003      	movs	r3, r0
 80007fe:	7023      	strb	r3, [r4, #0]
        if (st != HAL_OK) return st;
 8000800:	197b      	adds	r3, r7, r5
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <DS3231_EnsureInitialized+0x62>
 8000808:	197b      	adds	r3, r7, r5
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	e059      	b.n	80008c2 <DS3231_EnsureInitialized+0x116>
        ctrl &= ~DS3231_CONTROL_EOSC;
 800080e:	2115      	movs	r1, #21
 8000810:	187b      	adds	r3, r7, r1
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	227f      	movs	r2, #127	; 0x7f
 8000816:	4013      	ands	r3, r2
 8000818:	b2da      	uxtb	r2, r3
 800081a:	187b      	adds	r3, r7, r1
 800081c:	701a      	strb	r2, [r3, #0]
        ctrl &= ~DS3231_CONTROL_INTCN;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2204      	movs	r2, #4
 8000824:	4393      	bics	r3, r2
 8000826:	b2da      	uxtb	r2, r3
 8000828:	187b      	adds	r3, r7, r1
 800082a:	701a      	strb	r2, [r3, #0]
        ctrl &= ~DS3231_CONTROL_RS_MASK; // 1Hz
 800082c:	187b      	adds	r3, r7, r1
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2218      	movs	r2, #24
 8000832:	4393      	bics	r3, r2
 8000834:	b2da      	uxtb	r2, r3
 8000836:	187b      	adds	r3, r7, r1
 8000838:	701a      	strb	r2, [r3, #0]
        st = DS3231_WriteControl(ctrl);
 800083a:	187b      	adds	r3, r7, r1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2517      	movs	r5, #23
 8000840:	197c      	adds	r4, r7, r5
 8000842:	0018      	movs	r0, r3
 8000844:	f7ff ff81 	bl	800074a <DS3231_WriteControl>
 8000848:	0003      	movs	r3, r0
 800084a:	7023      	strb	r3, [r4, #0]
        if (st != HAL_OK) return st;
 800084c:	197b      	adds	r3, r7, r5
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <DS3231_EnsureInitialized+0xae>
 8000854:	197b      	adds	r3, r7, r5
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	e033      	b.n	80008c2 <DS3231_EnsureInitialized+0x116>

        /* Write default time/date */
        if (default_time){
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d017      	beq.n	8000890 <DS3231_EnsureInitialized+0xe4>
            DS3231_TimeTypeDef tmp = *default_time;
 8000860:	260c      	movs	r6, #12
 8000862:	19ba      	adds	r2, r7, r6
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	0010      	movs	r0, r2
 8000868:	0019      	movs	r1, r3
 800086a:	2308      	movs	r3, #8
 800086c:	001a      	movs	r2, r3
 800086e:	f002 fec9 	bl	8003604 <memcpy>
            st = DS3231_SetTime(&tmp);
 8000872:	2517      	movs	r5, #23
 8000874:	197c      	adds	r4, r7, r5
 8000876:	19bb      	adds	r3, r7, r6
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff fe57 	bl	800052c <DS3231_SetTime>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]
            if (st != HAL_OK) return st;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d002      	beq.n	8000890 <DS3231_EnsureInitialized+0xe4>
 800088a:	197b      	adds	r3, r7, r5
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	e018      	b.n	80008c2 <DS3231_EnsureInitialized+0x116>
        }

        /* Clear OSF so we don't re-init next boot */
        stat &= (uint8_t)~DS3231_STATUS_OSF;
 8000890:	2116      	movs	r1, #22
 8000892:	187b      	adds	r3, r7, r1
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	227f      	movs	r2, #127	; 0x7f
 8000898:	4013      	ands	r3, r2
 800089a:	b2da      	uxtb	r2, r3
 800089c:	187b      	adds	r3, r7, r1
 800089e:	701a      	strb	r2, [r3, #0]
        st = DS3231_WriteStatus(stat);
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2517      	movs	r5, #23
 80008a6:	197c      	adds	r4, r7, r5
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff ff6e 	bl	800078a <DS3231_WriteStatus>
 80008ae:	0003      	movs	r3, r0
 80008b0:	7023      	strb	r3, [r4, #0]
        if (st != HAL_OK) return st;
 80008b2:	197b      	adds	r3, r7, r5
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <DS3231_EnsureInitialized+0x114>
 80008ba:	197b      	adds	r3, r7, r5
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	e000      	b.n	80008c2 <DS3231_EnsureInitialized+0x116>
    }

    return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b007      	add	sp, #28
 80008c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 fd1e 	bl	8001312 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f913 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f000 f9d3 	bl	8000c84 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008de:	f000 f993 	bl	8000c08 <MX_SPI1_Init>
  MX_I2C1_Init();
 80008e2:	f000 f951 	bl	8000b88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  TA6932_Init();
 80008e6:	f000 fccb 	bl	8001280 <TA6932_Init>
  DS3231_Init(&hi2c1);
 80008ea:	4b80      	ldr	r3, [pc, #512]	; (8000aec <main+0x220>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff fdbb 	bl	8000468 <DS3231_Init>
  // تهيئة ذكية مرة واحدة فقط إذا الـRTC غير مهيأ (OSF=1):
  DS3231_TimeTypeDef t0 = { .seconds=0, .minutes=0, .hours=12,
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4a7e      	ldr	r2, [pc, #504]	; (8000af0 <main+0x224>)
 80008f6:	ca03      	ldmia	r2!, {r0, r1}
 80008f8:	c303      	stmia	r3!, {r0, r1}
                            .day=1, .date=1, .month=1, .year=2025 };
  DS3231_EnsureInitialized(&t0);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff ff55 	bl	80007ac <DS3231_EnsureInitialized>

  // (اختياري) تأكيد تفعيل 1Hz على INT/SQW

  // (اختياري) إن أردت دائمًا تفعيل 1Hz حتى لو لم تكن أول مرة
  (void)DS3231_Enable1HzSQW();
 8000902:	f7ff fee0 	bl	80006c6 <DS3231_Enable1HzSQW>
  {

	  static DS3231_TimeTypeDef t;
	  static uint8_t prevSec = 255, blink = 0;

	  if (DS3231_GetTime(&t) == HAL_OK) {
 8000906:	4b7b      	ldr	r3, [pc, #492]	; (8000af4 <main+0x228>)
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff fe6a 	bl	80005e2 <DS3231_GetTime>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d000      	beq.n	8000914 <main+0x48>
 8000912:	e0e7      	b.n	8000ae4 <main+0x218>
	      if (t.seconds != prevSec) {
 8000914:	4b77      	ldr	r3, [pc, #476]	; (8000af4 <main+0x228>)
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	4b77      	ldr	r3, [pc, #476]	; (8000af8 <main+0x22c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d100      	bne.n	8000922 <main+0x56>
 8000920:	e0e0      	b.n	8000ae4 <main+0x218>
	          prevSec = t.seconds;
 8000922:	4b74      	ldr	r3, [pc, #464]	; (8000af4 <main+0x228>)
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	4b74      	ldr	r3, [pc, #464]	; (8000af8 <main+0x22c>)
 8000928:	701a      	strb	r2, [r3, #0]
	          blink ^= 1; // وميض النقاط
 800092a:	4b74      	ldr	r3, [pc, #464]	; (8000afc <main+0x230>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2201      	movs	r2, #1
 8000930:	4053      	eors	r3, r2
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b71      	ldr	r3, [pc, #452]	; (8000afc <main+0x230>)
 8000936:	701a      	strb	r2, [r3, #0]

	          // HH:MM:SS
	          TA6932_putDigit(0x00, t.hours/10   , 0);
 8000938:	4b6e      	ldr	r3, [pc, #440]	; (8000af4 <main+0x228>)
 800093a:	789b      	ldrb	r3, [r3, #2]
 800093c:	210a      	movs	r1, #10
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff fbe2 	bl	8000108 <__udivsi3>
 8000944:	0003      	movs	r3, r0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2200      	movs	r2, #0
 800094a:	0019      	movs	r1, r3
 800094c:	2000      	movs	r0, #0
 800094e:	f000 fc61 	bl	8001214 <TA6932_putDigit>
	          TA6932_putDigit(0x01, t.hours%10   , blink); // ":" هنا
 8000952:	4b68      	ldr	r3, [pc, #416]	; (8000af4 <main+0x228>)
 8000954:	789b      	ldrb	r3, [r3, #2]
 8000956:	210a      	movs	r1, #10
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff fc5b 	bl	8000214 <__aeabi_uidivmod>
 800095e:	000b      	movs	r3, r1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	0019      	movs	r1, r3
 8000964:	4b65      	ldr	r3, [pc, #404]	; (8000afc <main+0x230>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	001a      	movs	r2, r3
 800096a:	2001      	movs	r0, #1
 800096c:	f000 fc52 	bl	8001214 <TA6932_putDigit>
	          TA6932_putDigit(0x02, t.minutes/10 , 0);
 8000970:	4b60      	ldr	r3, [pc, #384]	; (8000af4 <main+0x228>)
 8000972:	785b      	ldrb	r3, [r3, #1]
 8000974:	210a      	movs	r1, #10
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fbc6 	bl	8000108 <__udivsi3>
 800097c:	0003      	movs	r3, r0
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2200      	movs	r2, #0
 8000982:	0019      	movs	r1, r3
 8000984:	2002      	movs	r0, #2
 8000986:	f000 fc45 	bl	8001214 <TA6932_putDigit>
	          TA6932_putDigit(0x03, t.minutes%10 , 0);
 800098a:	4b5a      	ldr	r3, [pc, #360]	; (8000af4 <main+0x228>)
 800098c:	785b      	ldrb	r3, [r3, #1]
 800098e:	210a      	movs	r1, #10
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fc3f 	bl	8000214 <__aeabi_uidivmod>
 8000996:	000b      	movs	r3, r1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2200      	movs	r2, #0
 800099c:	0019      	movs	r1, r3
 800099e:	2003      	movs	r0, #3
 80009a0:	f000 fc38 	bl	8001214 <TA6932_putDigit>
	          TA6932_putDigit(0x04, t.seconds/10 , 0);
 80009a4:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <main+0x228>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	210a      	movs	r1, #10
 80009aa:	0018      	movs	r0, r3
 80009ac:	f7ff fbac 	bl	8000108 <__udivsi3>
 80009b0:	0003      	movs	r3, r0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	0019      	movs	r1, r3
 80009b8:	2004      	movs	r0, #4
 80009ba:	f000 fc2b 	bl	8001214 <TA6932_putDigit>
	          TA6932_putDigit(0x05, t.seconds%10 , 0);
 80009be:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <main+0x228>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	210a      	movs	r1, #10
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fc25 	bl	8000214 <__aeabi_uidivmod>
 80009ca:	000b      	movs	r3, r1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2200      	movs	r2, #0
 80009d0:	0019      	movs	r1, r3
 80009d2:	2005      	movs	r0, #5
 80009d4:	f000 fc1e 	bl	8001214 <TA6932_putDigit>

	          // YYYY mm DD d  (تأكد تبقى ضمن 0x00..0x0F)
	          int yy = t.year;
 80009d8:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <main+0x228>)
 80009da:	88db      	ldrh	r3, [r3, #6]
 80009dc:	60fb      	str	r3, [r7, #12]
	          TA6932_putDigit(0x06, (yy/1000)%10, 0);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	22fa      	movs	r2, #250	; 0xfa
 80009e2:	0091      	lsls	r1, r2, #2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff fc19 	bl	800021c <__divsi3>
 80009ea:	0003      	movs	r3, r0
 80009ec:	210a      	movs	r1, #10
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff fcfa 	bl	80003e8 <__aeabi_idivmod>
 80009f4:	000b      	movs	r3, r1
 80009f6:	2200      	movs	r2, #0
 80009f8:	0019      	movs	r1, r3
 80009fa:	2006      	movs	r0, #6
 80009fc:	f000 fc0a 	bl	8001214 <TA6932_putDigit>
	          TA6932_putDigit(0x07, (yy/100)%10 , 0);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2164      	movs	r1, #100	; 0x64
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff fc09 	bl	800021c <__divsi3>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	210a      	movs	r1, #10
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fcea 	bl	80003e8 <__aeabi_idivmod>
 8000a14:	000b      	movs	r3, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	0019      	movs	r1, r3
 8000a1a:	2007      	movs	r0, #7
 8000a1c:	f000 fbfa 	bl	8001214 <TA6932_putDigit>
	          TA6932_putDigit(0x08, (yy/10)%10  , 0);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	210a      	movs	r1, #10
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff fbf9 	bl	800021c <__divsi3>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	210a      	movs	r1, #10
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fcda 	bl	80003e8 <__aeabi_idivmod>
 8000a34:	000b      	movs	r3, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	0019      	movs	r1, r3
 8000a3a:	2008      	movs	r0, #8
 8000a3c:	f000 fbea 	bl	8001214 <TA6932_putDigit>
	          TA6932_putDigit(0x09,  yy%10      , 0);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	210a      	movs	r1, #10
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fccf 	bl	80003e8 <__aeabi_idivmod>
 8000a4a:	000b      	movs	r3, r1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	0019      	movs	r1, r3
 8000a50:	2009      	movs	r0, #9
 8000a52:	f000 fbdf 	bl	8001214 <TA6932_putDigit>

	          TA6932_putDigit(0x0A, t.month/10  , 0);
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <main+0x228>)
 8000a58:	795b      	ldrb	r3, [r3, #5]
 8000a5a:	210a      	movs	r1, #10
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff fb53 	bl	8000108 <__udivsi3>
 8000a62:	0003      	movs	r3, r0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2200      	movs	r2, #0
 8000a68:	0019      	movs	r1, r3
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f000 fbd2 	bl	8001214 <TA6932_putDigit>
	          TA6932_putDigit(0x0B, t.month%10  , 0);
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <main+0x228>)
 8000a72:	795b      	ldrb	r3, [r3, #5]
 8000a74:	210a      	movs	r1, #10
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fbcc 	bl	8000214 <__aeabi_uidivmod>
 8000a7c:	000b      	movs	r3, r1
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2200      	movs	r2, #0
 8000a82:	0019      	movs	r1, r3
 8000a84:	200b      	movs	r0, #11
 8000a86:	f000 fbc5 	bl	8001214 <TA6932_putDigit>

	          TA6932_putDigit(0x0C, t.date/10   , 0);
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <main+0x228>)
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	210a      	movs	r1, #10
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff fb39 	bl	8000108 <__udivsi3>
 8000a96:	0003      	movs	r3, r0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	200c      	movs	r0, #12
 8000aa0:	f000 fbb8 	bl	8001214 <TA6932_putDigit>
	          TA6932_putDigit(0x0D, t.date%10   , 0);
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <main+0x228>)
 8000aa6:	791b      	ldrb	r3, [r3, #4]
 8000aa8:	210a      	movs	r1, #10
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff fbb2 	bl	8000214 <__aeabi_uidivmod>
 8000ab0:	000b      	movs	r3, r1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	200d      	movs	r0, #13
 8000aba:	f000 fbab 	bl	8001214 <TA6932_putDigit>

	          TA6932_putDigit(0x0E, t.day%10    , 0);  // 1..7
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <main+0x228>)
 8000ac0:	78db      	ldrb	r3, [r3, #3]
 8000ac2:	210a      	movs	r1, #10
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fba5 	bl	8000214 <__aeabi_uidivmod>
 8000aca:	000b      	movs	r3, r1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2200      	movs	r2, #0
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	200e      	movs	r0, #14
 8000ad4:	f000 fb9e 	bl	8001214 <TA6932_putDigit>
	          TA6932_putRaw  (0x0F, 0x00);             // فاضي
 8000ad8:	2100      	movs	r1, #0
 8000ada:	200f      	movs	r0, #15
 8000adc:	f000 fb82 	bl	80011e4 <TA6932_putRaw>

	          TA6932_WriteAll();
 8000ae0:	f000 fbe0 	bl	80012a4 <TA6932_WriteAll>
	      }
	  }
	  HAL_Delay(50);
 8000ae4:	2032      	movs	r0, #50	; 0x32
 8000ae6:	f000 fc91 	bl	800140c <HAL_Delay>
  {
 8000aea:	e70c      	b.n	8000906 <main+0x3a>
 8000aec:	20000034 	.word	0x20000034
 8000af0:	08003630 	.word	0x08003630
 8000af4:	200000ec 	.word	0x200000ec
 8000af8:	20000000 	.word	0x20000000
 8000afc:	200000f4 	.word	0x200000f4

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b08d      	sub	sp, #52	; 0x34
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	2414      	movs	r4, #20
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	231c      	movs	r3, #28
 8000b0e:	001a      	movs	r2, r3
 8000b10:	2100      	movs	r1, #0
 8000b12:	f002 fd4b 	bl	80035ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b16:	003b      	movs	r3, r7
 8000b18:	0018      	movs	r0, r3
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f002 fd44 	bl	80035ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2202      	movs	r2, #2
 8000b28:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	0052      	lsls	r2, r2, #1
 8000b30:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2240      	movs	r2, #64	; 0x40
 8000b3c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	0018      	movs	r0, r3
 8000b42:	f001 fd5d 	bl	8002600 <HAL_RCC_OscConfig>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000b4a:	f000 f8eb 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	003b      	movs	r3, r7
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b54:	003b      	movs	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2101      	movs	r1, #1
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 ff29 	bl	80029c8 <HAL_RCC_ClockConfig>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b7a:	f000 f8d3 	bl	8000d24 <Error_Handler>
  }
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b00d      	add	sp, #52	; 0x34
 8000b84:	bd90      	pop	{r4, r7, pc}
	...

08000b88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <MX_I2C1_Init+0x78>)
 8000b90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <MX_I2C1_Init+0x7c>)
 8000b96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f000 fe81 	bl	80018cc <HAL_I2C_Init>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bce:	f000 f8a9 	bl	8000d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fc7a 	bl	80024d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000be0:	f000 f8a0 	bl	8000d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 fcbd 	bl	8002568 <HAL_I2CEx_ConfigDigitalFilter>
 8000bee:	1e03      	subs	r3, r0, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bf2:	f000 f897 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000034 	.word	0x20000034
 8000c00:	40005400 	.word	0x40005400
 8000c04:	20303e5d 	.word	0x20303e5d

08000c08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <MX_SPI1_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c14:	2282      	movs	r2, #130	; 0x82
 8000c16:	0052      	lsls	r2, r2, #1
 8000c18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c22:	22e0      	movs	r2, #224	; 0xe0
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c3e:	2220      	movs	r2, #32
 8000c40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c56:	2207      	movs	r2, #7
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <MX_SPI1_Init+0x74>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 f8e7 	bl	8002e3c <HAL_SPI_Init>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c72:	f000 f857 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000088 	.word	0x20000088
 8000c80:	40013000 	.word	0x40013000

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	240c      	movs	r4, #12
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2314      	movs	r3, #20
 8000c92:	001a      	movs	r2, r3
 8000c94:	2100      	movs	r1, #0
 8000c96:	f002 fc89 	bl	80035ac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000caa:	2202      	movs	r2, #2
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000cb8:	2104      	movs	r1, #4
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4013      	ands	r3, r2
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ce2:	23a0      	movs	r3, #160	; 0xa0
 8000ce4:	05db      	lsls	r3, r3, #23
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2110      	movs	r1, #16
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 fdd0 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cf0:	0021      	movs	r1, r4
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2202      	movs	r2, #2
 8000d08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	187a      	adds	r2, r7, r1
 8000d0c:	23a0      	movs	r3, #160	; 0xa0
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	0011      	movs	r1, r2
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 fc52 	bl	80015bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b009      	add	sp, #36	; 0x24
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	40021000 	.word	0x40021000

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_MspInit+0x44>)
 8000d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_MspInit+0x44>)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	641a      	str	r2, [r3, #64]	; 0x40
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_MspInit+0x44>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	2201      	movs	r2, #1
 8000d48:	4013      	ands	r3, r2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_MspInit+0x44>)
 8000d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_MspInit+0x44>)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	0549      	lsls	r1, r1, #21
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_MspInit+0x44>)
 8000d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	055b      	lsls	r3, r3, #21
 8000d64:	4013      	ands	r3, r2
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b091      	sub	sp, #68	; 0x44
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	232c      	movs	r3, #44	; 0x2c
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	0018      	movs	r0, r3
 8000d86:	2314      	movs	r3, #20
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f002 fc0e 	bl	80035ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	2410      	movs	r4, #16
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	0018      	movs	r0, r3
 8000d96:	231c      	movs	r3, #28
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f002 fc06 	bl	80035ac <memset>
  if(hi2c->Instance==I2C1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <HAL_I2C_MspInit+0xb8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d13d      	bne.n	8000e26 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2240      	movs	r2, #64	; 0x40
 8000dae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	0018      	movs	r0, r3
 8000dba:	f001 ff51 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000dc2:	f7ff ffaf 	bl	8000d24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_I2C_MspInit+0xbc>)
 8000dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_I2C_MspInit+0xbc>)
 8000dcc:	2102      	movs	r1, #2
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_I2C_MspInit+0xbc>)
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000dde:	212c      	movs	r1, #44	; 0x2c
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	22c0      	movs	r2, #192	; 0xc0
 8000de4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2212      	movs	r2, #18
 8000dea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2206      	movs	r2, #6
 8000dfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_I2C_MspInit+0xc0>)
 8000e02:	0019      	movs	r1, r3
 8000e04:	0010      	movs	r0, r2
 8000e06:	f000 fbd9 	bl	80015bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_I2C_MspInit+0xbc>)
 8000e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_I2C_MspInit+0xbc>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	0389      	lsls	r1, r1, #14
 8000e14:	430a      	orrs	r2, r1
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_I2C_MspInit+0xbc>)
 8000e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	039b      	lsls	r3, r3, #14
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b011      	add	sp, #68	; 0x44
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	40005400 	.word	0x40005400
 8000e34:	40021000 	.word	0x40021000
 8000e38:	50000400 	.word	0x50000400

08000e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b091      	sub	sp, #68	; 0x44
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	232c      	movs	r3, #44	; 0x2c
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f002 fbac 	bl	80035ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	2410      	movs	r4, #16
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	0018      	movs	r0, r3
 8000e5a:	231c      	movs	r3, #28
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f002 fba4 	bl	80035ac <memset>
  if(hspi->Instance==SPI1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <HAL_SPI_MspInit+0xbc>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d13f      	bne.n	8000eee <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 feee 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000e88:	f7ff ff4c 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_SPI_MspInit+0xc0>)
 8000e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_SPI_MspInit+0xc0>)
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	0149      	lsls	r1, r1, #5
 8000e96:	430a      	orrs	r2, r1
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_SPI_MspInit+0xc0>)
 8000e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	015b      	lsls	r3, r3, #5
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_SPI_MspInit+0xc0>)
 8000eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_SPI_MspInit+0xc0>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_SPI_MspInit+0xc0>)
 8000eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4013      	ands	r3, r2
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000ec0:	212c      	movs	r1, #44	; 0x2c
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2206      	movs	r2, #6
 8000ec6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2202      	movs	r2, #2
 8000ecc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	187a      	adds	r2, r7, r1
 8000ee2:	23a0      	movs	r3, #160	; 0xa0
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 fb67 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b011      	add	sp, #68	; 0x44
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	40021000 	.word	0x40021000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 fa56 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <SystemInit+0x14>)
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	0512      	lsls	r2, r2, #20
 8000f3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <TA_STB>:

// SPI handle المُنشأ من CubeMX (عدّل لو تستخدم SPI ثاني)
extern SPI_HandleTypeDef hspi1;

// ===== Low-level =====
static inline void TA_STB(int v){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(TA_STB_PORT, TA_STB_PIN, v ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	1e5a      	subs	r2, r3, #1
 8000f54:	4193      	sbcs	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	001a      	movs	r2, r3
 8000f5a:	23a0      	movs	r3, #160	; 0xa0
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	2110      	movs	r1, #16
 8000f60:	0018      	movs	r0, r3
 8000f62:	f000 fc95 	bl	8001890 <HAL_GPIO_WritePin>
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <TA_sendByte>:
static HAL_StatusTypeDef TA_sendByte(uint8_t b){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	701a      	strb	r2, [r3, #0]
  return HAL_SPI_Transmit(&hspi1, &b, 1, 10);
 8000f7c:	1df9      	adds	r1, r7, #7
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <TA_sendByte+0x24>)
 8000f80:	230a      	movs	r3, #10
 8000f82:	2201      	movs	r2, #1
 8000f84:	f002 f812 	bl	8002fac <HAL_SPI_Transmit>
 8000f88:	0003      	movs	r3, r0
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	20000088 	.word	0x20000088

08000f98 <TA_cmd>:
static void TA_cmd(uint8_t cmd){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	701a      	strb	r2, [r3, #0]
  TA_STB(0);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff ffcf 	bl	8000f48 <TA_STB>
  TA_sendByte(cmd);
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff ffde 	bl	8000f70 <TA_sendByte>
  TA_STB(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff ffc7 	bl	8000f48 <TA_STB>
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <TA_writeSeq>:
static void TA_writeSeq(uint8_t startAddr, const uint8_t *data, uint8_t len){
 8000fc2:	b590      	push	{r4, r7, lr}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	0011      	movs	r1, r2
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	1c02      	adds	r2, r0, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	1dbb      	adds	r3, r7, #6
 8000fd4:	1c0a      	adds	r2, r1, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
  TA_cmd(0x40); // Data set: write, auto-increment
 8000fd8:	2040      	movs	r0, #64	; 0x40
 8000fda:	f7ff ffdd 	bl	8000f98 <TA_cmd>
  TA_STB(0);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff ffb2 	bl	8000f48 <TA_STB>
  uint8_t a = 0xC0 | (startAddr & 0x0F);
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	220f      	movs	r2, #15
 8000fec:	4013      	ands	r3, r2
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	2240      	movs	r2, #64	; 0x40
 8000ff2:	4252      	negs	r2, r2
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b25a      	sxtb	r2, r3
 8000ff8:	210e      	movs	r1, #14
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
  TA_sendByte(a);
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ffb4 	bl	8000f70 <TA_sendByte>
  for(uint8_t i=0;i<len && i<16;i++) TA_sendByte(data[i]);
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e00d      	b.n	800102e <TA_writeSeq+0x6c>
 8001012:	240f      	movs	r4, #15
 8001014:	193b      	adds	r3, r7, r4
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	18d3      	adds	r3, r2, r3
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff ffa6 	bl	8000f70 <TA_sendByte>
 8001024:	193b      	adds	r3, r7, r4
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	193b      	adds	r3, r7, r4
 800102a:	3201      	adds	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	210f      	movs	r1, #15
 8001030:	187a      	adds	r2, r7, r1
 8001032:	1dbb      	adds	r3, r7, #6
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	d203      	bcs.n	8001044 <TA_writeSeq+0x82>
 800103c:	187b      	adds	r3, r7, r1
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d9e6      	bls.n	8001012 <TA_writeSeq+0x50>
  TA_STB(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff ff7f 	bl	8000f48 <TA_STB>
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b005      	add	sp, #20
 8001050:	bd90      	pop	{r4, r7, pc}
	...

08001054 <font_init>:

// ===== Font table (Common-Cathode; bit7 للـ dp خارجياً) =====
static uint8_t font7seg[128];   // ASCII -> 7-seg pattern (bit7 for dp)
static void font_init(void);

static void font_init(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  // digits '0'..'9' (حسب خريطتك CC)
  font7seg['0'] = 0x3F; font7seg['1'] = 0x21; font7seg['2'] = 0x5D; font7seg['3'] = 0x75; font7seg['4'] = 0x63;
 8001058:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <font_init+0x160>)
 800105a:	2230      	movs	r2, #48	; 0x30
 800105c:	213f      	movs	r1, #63	; 0x3f
 800105e:	5499      	strb	r1, [r3, r2]
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <font_init+0x160>)
 8001062:	2231      	movs	r2, #49	; 0x31
 8001064:	2121      	movs	r1, #33	; 0x21
 8001066:	5499      	strb	r1, [r3, r2]
 8001068:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <font_init+0x160>)
 800106a:	2232      	movs	r2, #50	; 0x32
 800106c:	215d      	movs	r1, #93	; 0x5d
 800106e:	5499      	strb	r1, [r3, r2]
 8001070:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <font_init+0x160>)
 8001072:	2233      	movs	r2, #51	; 0x33
 8001074:	2175      	movs	r1, #117	; 0x75
 8001076:	5499      	strb	r1, [r3, r2]
 8001078:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <font_init+0x160>)
 800107a:	2234      	movs	r2, #52	; 0x34
 800107c:	2163      	movs	r1, #99	; 0x63
 800107e:	5499      	strb	r1, [r3, r2]
  font7seg['5'] = 0x76; font7seg['6'] = 0x7E; font7seg['7'] = 0x25; font7seg['8'] = 0x7F; font7seg['9'] = 0x77;
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <font_init+0x160>)
 8001082:	2235      	movs	r2, #53	; 0x35
 8001084:	2176      	movs	r1, #118	; 0x76
 8001086:	5499      	strb	r1, [r3, r2]
 8001088:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <font_init+0x160>)
 800108a:	2236      	movs	r2, #54	; 0x36
 800108c:	217e      	movs	r1, #126	; 0x7e
 800108e:	5499      	strb	r1, [r3, r2]
 8001090:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <font_init+0x160>)
 8001092:	2237      	movs	r2, #55	; 0x37
 8001094:	2125      	movs	r1, #37	; 0x25
 8001096:	5499      	strb	r1, [r3, r2]
 8001098:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <font_init+0x160>)
 800109a:	2238      	movs	r2, #56	; 0x38
 800109c:	217f      	movs	r1, #127	; 0x7f
 800109e:	5499      	strb	r1, [r3, r2]
 80010a0:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <font_init+0x160>)
 80010a2:	2239      	movs	r2, #57	; 0x39
 80010a4:	2177      	movs	r1, #119	; 0x77
 80010a6:	5499      	strb	r1, [r3, r2]

  // رموز شائعة
  font7seg[' '] = 0x00; // فراغ
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <font_init+0x160>)
 80010aa:	2220      	movs	r2, #32
 80010ac:	2100      	movs	r1, #0
 80010ae:	5499      	strb	r1, [r3, r2]
  font7seg['-'] = 0x40; // شرطة (g فقط)
 80010b0:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <font_init+0x160>)
 80010b2:	222d      	movs	r2, #45	; 0x2d
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	5499      	strb	r1, [r3, r2]
  font7seg['_'] = 0x10; // underscore (d)
 80010b8:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <font_init+0x160>)
 80010ba:	225f      	movs	r2, #95	; 0x5f
 80010bc:	2110      	movs	r1, #16
 80010be:	5499      	strb	r1, [r3, r2]

  // حروف تقريبية (يمكن تعديلها بـ setGlyph)
  font7seg['A'] = font7seg['a'] = 0x6F;
 80010c0:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <font_init+0x160>)
 80010c2:	2261      	movs	r2, #97	; 0x61
 80010c4:	216f      	movs	r1, #111	; 0x6f
 80010c6:	5499      	strb	r1, [r3, r2]
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <font_init+0x160>)
 80010ca:	2261      	movs	r2, #97	; 0x61
 80010cc:	5c99      	ldrb	r1, [r3, r2]
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <font_init+0x160>)
 80010d0:	2241      	movs	r2, #65	; 0x41
 80010d2:	5499      	strb	r1, [r3, r2]
  font7seg['b'] = 0x7A;
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <font_init+0x160>)
 80010d6:	2262      	movs	r2, #98	; 0x62
 80010d8:	217a      	movs	r1, #122	; 0x7a
 80010da:	5499      	strb	r1, [r3, r2]
  font7seg['C'] = 0x5A;
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <font_init+0x160>)
 80010de:	2243      	movs	r2, #67	; 0x43
 80010e0:	215a      	movs	r1, #90	; 0x5a
 80010e2:	5499      	strb	r1, [r3, r2]
  font7seg['c'] = 0x58;
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <font_init+0x160>)
 80010e6:	2263      	movs	r2, #99	; 0x63
 80010e8:	2158      	movs	r1, #88	; 0x58
 80010ea:	5499      	strb	r1, [r3, r2]
  font7seg['d'] = 0x79;
 80010ec:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <font_init+0x160>)
 80010ee:	2264      	movs	r2, #100	; 0x64
 80010f0:	2179      	movs	r1, #121	; 0x79
 80010f2:	5499      	strb	r1, [r3, r2]
  font7seg['E'] = 0x5E;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <font_init+0x160>)
 80010f6:	2245      	movs	r2, #69	; 0x45
 80010f8:	215e      	movs	r1, #94	; 0x5e
 80010fa:	5499      	strb	r1, [r3, r2]
  font7seg['F'] = 0x4E;
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <font_init+0x160>)
 80010fe:	2246      	movs	r2, #70	; 0x46
 8001100:	214e      	movs	r1, #78	; 0x4e
 8001102:	5499      	strb	r1, [r3, r2]
  font7seg['G'] = 0x7A;
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <font_init+0x160>)
 8001106:	2247      	movs	r2, #71	; 0x47
 8001108:	217a      	movs	r1, #122	; 0x7a
 800110a:	5499      	strb	r1, [r3, r2]
  font7seg['H'] = 0x6C;
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <font_init+0x160>)
 800110e:	2248      	movs	r2, #72	; 0x48
 8001110:	216c      	movs	r1, #108	; 0x6c
 8001112:	5499      	strb	r1, [r3, r2]
  font7seg['I'] = 0x24;
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <font_init+0x160>)
 8001116:	2249      	movs	r2, #73	; 0x49
 8001118:	2124      	movs	r1, #36	; 0x24
 800111a:	5499      	strb	r1, [r3, r2]
  font7seg['J'] = 0x31;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <font_init+0x160>)
 800111e:	224a      	movs	r2, #74	; 0x4a
 8001120:	2131      	movs	r1, #49	; 0x31
 8001122:	5499      	strb	r1, [r3, r2]
  font7seg['K'] = 0x6C;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <font_init+0x160>)
 8001126:	224b      	movs	r2, #75	; 0x4b
 8001128:	216c      	movs	r1, #108	; 0x6c
 800112a:	5499      	strb	r1, [r3, r2]
  font7seg['L'] = 0x1A;
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <font_init+0x160>)
 800112e:	224c      	movs	r2, #76	; 0x4c
 8001130:	211a      	movs	r1, #26
 8001132:	5499      	strb	r1, [r3, r2]
  font7seg['M'] = 0x2D;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <font_init+0x160>)
 8001136:	224d      	movs	r2, #77	; 0x4d
 8001138:	212d      	movs	r1, #45	; 0x2d
 800113a:	5499      	strb	r1, [r3, r2]
  font7seg['N'] = 0x2C;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <font_init+0x160>)
 800113e:	224e      	movs	r2, #78	; 0x4e
 8001140:	212c      	movs	r1, #44	; 0x2c
 8001142:	5499      	strb	r1, [r3, r2]
  font7seg['n'] = 0x68;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <font_init+0x160>)
 8001146:	226e      	movs	r2, #110	; 0x6e
 8001148:	2168      	movs	r1, #104	; 0x68
 800114a:	5499      	strb	r1, [r3, r2]
  font7seg['o'] = 0x78;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <font_init+0x160>)
 800114e:	226f      	movs	r2, #111	; 0x6f
 8001150:	2178      	movs	r1, #120	; 0x78
 8001152:	5499      	strb	r1, [r3, r2]
  font7seg['P'] = 0x67;
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <font_init+0x160>)
 8001156:	2250      	movs	r2, #80	; 0x50
 8001158:	2167      	movs	r1, #103	; 0x67
 800115a:	5499      	strb	r1, [r3, r2]
  font7seg['Q'] = 0x73;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <font_init+0x160>)
 800115e:	2251      	movs	r2, #81	; 0x51
 8001160:	2173      	movs	r1, #115	; 0x73
 8001162:	5499      	strb	r1, [r3, r2]
  font7seg['r'] = 0x48;
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <font_init+0x160>)
 8001166:	2272      	movs	r2, #114	; 0x72
 8001168:	2148      	movs	r1, #72	; 0x48
 800116a:	5499      	strb	r1, [r3, r2]
  font7seg['S'] = 0x76;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <font_init+0x160>)
 800116e:	2253      	movs	r2, #83	; 0x53
 8001170:	2176      	movs	r1, #118	; 0x76
 8001172:	5499      	strb	r1, [r3, r2]
  font7seg['t'] = 0x5E & ~0x20;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <font_init+0x160>)
 8001176:	2274      	movs	r2, #116	; 0x74
 8001178:	215e      	movs	r1, #94	; 0x5e
 800117a:	5499      	strb	r1, [r3, r2]
  font7seg['U'] = 0x3A;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <font_init+0x160>)
 800117e:	2255      	movs	r2, #85	; 0x55
 8001180:	213a      	movs	r1, #58	; 0x3a
 8001182:	5499      	strb	r1, [r3, r2]
  font7seg['V'] = 0x3A;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <font_init+0x160>)
 8001186:	2256      	movs	r2, #86	; 0x56
 8001188:	213a      	movs	r1, #58	; 0x3a
 800118a:	5499      	strb	r1, [r3, r2]
  font7seg['W'] = 0x3D;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <font_init+0x160>)
 800118e:	2257      	movs	r2, #87	; 0x57
 8001190:	213d      	movs	r1, #61	; 0x3d
 8001192:	5499      	strb	r1, [r3, r2]
  font7seg['X'] = 0x6C;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <font_init+0x160>)
 8001196:	2258      	movs	r2, #88	; 0x58
 8001198:	216c      	movs	r1, #108	; 0x6c
 800119a:	5499      	strb	r1, [r3, r2]
  font7seg['Y'] = 0x73;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <font_init+0x160>)
 800119e:	2259      	movs	r2, #89	; 0x59
 80011a0:	2173      	movs	r1, #115	; 0x73
 80011a2:	5499      	strb	r1, [r3, r2]
  font7seg['Z'] = 0x5B;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <font_init+0x160>)
 80011a6:	225a      	movs	r2, #90	; 0x5a
 80011a8:	215b      	movs	r1, #91	; 0x5b
 80011aa:	5499      	strb	r1, [r3, r2]
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	200000f8 	.word	0x200000f8

080011b8 <TA6932_DisplayOn>:
void TA6932_SetBrightness(uint8_t level){  // 0..7
  if(level > 7) level = 7;
  s_brightness = level;
  TA_cmd(0x88 | (s_brightness & 0x07));  // Display ON + brightness
}
void TA6932_DisplayOn(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  TA_cmd(0x88 | (s_brightness & 0x07));
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <TA6932_DisplayOn+0x28>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	2207      	movs	r2, #7
 80011c4:	4013      	ands	r3, r2
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	2278      	movs	r2, #120	; 0x78
 80011ca:	4252      	negs	r2, r2
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff fee0 	bl	8000f98 <TA_cmd>
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	20000008 	.word	0x20000008

080011e4 <TA6932_putRaw>:
void TA6932_DisplayOff(void){
  TA_cmd(0x80); // OFF
}

// ===== Buffer helpers =====
void TA6932_putRaw(uint8_t addr, uint8_t v){ g_buf[addr & 0x0F] = v; }
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	0002      	movs	r2, r0
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	1c0a      	adds	r2, r1, #0
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	220f      	movs	r2, #15
 80011fc:	4013      	ands	r3, r2
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <TA6932_putRaw+0x2c>)
 8001200:	1db9      	adds	r1, r7, #6
 8001202:	7809      	ldrb	r1, [r1, #0]
 8001204:	54d1      	strb	r1, [r2, r3]
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	20000178 	.word	0x20000178

08001214 <TA6932_putDigit>:

void TA6932_putDigit(uint8_t addr, int d, int dp){
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	1c02      	adds	r2, r0, #0
 8001224:	701a      	strb	r2, [r3, #0]
  uint8_t v = 0x00;
 8001226:	2117      	movs	r1, #23
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
  if (d >= 0 && d <= 9) v = font7seg['0' + d];
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db09      	blt.n	8001248 <TA6932_putDigit+0x34>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b09      	cmp	r3, #9
 8001238:	dc06      	bgt.n	8001248 <TA6932_putDigit+0x34>
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3330      	adds	r3, #48	; 0x30
 800123e:	001a      	movs	r2, r3
 8001240:	187b      	adds	r3, r7, r1
 8001242:	490e      	ldr	r1, [pc, #56]	; (800127c <TA6932_putDigit+0x68>)
 8001244:	5c8a      	ldrb	r2, [r1, r2]
 8001246:	701a      	strb	r2, [r3, #0]
  if (dp) v |= 0x80;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <TA6932_putDigit+0x4a>
 800124e:	2217      	movs	r2, #23
 8001250:	18bb      	adds	r3, r7, r2
 8001252:	18ba      	adds	r2, r7, r2
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	4249      	negs	r1, r1
 800125a:	430a      	orrs	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
  TA6932_putRaw(addr, v);
 800125e:	2317      	movs	r3, #23
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	230f      	movs	r3, #15
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff ffb9 	bl	80011e4 <TA6932_putRaw>
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b006      	add	sp, #24
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	200000f8 	.word	0x200000f8

08001280 <TA6932_Init>:
  g_buf[8]=b8;  g_buf[9]=b9;  g_buf[10]=b10; g_buf[11]=b11;
  g_buf[12]=b12; g_buf[13]=b13; g_buf[14]=b14; g_buf[15]=b15;
}

// ===== Public API =====
void TA6932_Init(void){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  TA_STB(1);                 // STB idle HIGH
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff fe5f 	bl	8000f48 <TA_STB>
  font_init();               // تهيئة الفونت
 800128a:	f7ff fee3 	bl	8001054 <font_init>
  s_brightness = 7;
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <TA6932_Init+0x20>)
 8001290:	2207      	movs	r2, #7
 8001292:	701a      	strb	r2, [r3, #0]
  TA6932_DisplayOn();        // تشغيل على سطوع 7
 8001294:	f7ff ff90 	bl	80011b8 <TA6932_DisplayOn>
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	20000008 	.word	0x20000008

080012a4 <TA6932_WriteAll>:
void TA6932_WriteAll(void){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  TA_writeSeq(0x00, g_buf, 16);
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <TA6932_WriteAll+0x18>)
 80012aa:	2210      	movs	r2, #16
 80012ac:	0019      	movs	r1, r3
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff fe87 	bl	8000fc2 <TA_writeSeq>
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	20000178 	.word	0x20000178

080012c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c4:	f7ff fe34 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012ca:	e003      	b.n	80012d4 <LoopCopyDataInit>

080012cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80012ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012d2:	3104      	adds	r1, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012d4:	480a      	ldr	r0, [pc, #40]	; (8001300 <LoopForever+0xa>)
  ldr r3, =_edata
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <LoopForever+0xe>)
  adds r2, r0, r1
 80012d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012dc:	d3f6      	bcc.n	80012cc <CopyDataInit>
  ldr r2, =_sbss
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <LoopForever+0x12>)
  b LoopFillZerobss
 80012e0:	e002      	b.n	80012e8 <LoopFillZerobss>

080012e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  str  r3, [r2]
 80012e4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e6:	3204      	adds	r2, #4

080012e8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <LoopForever+0x16>)
  cmp r2, r3
 80012ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012ec:	d3f9      	bcc.n	80012e2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80012ee:	f002 f965 	bl	80035bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff faeb 	bl	80008cc <main>

080012f6 <LoopForever>:

LoopForever:
    b LoopForever
 80012f6:	e7fe      	b.n	80012f6 <LoopForever>
  ldr   r0, =_estack
 80012f8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80012fc:	08003680 	.word	0x08003680
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001304:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001308:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 800130c:	2000018c 	.word	0x2000018c

08001310 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC1_IRQHandler>

08001312 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131e:	2003      	movs	r0, #3
 8001320:	f000 f80e 	bl	8001340 <HAL_InitTick>
 8001324:	1e03      	subs	r3, r0, #0
 8001326:	d003      	beq.n	8001330 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e001      	b.n	8001334 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001330:	f7ff fcfe 	bl	8000d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	781b      	ldrb	r3, [r3, #0]
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001348:	230f      	movs	r3, #15
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_InitTick+0x88>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d02b      	beq.n	80013b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_InitTick+0x8c>)
 800135a:	681c      	ldr	r4, [r3, #0]
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_InitTick+0x88>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	0019      	movs	r1, r3
 8001362:	23fa      	movs	r3, #250	; 0xfa
 8001364:	0098      	lsls	r0, r3, #2
 8001366:	f7fe fecf 	bl	8000108 <__udivsi3>
 800136a:	0003      	movs	r3, r0
 800136c:	0019      	movs	r1, r3
 800136e:	0020      	movs	r0, r4
 8001370:	f7fe feca 	bl	8000108 <__udivsi3>
 8001374:	0003      	movs	r3, r0
 8001376:	0018      	movs	r0, r3
 8001378:	f000 f913 	bl	80015a2 <HAL_SYSTICK_Config>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d112      	bne.n	80013a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d80a      	bhi.n	800139c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	2301      	movs	r3, #1
 800138a:	425b      	negs	r3, r3
 800138c:	2200      	movs	r2, #0
 800138e:	0018      	movs	r0, r3
 8001390:	f000 f8f2 	bl	8001578 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_InitTick+0x90>)
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e00d      	b.n	80013b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800139c:	230f      	movs	r3, #15
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e008      	b.n	80013b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013a6:	230f      	movs	r3, #15
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e003      	b.n	80013b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80013b8:	230f      	movs	r3, #15
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	781b      	ldrb	r3, [r3, #0]
}
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b005      	add	sp, #20
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	20000010 	.word	0x20000010
 80013cc:	20000004 	.word	0x20000004
 80013d0:	2000000c 	.word	0x2000000c

080013d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_IncTick+0x1c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	001a      	movs	r2, r3
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_IncTick+0x20>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	18d2      	adds	r2, r2, r3
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_IncTick+0x20>)
 80013e6:	601a      	str	r2, [r3, #0]
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	20000010 	.word	0x20000010
 80013f4:	20000188 	.word	0x20000188

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b02      	ldr	r3, [pc, #8]	; (8001408 <HAL_GetTick+0x10>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	20000188 	.word	0x20000188

0800140c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001414:	f7ff fff0 	bl	80013f8 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	d005      	beq.n	8001432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_Delay+0x44>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	001a      	movs	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	189b      	adds	r3, r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	f7ff ffe0 	bl	80013f8 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	429a      	cmp	r2, r3
 8001442:	d8f7      	bhi.n	8001434 <HAL_Delay+0x28>
  {
  }
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	20000010 	.word	0x20000010

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	0002      	movs	r2, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b7f      	cmp	r3, #127	; 0x7f
 8001468:	d828      	bhi.n	80014bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800146a:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <__NVIC_SetPriority+0xd4>)
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b25b      	sxtb	r3, r3
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	33c0      	adds	r3, #192	; 0xc0
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	589b      	ldr	r3, [r3, r2]
 800147a:	1dfa      	adds	r2, r7, #7
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	0011      	movs	r1, r2
 8001480:	2203      	movs	r2, #3
 8001482:	400a      	ands	r2, r1
 8001484:	00d2      	lsls	r2, r2, #3
 8001486:	21ff      	movs	r1, #255	; 0xff
 8001488:	4091      	lsls	r1, r2
 800148a:	000a      	movs	r2, r1
 800148c:	43d2      	mvns	r2, r2
 800148e:	401a      	ands	r2, r3
 8001490:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	019b      	lsls	r3, r3, #6
 8001496:	22ff      	movs	r2, #255	; 0xff
 8001498:	401a      	ands	r2, r3
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	0018      	movs	r0, r3
 80014a0:	2303      	movs	r3, #3
 80014a2:	4003      	ands	r3, r0
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a8:	481f      	ldr	r0, [pc, #124]	; (8001528 <__NVIC_SetPriority+0xd4>)
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	430a      	orrs	r2, r1
 80014b4:	33c0      	adds	r3, #192	; 0xc0
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014ba:	e031      	b.n	8001520 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <__NVIC_SetPriority+0xd8>)
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	0019      	movs	r1, r3
 80014c4:	230f      	movs	r3, #15
 80014c6:	400b      	ands	r3, r1
 80014c8:	3b08      	subs	r3, #8
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3306      	adds	r3, #6
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	18d3      	adds	r3, r2, r3
 80014d2:	3304      	adds	r3, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	1dfa      	adds	r2, r7, #7
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	0011      	movs	r1, r2
 80014dc:	2203      	movs	r2, #3
 80014de:	400a      	ands	r2, r1
 80014e0:	00d2      	lsls	r2, r2, #3
 80014e2:	21ff      	movs	r1, #255	; 0xff
 80014e4:	4091      	lsls	r1, r2
 80014e6:	000a      	movs	r2, r1
 80014e8:	43d2      	mvns	r2, r2
 80014ea:	401a      	ands	r2, r3
 80014ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	019b      	lsls	r3, r3, #6
 80014f2:	22ff      	movs	r2, #255	; 0xff
 80014f4:	401a      	ands	r2, r3
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	0018      	movs	r0, r3
 80014fc:	2303      	movs	r3, #3
 80014fe:	4003      	ands	r3, r0
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <__NVIC_SetPriority+0xd8>)
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	001c      	movs	r4, r3
 800150c:	230f      	movs	r3, #15
 800150e:	4023      	ands	r3, r4
 8001510:	3b08      	subs	r3, #8
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	430a      	orrs	r2, r1
 8001516:	3306      	adds	r3, #6
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	18c3      	adds	r3, r0, r3
 800151c:	3304      	adds	r3, #4
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b003      	add	sp, #12
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	045b      	lsls	r3, r3, #17
 8001540:	429a      	cmp	r2, r3
 8001542:	d301      	bcc.n	8001548 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001544:	2301      	movs	r3, #1
 8001546:	e010      	b.n	800156a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <SysTick_Config+0x44>)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	3a01      	subs	r2, #1
 800154e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001550:	2301      	movs	r3, #1
 8001552:	425b      	negs	r3, r3
 8001554:	2103      	movs	r1, #3
 8001556:	0018      	movs	r0, r3
 8001558:	f7ff ff7c 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x44>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x44>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	210f      	movs	r1, #15
 8001584:	187b      	adds	r3, r7, r1
 8001586:	1c02      	adds	r2, r0, #0
 8001588:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	187b      	adds	r3, r7, r1
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b25b      	sxtb	r3, r3
 8001592:	0011      	movs	r1, r2
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff ff5d 	bl	8001454 <__NVIC_SetPriority>
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b004      	add	sp, #16
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff ffbf 	bl	8001530 <SysTick_Config>
 80015b2:	0003      	movs	r3, r0
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015ca:	e14d      	b.n	8001868 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2101      	movs	r1, #1
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4091      	lsls	r1, r2
 80015d6:	000a      	movs	r2, r1
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d100      	bne.n	80015e4 <HAL_GPIO_Init+0x28>
 80015e2:	e13e      	b.n	8001862 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x38>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b12      	cmp	r3, #18
 80015f2:	d125      	bne.n	8001640 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	58d3      	ldr	r3, [r2, r3]
 8001600:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2207      	movs	r2, #7
 8001606:	4013      	ands	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	409a      	lsls	r2, r3
 800160e:	0013      	movs	r3, r2
 8001610:	43da      	mvns	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	4013      	ands	r3, r2
 8001616:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	220f      	movs	r2, #15
 800161e:	401a      	ands	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2107      	movs	r1, #7
 8001624:	400b      	ands	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	6979      	ldr	r1, [r7, #20]
 800163e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	409a      	lsls	r2, r3
 800164e:	0013      	movs	r3, r2
 8001650:	43da      	mvns	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	4013      	ands	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2203      	movs	r2, #3
 800165e:	401a      	ands	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	409a      	lsls	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	4313      	orrs	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d00b      	beq.n	8001694 <HAL_GPIO_Init+0xd8>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d007      	beq.n	8001694 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001688:	2b11      	cmp	r3, #17
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b12      	cmp	r3, #18
 8001692:	d130      	bne.n	80016f6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	409a      	lsls	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	43da      	mvns	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4013      	ands	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	409a      	lsls	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ca:	2201      	movs	r2, #1
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	43da      	mvns	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4013      	ands	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	2201      	movs	r2, #1
 80016e2:	401a      	ands	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d017      	beq.n	800172e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	409a      	lsls	r2, r3
 800170c:	0013      	movs	r3, r2
 800170e:	43da      	mvns	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	4013      	ands	r3, r2
 8001714:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	055b      	lsls	r3, r3, #21
 8001736:	4013      	ands	r3, r2
 8001738:	d100      	bne.n	800173c <HAL_GPIO_Init+0x180>
 800173a:	e092      	b.n	8001862 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800173c:	4a50      	ldr	r2, [pc, #320]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3318      	adds	r3, #24
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	589b      	ldr	r3, [r3, r2]
 8001748:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2203      	movs	r2, #3
 800174e:	4013      	ands	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	220f      	movs	r2, #15
 8001754:	409a      	lsls	r2, r3
 8001756:	0013      	movs	r3, r2
 8001758:	43da      	mvns	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4013      	ands	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	23a0      	movs	r3, #160	; 0xa0
 8001764:	05db      	lsls	r3, r3, #23
 8001766:	429a      	cmp	r2, r3
 8001768:	d013      	beq.n	8001792 <HAL_GPIO_Init+0x1d6>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a45      	ldr	r2, [pc, #276]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d00d      	beq.n	800178e <HAL_GPIO_Init+0x1d2>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a44      	ldr	r2, [pc, #272]	; (8001888 <HAL_GPIO_Init+0x2cc>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d007      	beq.n	800178a <HAL_GPIO_Init+0x1ce>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a43      	ldr	r2, [pc, #268]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d101      	bne.n	8001786 <HAL_GPIO_Init+0x1ca>
 8001782:	2305      	movs	r3, #5
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x1d8>
 8001786:	2306      	movs	r3, #6
 8001788:	e004      	b.n	8001794 <HAL_GPIO_Init+0x1d8>
 800178a:	2302      	movs	r3, #2
 800178c:	e002      	b.n	8001794 <HAL_GPIO_Init+0x1d8>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x1d8>
 8001792:	2300      	movs	r3, #0
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	2103      	movs	r1, #3
 8001798:	400a      	ands	r2, r1
 800179a:	00d2      	lsls	r2, r2, #3
 800179c:	4093      	lsls	r3, r2
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80017a4:	4936      	ldr	r1, [pc, #216]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3318      	adds	r3, #24
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80017b2:	4a33      	ldr	r2, [pc, #204]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	58d3      	ldr	r3, [r2, r3]
 80017b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43da      	mvns	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	4013      	ands	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	025b      	lsls	r3, r3, #9
 80017cc:	4013      	ands	r3, r2
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80017d8:	4929      	ldr	r1, [pc, #164]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 80017e2:	2384      	movs	r3, #132	; 0x84
 80017e4:	58d3      	ldr	r3, [r2, r3]
 80017e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43da      	mvns	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	4013      	ands	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	4013      	ands	r3, r2
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001806:	491e      	ldr	r1, [pc, #120]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 8001808:	2284      	movs	r2, #132	; 0x84
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43da      	mvns	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	4013      	ands	r3, r2
 800181c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	035b      	lsls	r3, r3, #13
 8001826:	4013      	ands	r3, r2
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43da      	mvns	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4013      	ands	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	039b      	lsls	r3, r3, #14
 8001850:	4013      	ands	r3, r2
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	3301      	adds	r3, #1
 8001866:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	40da      	lsrs	r2, r3
 8001870:	1e13      	subs	r3, r2, #0
 8001872:	d000      	beq.n	8001876 <HAL_GPIO_Init+0x2ba>
 8001874:	e6aa      	b.n	80015cc <HAL_GPIO_Init+0x10>
  }
}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b006      	add	sp, #24
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021800 	.word	0x40021800
 8001884:	50000400 	.word	0x50000400
 8001888:	50000800 	.word	0x50000800
 800188c:	50001400 	.word	0x50001400

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	0008      	movs	r0, r1
 800189a:	0011      	movs	r1, r2
 800189c:	1cbb      	adds	r3, r7, #2
 800189e:	1c02      	adds	r2, r0, #0
 80018a0:	801a      	strh	r2, [r3, #0]
 80018a2:	1c7b      	adds	r3, r7, #1
 80018a4:	1c0a      	adds	r2, r1, #0
 80018a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a8:	1c7b      	adds	r3, r7, #1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018b0:	1cbb      	adds	r3, r7, #2
 80018b2:	881a      	ldrh	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b8:	e003      	b.n	80018c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ba:	1cbb      	adds	r3, r7, #2
 80018bc:	881a      	ldrh	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e08f      	b.n	80019fe <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2241      	movs	r2, #65	; 0x41
 80018e2:	5c9b      	ldrb	r3, [r3, r2]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d107      	bne.n	80018fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2240      	movs	r2, #64	; 0x40
 80018ee:	2100      	movs	r1, #0
 80018f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff fa3f 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2241      	movs	r2, #65	; 0x41
 80018fe:	2124      	movs	r1, #36	; 0x24
 8001900:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	438a      	bics	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	493b      	ldr	r1, [pc, #236]	; (8001a08 <HAL_I2C_Init+0x13c>)
 800191c:	400a      	ands	r2, r1
 800191e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4938      	ldr	r1, [pc, #224]	; (8001a0c <HAL_I2C_Init+0x140>)
 800192c:	400a      	ands	r2, r1
 800192e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d108      	bne.n	800194a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0209      	lsls	r1, r1, #8
 8001944:	430a      	orrs	r2, r1
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	e007      	b.n	800195a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2184      	movs	r1, #132	; 0x84
 8001954:	0209      	lsls	r1, r1, #8
 8001956:	430a      	orrs	r2, r1
 8001958:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d109      	bne.n	8001976 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	0109      	lsls	r1, r1, #4
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	e007      	b.n	8001986 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4923      	ldr	r1, [pc, #140]	; (8001a10 <HAL_I2C_Init+0x144>)
 8001982:	400a      	ands	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4920      	ldr	r1, [pc, #128]	; (8001a14 <HAL_I2C_Init+0x148>)
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	491a      	ldr	r1, [pc, #104]	; (8001a0c <HAL_I2C_Init+0x140>)
 80019a2:	400a      	ands	r2, r1
 80019a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69d9      	ldr	r1, [r3, #28]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1a      	ldr	r2, [r3, #32]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2101      	movs	r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2241      	movs	r2, #65	; 0x41
 80019ea:	2120      	movs	r1, #32
 80019ec:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2242      	movs	r2, #66	; 0x42
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b002      	add	sp, #8
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	f0ffffff 	.word	0xf0ffffff
 8001a0c:	ffff7fff 	.word	0xffff7fff
 8001a10:	fffff7ff 	.word	0xfffff7ff
 8001a14:	02008000 	.word	0x02008000

08001a18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	000c      	movs	r4, r1
 8001a22:	0010      	movs	r0, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	230a      	movs	r3, #10
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	1c22      	adds	r2, r4, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
 8001a2e:	2308      	movs	r3, #8
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	1c02      	adds	r2, r0, #0
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	1dbb      	adds	r3, r7, #6
 8001a38:	1c0a      	adds	r2, r1, #0
 8001a3a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2241      	movs	r2, #65	; 0x41
 8001a40:	5c9b      	ldrb	r3, [r3, r2]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b20      	cmp	r3, #32
 8001a46:	d000      	beq.n	8001a4a <HAL_I2C_Mem_Write+0x32>
 8001a48:	e10c      	b.n	8001c64 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d004      	beq.n	8001a5a <HAL_I2C_Mem_Write+0x42>
 8001a50:	232c      	movs	r3, #44	; 0x2c
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	0092      	lsls	r2, r2, #2
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0ff      	b.n	8001c66 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2240      	movs	r2, #64	; 0x40
 8001a6a:	5c9b      	ldrb	r3, [r3, r2]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_I2C_Mem_Write+0x5c>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e0f8      	b.n	8001c66 <HAL_I2C_Mem_Write+0x24e>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2240      	movs	r2, #64	; 0x40
 8001a78:	2101      	movs	r1, #1
 8001a7a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a7c:	f7ff fcbc 	bl	80013f8 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	0219      	lsls	r1, r3, #8
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2319      	movs	r3, #25
 8001a90:	2201      	movs	r2, #1
 8001a92:	f000 fb0b 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0e3      	b.n	8001c66 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2241      	movs	r2, #65	; 0x41
 8001aa2:	2121      	movs	r1, #33	; 0x21
 8001aa4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2242      	movs	r2, #66	; 0x42
 8001aaa:	2140      	movs	r1, #64	; 0x40
 8001aac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	222c      	movs	r2, #44	; 0x2c
 8001abe:	18ba      	adds	r2, r7, r2
 8001ac0:	8812      	ldrh	r2, [r2, #0]
 8001ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aca:	1dbb      	adds	r3, r7, #6
 8001acc:	881c      	ldrh	r4, [r3, #0]
 8001ace:	2308      	movs	r3, #8
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	8819      	ldrh	r1, [r3, #0]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	0023      	movs	r3, r4
 8001ae6:	f000 f9f9 	bl	8001edc <I2C_RequestMemoryWrite>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d005      	beq.n	8001afa <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2240      	movs	r2, #64	; 0x40
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0b5      	b.n	8001c66 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2bff      	cmp	r3, #255	; 0xff
 8001b02:	d911      	bls.n	8001b28 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	22ff      	movs	r2, #255	; 0xff
 8001b08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	045c      	lsls	r4, r3, #17
 8001b14:	230a      	movs	r3, #10
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	8819      	ldrh	r1, [r3, #0]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	0023      	movs	r3, r4
 8001b22:	f000 fc9b 	bl	800245c <I2C_TransferConfig>
 8001b26:	e012      	b.n	8001b4e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	049c      	lsls	r4, r3, #18
 8001b3c:	230a      	movs	r3, #10
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	8819      	ldrh	r1, [r3, #0]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	0023      	movs	r3, r4
 8001b4a:	f000 fc87 	bl	800245c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f000 faf7 	bl	8002148 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b5a:	1e03      	subs	r3, r0, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e081      	b.n	8001c66 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d03a      	beq.n	8001c12 <HAL_I2C_Mem_Write+0x1fa>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d136      	bne.n	8001c12 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	0013      	movs	r3, r2
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	f000 fa7b 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e053      	b.n	8001c66 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2bff      	cmp	r3, #255	; 0xff
 8001bc6:	d911      	bls.n	8001bec <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	22ff      	movs	r2, #255	; 0xff
 8001bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	045c      	lsls	r4, r3, #17
 8001bd8:	230a      	movs	r3, #10
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	8819      	ldrh	r1, [r3, #0]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	0023      	movs	r3, r4
 8001be6:	f000 fc39 	bl	800245c <I2C_TransferConfig>
 8001bea:	e012      	b.n	8001c12 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	049c      	lsls	r4, r3, #18
 8001c00:	230a      	movs	r3, #10
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	8819      	ldrh	r1, [r3, #0]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	0023      	movs	r3, r4
 8001c0e:	f000 fc25 	bl	800245c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d198      	bne.n	8001b4e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 fad6 	bl	80021d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e01a      	b.n	8001c66 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2220      	movs	r2, #32
 8001c36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	490b      	ldr	r1, [pc, #44]	; (8001c70 <HAL_I2C_Mem_Write+0x258>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2241      	movs	r2, #65	; 0x41
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2242      	movs	r2, #66	; 0x42
 8001c54:	2100      	movs	r1, #0
 8001c56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2240      	movs	r2, #64	; 0x40
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e000      	b.n	8001c66 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
  }
}
 8001c66:	0018      	movs	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b007      	add	sp, #28
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	fe00e800 	.word	0xfe00e800

08001c74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	000c      	movs	r4, r1
 8001c7e:	0010      	movs	r0, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	230a      	movs	r3, #10
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	1c22      	adds	r2, r4, #0
 8001c88:	801a      	strh	r2, [r3, #0]
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	1c02      	adds	r2, r0, #0
 8001c90:	801a      	strh	r2, [r3, #0]
 8001c92:	1dbb      	adds	r3, r7, #6
 8001c94:	1c0a      	adds	r2, r1, #0
 8001c96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2241      	movs	r2, #65	; 0x41
 8001c9c:	5c9b      	ldrb	r3, [r3, r2]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d000      	beq.n	8001ca6 <HAL_I2C_Mem_Read+0x32>
 8001ca4:	e110      	b.n	8001ec8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <HAL_I2C_Mem_Read+0x42>
 8001cac:	232c      	movs	r3, #44	; 0x2c
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d105      	bne.n	8001cc2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e103      	b.n	8001eca <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2240      	movs	r2, #64	; 0x40
 8001cc6:	5c9b      	ldrb	r3, [r3, r2]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2C_Mem_Read+0x5c>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e0fc      	b.n	8001eca <HAL_I2C_Mem_Read+0x256>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cd8:	f7ff fb8e 	bl	80013f8 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	0219      	lsls	r1, r3, #8
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2319      	movs	r3, #25
 8001cec:	2201      	movs	r2, #1
 8001cee:	f000 f9dd 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001cf2:	1e03      	subs	r3, r0, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0e7      	b.n	8001eca <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2241      	movs	r2, #65	; 0x41
 8001cfe:	2122      	movs	r1, #34	; 0x22
 8001d00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2242      	movs	r2, #66	; 0x42
 8001d06:	2140      	movs	r1, #64	; 0x40
 8001d08:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	222c      	movs	r2, #44	; 0x2c
 8001d1a:	18ba      	adds	r2, r7, r2
 8001d1c:	8812      	ldrh	r2, [r2, #0]
 8001d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d26:	1dbb      	adds	r3, r7, #6
 8001d28:	881c      	ldrh	r4, [r3, #0]
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	881a      	ldrh	r2, [r3, #0]
 8001d30:	230a      	movs	r3, #10
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	8819      	ldrh	r1, [r3, #0]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	0023      	movs	r3, r4
 8001d42:	f000 f92f 	bl	8001fa4 <I2C_RequestMemoryRead>
 8001d46:	1e03      	subs	r3, r0, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2240      	movs	r2, #64	; 0x40
 8001d4e:	2100      	movs	r1, #0
 8001d50:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0b9      	b.n	8001eca <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2bff      	cmp	r3, #255	; 0xff
 8001d5e:	d911      	bls.n	8001d84 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	22ff      	movs	r2, #255	; 0xff
 8001d64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	045c      	lsls	r4, r3, #17
 8001d70:	230a      	movs	r3, #10
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	8819      	ldrh	r1, [r3, #0]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <HAL_I2C_Mem_Read+0x260>)
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	0023      	movs	r3, r4
 8001d7e:	f000 fb6d 	bl	800245c <I2C_TransferConfig>
 8001d82:	e012      	b.n	8001daa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	049c      	lsls	r4, r3, #18
 8001d98:	230a      	movs	r3, #10
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	8819      	ldrh	r1, [r3, #0]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_I2C_Mem_Read+0x260>)
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	0023      	movs	r3, r4
 8001da6:	f000 fb59 	bl	800245c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	0013      	movs	r3, r2
 8001db4:	2200      	movs	r2, #0
 8001db6:	2104      	movs	r1, #4
 8001db8:	f000 f978 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e082      	b.n	8001eca <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03a      	beq.n	8001e76 <HAL_I2C_Mem_Read+0x202>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d136      	bne.n	8001e76 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	0013      	movs	r3, r2
 8001e12:	2200      	movs	r2, #0
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	f000 f949 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001e1a:	1e03      	subs	r3, r0, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e053      	b.n	8001eca <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2bff      	cmp	r3, #255	; 0xff
 8001e2a:	d911      	bls.n	8001e50 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	22ff      	movs	r2, #255	; 0xff
 8001e30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	045c      	lsls	r4, r3, #17
 8001e3c:	230a      	movs	r3, #10
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	8819      	ldrh	r1, [r3, #0]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	2300      	movs	r3, #0
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	0023      	movs	r3, r4
 8001e4a:	f000 fb07 	bl	800245c <I2C_TransferConfig>
 8001e4e:	e012      	b.n	8001e76 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	049c      	lsls	r4, r3, #18
 8001e64:	230a      	movs	r3, #10
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	8819      	ldrh	r1, [r3, #0]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	0023      	movs	r3, r4
 8001e72:	f000 faf3 	bl	800245c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d194      	bne.n	8001daa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 f9a4 	bl	80021d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e01a      	b.n	8001eca <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <HAL_I2C_Mem_Read+0x264>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2241      	movs	r2, #65	; 0x41
 8001eb0:	2120      	movs	r1, #32
 8001eb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2242      	movs	r2, #66	; 0x42
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e000      	b.n	8001eca <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
  }
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b007      	add	sp, #28
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	80002400 	.word	0x80002400
 8001ed8:	fe00e800 	.word	0xfe00e800

08001edc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	000c      	movs	r4, r1
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	0019      	movs	r1, r3
 8001eea:	250a      	movs	r5, #10
 8001eec:	197b      	adds	r3, r7, r5
 8001eee:	1c22      	adds	r2, r4, #0
 8001ef0:	801a      	strh	r2, [r3, #0]
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	1c02      	adds	r2, r0, #0
 8001ef8:	801a      	strh	r2, [r3, #0]
 8001efa:	1dbb      	adds	r3, r7, #6
 8001efc:	1c0a      	adds	r2, r1, #0
 8001efe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f00:	1dbb      	adds	r3, r7, #6
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	045c      	lsls	r4, r3, #17
 8001f0a:	197b      	adds	r3, r7, r5
 8001f0c:	8819      	ldrh	r1, [r3, #0]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <I2C_RequestMemoryWrite+0xc4>)
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	0023      	movs	r3, r4
 8001f16:	f000 faa1 	bl	800245c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	6a39      	ldr	r1, [r7, #32]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f000 f911 	bl	8002148 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f26:	1e03      	subs	r3, r0, #0
 8001f28:	d001      	beq.n	8001f2e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e033      	b.n	8001f96 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f2e:	1dbb      	adds	r3, r7, #6
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d107      	bne.n	8001f46 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f36:	2308      	movs	r3, #8
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
 8001f44:	e019      	b.n	8001f7a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f46:	2308      	movs	r3, #8
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5a:	6a39      	ldr	r1, [r7, #32]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 f8f2 	bl	8002148 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f64:	1e03      	subs	r3, r0, #0
 8001f66:	d001      	beq.n	8001f6c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e014      	b.n	8001f96 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f7a:	6a3a      	ldr	r2, [r7, #32]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	0013      	movs	r3, r2
 8001f84:	2200      	movs	r2, #0
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	f000 f890 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	1e03      	subs	r3, r0, #0
 8001f8e:	d001      	beq.n	8001f94 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b004      	add	sp, #16
 8001f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	80002000 	.word	0x80002000

08001fa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001fa4:	b5b0      	push	{r4, r5, r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	000c      	movs	r4, r1
 8001fae:	0010      	movs	r0, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	250a      	movs	r5, #10
 8001fb4:	197b      	adds	r3, r7, r5
 8001fb6:	1c22      	adds	r2, r4, #0
 8001fb8:	801a      	strh	r2, [r3, #0]
 8001fba:	2308      	movs	r3, #8
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	1c02      	adds	r2, r0, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	1dbb      	adds	r3, r7, #6
 8001fc4:	1c0a      	adds	r2, r1, #0
 8001fc6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001fc8:	1dbb      	adds	r3, r7, #6
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	197b      	adds	r3, r7, r5
 8001fd0:	8819      	ldrh	r1, [r3, #0]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <I2C_RequestMemoryRead+0xc0>)
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f000 fa3f 	bl	800245c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f000 f8af 	bl	8002148 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d001      	beq.n	8001ff2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e033      	b.n	800205a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ff2:	1dbb      	adds	r3, r7, #6
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ffa:	2308      	movs	r3, #8
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
 8002008:	e019      	b.n	800203e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800200a:	2308      	movs	r3, #8
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	b29b      	uxth	r3, r3
 8002014:	b2da      	uxtb	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201e:	6a39      	ldr	r1, [r7, #32]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	0018      	movs	r0, r3
 8002024:	f000 f890 	bl	8002148 <I2C_WaitOnTXISFlagUntilTimeout>
 8002028:	1e03      	subs	r3, r0, #0
 800202a:	d001      	beq.n	8002030 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e014      	b.n	800205a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002030:	2308      	movs	r3, #8
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800203e:	6a3a      	ldr	r2, [r7, #32]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	0013      	movs	r3, r2
 8002048:	2200      	movs	r2, #0
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	f000 f82e 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d001      	beq.n	8002058 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bdb0      	pop	{r4, r5, r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	80002000 	.word	0x80002000

08002068 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2202      	movs	r2, #2
 8002078:	4013      	ands	r3, r2
 800207a:	2b02      	cmp	r3, #2
 800207c:	d103      	bne.n	8002086 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	2b01      	cmp	r3, #1
 8002092:	d007      	beq.n	80020a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	619a      	str	r2, [r3, #24]
  }
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020bc:	e030      	b.n	8002120 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	d02d      	beq.n	8002120 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7ff f998 	bl	80013f8 <HAL_GetTick>
 80020c8:	0002      	movs	r2, r0
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d302      	bcc.n	80020da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d122      	bne.n	8002120 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	4013      	ands	r3, r2
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	425a      	negs	r2, r3
 80020ea:	4153      	adcs	r3, r2
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	001a      	movs	r2, r3
 80020f0:	1dfb      	adds	r3, r7, #7
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d113      	bne.n	8002120 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	2220      	movs	r2, #32
 80020fe:	431a      	orrs	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2241      	movs	r2, #65	; 0x41
 8002108:	2120      	movs	r1, #32
 800210a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2242      	movs	r2, #66	; 0x42
 8002110:	2100      	movs	r1, #0
 8002112:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	2100      	movs	r1, #0
 800211a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e00f      	b.n	8002140 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4013      	ands	r3, r2
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	425a      	negs	r2, r3
 8002130:	4153      	adcs	r3, r2
 8002132:	b2db      	uxtb	r3, r3
 8002134:	001a      	movs	r2, r3
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d0bf      	beq.n	80020be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b004      	add	sp, #16
 8002146:	bd80      	pop	{r7, pc}

08002148 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002154:	e032      	b.n	80021bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	0018      	movs	r0, r3
 800215e:	f000 f87d 	bl	800225c <I2C_IsErrorOccurred>
 8002162:	1e03      	subs	r3, r0, #0
 8002164:	d001      	beq.n	800216a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e030      	b.n	80021cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3301      	adds	r3, #1
 800216e:	d025      	beq.n	80021bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002170:	f7ff f942 	bl	80013f8 <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	429a      	cmp	r2, r3
 800217e:	d302      	bcc.n	8002186 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d11a      	bne.n	80021bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2202      	movs	r2, #2
 800218e:	4013      	ands	r3, r2
 8002190:	2b02      	cmp	r3, #2
 8002192:	d013      	beq.n	80021bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	2220      	movs	r2, #32
 800219a:	431a      	orrs	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2241      	movs	r2, #65	; 0x41
 80021a4:	2120      	movs	r1, #32
 80021a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2242      	movs	r2, #66	; 0x42
 80021ac:	2100      	movs	r1, #0
 80021ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	2100      	movs	r1, #0
 80021b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e007      	b.n	80021cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d1c5      	bne.n	8002156 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b004      	add	sp, #16
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021e0:	e02f      	b.n	8002242 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 f837 	bl	800225c <I2C_IsErrorOccurred>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d001      	beq.n	80021f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e02d      	b.n	8002252 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f6:	f7ff f8ff 	bl	80013f8 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	429a      	cmp	r2, r3
 8002204:	d302      	bcc.n	800220c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d11a      	bne.n	8002242 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2220      	movs	r2, #32
 8002214:	4013      	ands	r3, r2
 8002216:	2b20      	cmp	r3, #32
 8002218:	d013      	beq.n	8002242 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	2220      	movs	r2, #32
 8002220:	431a      	orrs	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2241      	movs	r2, #65	; 0x41
 800222a:	2120      	movs	r1, #32
 800222c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2242      	movs	r2, #66	; 0x42
 8002232:	2100      	movs	r1, #0
 8002234:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2240      	movs	r2, #64	; 0x40
 800223a:	2100      	movs	r1, #0
 800223c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e007      	b.n	8002252 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2220      	movs	r2, #32
 800224a:	4013      	ands	r3, r2
 800224c:	2b20      	cmp	r3, #32
 800224e:	d1c8      	bne.n	80021e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b004      	add	sp, #16
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b08b      	sub	sp, #44	; 0x2c
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002268:	2327      	movs	r3, #39	; 0x27
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2210      	movs	r2, #16
 8002284:	4013      	ands	r3, r2
 8002286:	d100      	bne.n	800228a <I2C_IsErrorOccurred+0x2e>
 8002288:	e082      	b.n	8002390 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2210      	movs	r2, #16
 8002290:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002292:	e060      	b.n	8002356 <I2C_IsErrorOccurred+0xfa>
 8002294:	2427      	movs	r4, #39	; 0x27
 8002296:	193b      	adds	r3, r7, r4
 8002298:	193a      	adds	r2, r7, r4
 800229a:	7812      	ldrb	r2, [r2, #0]
 800229c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3301      	adds	r3, #1
 80022a2:	d058      	beq.n	8002356 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022a4:	f7ff f8a8 	bl	80013f8 <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d306      	bcc.n	80022c2 <I2C_IsErrorOccurred+0x66>
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	193a      	adds	r2, r7, r4
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d149      	bne.n	8002356 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	01db      	lsls	r3, r3, #7
 80022cc:	4013      	ands	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022d0:	2013      	movs	r0, #19
 80022d2:	183b      	adds	r3, r7, r0
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	2142      	movs	r1, #66	; 0x42
 80022d8:	5c52      	ldrb	r2, [r2, r1]
 80022da:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	401a      	ands	r2, r3
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d126      	bne.n	800233e <I2C_IsErrorOccurred+0xe2>
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	01db      	lsls	r3, r3, #7
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d021      	beq.n	800233e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80022fa:	183b      	adds	r3, r7, r0
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d01d      	beq.n	800233e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	01c9      	lsls	r1, r1, #7
 8002310:	430a      	orrs	r2, r1
 8002312:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002314:	f7ff f870 	bl	80013f8 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800231c:	e00f      	b.n	800233e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800231e:	f7ff f86b 	bl	80013f8 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b19      	cmp	r3, #25
 800232a:	d908      	bls.n	800233e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	2220      	movs	r2, #32
 8002330:	4313      	orrs	r3, r2
 8002332:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002334:	2327      	movs	r3, #39	; 0x27
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]

              break;
 800233c:	e00b      	b.n	8002356 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2220      	movs	r2, #32
 8002346:	4013      	ands	r3, r2
 8002348:	2127      	movs	r1, #39	; 0x27
 800234a:	187a      	adds	r2, r7, r1
 800234c:	1879      	adds	r1, r7, r1
 800234e:	7809      	ldrb	r1, [r1, #0]
 8002350:	7011      	strb	r1, [r2, #0]
 8002352:	2b20      	cmp	r3, #32
 8002354:	d1e3      	bne.n	800231e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2220      	movs	r2, #32
 800235e:	4013      	ands	r3, r2
 8002360:	2b20      	cmp	r3, #32
 8002362:	d004      	beq.n	800236e <I2C_IsErrorOccurred+0x112>
 8002364:	2327      	movs	r3, #39	; 0x27
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d092      	beq.n	8002294 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800236e:	2327      	movs	r3, #39	; 0x27
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2220      	movs	r2, #32
 800237e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2204      	movs	r2, #4
 8002384:	4313      	orrs	r3, r2
 8002386:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002388:	2327      	movs	r3, #39	; 0x27
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	d00c      	beq.n	80023bc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4313      	orrs	r3, r2
 80023a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	0052      	lsls	r2, r2, #1
 80023b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023b4:	2327      	movs	r3, #39	; 0x27
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4013      	ands	r3, r2
 80023c4:	d00c      	beq.n	80023e0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	2208      	movs	r2, #8
 80023ca:	4313      	orrs	r3, r2
 80023cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	00d2      	lsls	r2, r2, #3
 80023d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023d8:	2327      	movs	r3, #39	; 0x27
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4013      	ands	r3, r2
 80023e8:	d00c      	beq.n	8002404 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	2202      	movs	r2, #2
 80023ee:	4313      	orrs	r3, r2
 80023f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023fc:	2327      	movs	r3, #39	; 0x27
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002404:	2327      	movs	r3, #39	; 0x27
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01d      	beq.n	800244a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0018      	movs	r0, r3
 8002412:	f7ff fe29 	bl	8002068 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	490d      	ldr	r1, [pc, #52]	; (8002458 <I2C_IsErrorOccurred+0x1fc>)
 8002422:	400a      	ands	r2, r1
 8002424:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	431a      	orrs	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2241      	movs	r2, #65	; 0x41
 8002436:	2120      	movs	r1, #32
 8002438:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2242      	movs	r2, #66	; 0x42
 800243e:	2100      	movs	r1, #0
 8002440:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2240      	movs	r2, #64	; 0x40
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800244a:	2327      	movs	r3, #39	; 0x27
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	781b      	ldrb	r3, [r3, #0]
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b00b      	add	sp, #44	; 0x2c
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	fe00e800 	.word	0xfe00e800

0800245c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	0008      	movs	r0, r1
 8002466:	0011      	movs	r1, r2
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	240a      	movs	r4, #10
 800246c:	193b      	adds	r3, r7, r4
 800246e:	1c02      	adds	r2, r0, #0
 8002470:	801a      	strh	r2, [r3, #0]
 8002472:	2009      	movs	r0, #9
 8002474:	183b      	adds	r3, r7, r0
 8002476:	1c0a      	adds	r2, r1, #0
 8002478:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800247a:	193b      	adds	r3, r7, r4
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	059b      	lsls	r3, r3, #22
 8002480:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002482:	183b      	adds	r3, r7, r0
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	0419      	lsls	r1, r3, #16
 8002488:	23ff      	movs	r3, #255	; 0xff
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800248e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	4313      	orrs	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a6:	0d51      	lsrs	r1, r2, #21
 80024a8:	2280      	movs	r2, #128	; 0x80
 80024aa:	00d2      	lsls	r2, r2, #3
 80024ac:	400a      	ands	r2, r1
 80024ae:	4907      	ldr	r1, [pc, #28]	; (80024cc <I2C_TransferConfig+0x70>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	43d2      	mvns	r2, r2
 80024b4:	401a      	ands	r2, r3
 80024b6:	0011      	movs	r1, r2
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b007      	add	sp, #28
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	03ff63ff 	.word	0x03ff63ff

080024d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2241      	movs	r2, #65	; 0x41
 80024de:	5c9b      	ldrb	r3, [r3, r2]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d138      	bne.n	8002558 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2240      	movs	r2, #64	; 0x40
 80024ea:	5c9b      	ldrb	r3, [r3, r2]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e032      	b.n	800255a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2240      	movs	r2, #64	; 0x40
 80024f8:	2101      	movs	r1, #1
 80024fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2241      	movs	r2, #65	; 0x41
 8002500:	2124      	movs	r1, #36	; 0x24
 8002502:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2101      	movs	r1, #1
 8002510:	438a      	bics	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4911      	ldr	r1, [pc, #68]	; (8002564 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002520:	400a      	ands	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2101      	movs	r1, #1
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2241      	movs	r2, #65	; 0x41
 8002548:	2120      	movs	r1, #32
 800254a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2240      	movs	r2, #64	; 0x40
 8002550:	2100      	movs	r1, #0
 8002552:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e000      	b.n	800255a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
  }
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b002      	add	sp, #8
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	ffffefff 	.word	0xffffefff

08002568 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2241      	movs	r2, #65	; 0x41
 8002576:	5c9b      	ldrb	r3, [r3, r2]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b20      	cmp	r3, #32
 800257c:	d139      	bne.n	80025f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	5c9b      	ldrb	r3, [r3, r2]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002588:	2302      	movs	r3, #2
 800258a:	e033      	b.n	80025f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2240      	movs	r2, #64	; 0x40
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2241      	movs	r2, #65	; 0x41
 8002598:	2124      	movs	r1, #36	; 0x24
 800259a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2101      	movs	r1, #1
 80025a8:	438a      	bics	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a11      	ldr	r2, [pc, #68]	; (80025fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2101      	movs	r1, #1
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2241      	movs	r2, #65	; 0x41
 80025e2:	2120      	movs	r1, #32
 80025e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	2100      	movs	r1, #0
 80025ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e000      	b.n	80025f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
  }
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b004      	add	sp, #16
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	fffff0ff 	.word	0xfffff0ff

08002600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1d0      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2201      	movs	r2, #1
 8002618:	4013      	ands	r3, r2
 800261a:	d100      	bne.n	800261e <HAL_RCC_OscConfig+0x1e>
 800261c:	e069      	b.n	80026f2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261e:	4bc8      	ldr	r3, [pc, #800]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2238      	movs	r2, #56	; 0x38
 8002624:	4013      	ands	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b08      	cmp	r3, #8
 800262c:	d105      	bne.n	800263a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d15d      	bne.n	80026f2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e1bc      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	025b      	lsls	r3, r3, #9
 8002642:	429a      	cmp	r2, r3
 8002644:	d107      	bne.n	8002656 <HAL_RCC_OscConfig+0x56>
 8002646:	4bbe      	ldr	r3, [pc, #760]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4bbd      	ldr	r3, [pc, #756]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0249      	lsls	r1, r1, #9
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e020      	b.n	8002698 <HAL_RCC_OscConfig+0x98>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	23a0      	movs	r3, #160	; 0xa0
 800265c:	02db      	lsls	r3, r3, #11
 800265e:	429a      	cmp	r2, r3
 8002660:	d10e      	bne.n	8002680 <HAL_RCC_OscConfig+0x80>
 8002662:	4bb7      	ldr	r3, [pc, #732]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4bb6      	ldr	r3, [pc, #728]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	02c9      	lsls	r1, r1, #11
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	4bb3      	ldr	r3, [pc, #716]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4bb2      	ldr	r3, [pc, #712]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002676:	2180      	movs	r1, #128	; 0x80
 8002678:	0249      	lsls	r1, r1, #9
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0x98>
 8002680:	4baf      	ldr	r3, [pc, #700]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4bae      	ldr	r3, [pc, #696]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002686:	49af      	ldr	r1, [pc, #700]	; (8002944 <HAL_RCC_OscConfig+0x344>)
 8002688:	400a      	ands	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	4bac      	ldr	r3, [pc, #688]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4bab      	ldr	r3, [pc, #684]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002692:	49ad      	ldr	r1, [pc, #692]	; (8002948 <HAL_RCC_OscConfig+0x348>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d014      	beq.n	80026ca <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe feaa 	bl	80013f8 <HAL_GetTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80026aa:	f7fe fea5 	bl	80013f8 <HAL_GetTick>
 80026ae:	0002      	movs	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b64      	cmp	r3, #100	; 0x64
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e17b      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026bc:	4ba0      	ldr	r3, [pc, #640]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	4013      	ands	r3, r2
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0xaa>
 80026c8:	e013      	b.n	80026f2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fe95 	bl	80013f8 <HAL_GetTick>
 80026ce:	0003      	movs	r3, r0
 80026d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80026d4:	f7fe fe90 	bl	80013f8 <HAL_GetTick>
 80026d8:	0002      	movs	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e166      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e6:	4b96      	ldr	r3, [pc, #600]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	029b      	lsls	r3, r3, #10
 80026ee:	4013      	ands	r3, r2
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2202      	movs	r2, #2
 80026f8:	4013      	ands	r3, r2
 80026fa:	d100      	bne.n	80026fe <HAL_RCC_OscConfig+0xfe>
 80026fc:	e086      	b.n	800280c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fe:	4b90      	ldr	r3, [pc, #576]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2238      	movs	r2, #56	; 0x38
 8002704:	4013      	ands	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d12f      	bne.n	800276e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e14c      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b89      	ldr	r3, [pc, #548]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a8b      	ldr	r2, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x34c>)
 8002720:	4013      	ands	r3, r2
 8002722:	0019      	movs	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	021a      	lsls	r2, r3, #8
 800272a:	4b85      	ldr	r3, [pc, #532]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 800272c:	430a      	orrs	r2, r1
 800272e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d112      	bne.n	800275c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002736:	4b82      	ldr	r3, [pc, #520]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a85      	ldr	r2, [pc, #532]	; (8002950 <HAL_RCC_OscConfig+0x350>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	4b7e      	ldr	r3, [pc, #504]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800274a:	4b7d      	ldr	r3, [pc, #500]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	2207      	movs	r2, #7
 8002752:	4013      	ands	r3, r2
 8002754:	4a7f      	ldr	r2, [pc, #508]	; (8002954 <HAL_RCC_OscConfig+0x354>)
 8002756:	40da      	lsrs	r2, r3
 8002758:	4b7f      	ldr	r3, [pc, #508]	; (8002958 <HAL_RCC_OscConfig+0x358>)
 800275a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800275c:	4b7f      	ldr	r3, [pc, #508]	; (800295c <HAL_RCC_OscConfig+0x35c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0018      	movs	r0, r3
 8002762:	f7fe fded 	bl	8001340 <HAL_InitTick>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d050      	beq.n	800280c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e122      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d030      	beq.n	80027d8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a75      	ldr	r2, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x350>)
 800277c:	4013      	ands	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	4b6e      	ldr	r3, [pc, #440]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800278a:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b6c      	ldr	r3, [pc, #432]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	0049      	lsls	r1, r1, #1
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fe2e 	bl	80013f8 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80027a2:	f7fe fe29 	bl	80013f8 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0ff      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b4:	4b62      	ldr	r3, [pc, #392]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4013      	ands	r3, r2
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a61      	ldr	r2, [pc, #388]	; (800294c <HAL_RCC_OscConfig+0x34c>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	021a      	lsls	r2, r3, #8
 80027d0:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	e019      	b.n	800280c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80027d8:	4b59      	ldr	r3, [pc, #356]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b58      	ldr	r3, [pc, #352]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80027de:	4960      	ldr	r1, [pc, #384]	; (8002960 <HAL_RCC_OscConfig+0x360>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fe08 	bl	80013f8 <HAL_GetTick>
 80027e8:	0003      	movs	r3, r0
 80027ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80027ee:	f7fe fe03 	bl	80013f8 <HAL_GetTick>
 80027f2:	0002      	movs	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e0d9      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002800:	4b4f      	ldr	r3, [pc, #316]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4013      	ands	r3, r2
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2208      	movs	r2, #8
 8002812:	4013      	ands	r3, r2
 8002814:	d042      	beq.n	800289c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002816:	4b4a      	ldr	r3, [pc, #296]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2238      	movs	r2, #56	; 0x38
 800281c:	4013      	ands	r3, r2
 800281e:	2b18      	cmp	r3, #24
 8002820:	d105      	bne.n	800282e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d138      	bne.n	800289c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0c2      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d019      	beq.n	800286a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002836:	4b42      	ldr	r3, [pc, #264]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002838:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 800283c:	2101      	movs	r1, #1
 800283e:	430a      	orrs	r2, r1
 8002840:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7fe fdd9 	bl	80013f8 <HAL_GetTick>
 8002846:	0003      	movs	r3, r0
 8002848:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800284c:	f7fe fdd4 	bl	80013f8 <HAL_GetTick>
 8002850:	0002      	movs	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e0aa      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	2202      	movs	r2, #2
 8002864:	4013      	ands	r3, r2
 8002866:	d0f1      	beq.n	800284c <HAL_RCC_OscConfig+0x24c>
 8002868:	e018      	b.n	800289c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800286a:	4b35      	ldr	r3, [pc, #212]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 800286c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800286e:	4b34      	ldr	r3, [pc, #208]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002870:	2101      	movs	r1, #1
 8002872:	438a      	bics	r2, r1
 8002874:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fdbf 	bl	80013f8 <HAL_GetTick>
 800287a:	0003      	movs	r3, r0
 800287c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002880:	f7fe fdba 	bl	80013f8 <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e090      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002892:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	2202      	movs	r2, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d1f1      	bne.n	8002880 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2204      	movs	r2, #4
 80028a2:	4013      	ands	r3, r2
 80028a4:	d100      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2a8>
 80028a6:	e084      	b.n	80029b2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a8:	230f      	movs	r3, #15
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2238      	movs	r2, #56	; 0x38
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d000      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2c6>
 80028c4:	e075      	b.n	80029b2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e074      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d106      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2e0>
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80028d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028d6:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80028d8:	2101      	movs	r1, #1
 80028da:	430a      	orrs	r2, r1
 80028dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80028de:	e01c      	b.n	800291a <HAL_RCC_OscConfig+0x31a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x302>
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80028ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80028ee:	2104      	movs	r1, #4
 80028f0:	430a      	orrs	r2, r1
 80028f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80028f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 80028fa:	2101      	movs	r1, #1
 80028fc:	430a      	orrs	r2, r1
 80028fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0x31a>
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002904:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002908:	2101      	movs	r1, #1
 800290a:	438a      	bics	r2, r1
 800290c:	65da      	str	r2, [r3, #92]	; 0x5c
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002910:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 8002914:	2104      	movs	r1, #4
 8002916:	438a      	bics	r2, r1
 8002918:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d028      	beq.n	8002974 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe fd69 	bl	80013f8 <HAL_GetTick>
 8002926:	0003      	movs	r3, r0
 8002928:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe fd64 	bl	80013f8 <HAL_GetTick>
 8002930:	0002      	movs	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <HAL_RCC_OscConfig+0x364>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d915      	bls.n	8002968 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e039      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
 8002940:	40021000 	.word	0x40021000
 8002944:	fffeffff 	.word	0xfffeffff
 8002948:	fffbffff 	.word	0xfffbffff
 800294c:	ffff80ff 	.word	0xffff80ff
 8002950:	ffffc7ff 	.word	0xffffc7ff
 8002954:	02dc6c00 	.word	0x02dc6c00
 8002958:	20000004 	.word	0x20000004
 800295c:	2000000c 	.word	0x2000000c
 8002960:	fffffeff 	.word	0xfffffeff
 8002964:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_RCC_OscConfig+0x3bc>)
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	2202      	movs	r2, #2
 800296e:	4013      	ands	r3, r2
 8002970:	d0dc      	beq.n	800292c <HAL_RCC_OscConfig+0x32c>
 8002972:	e013      	b.n	800299c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fd40 	bl	80013f8 <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800297c:	e009      	b.n	8002992 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe fd3b 	bl	80013f8 <HAL_GetTick>
 8002982:	0002      	movs	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_RCC_OscConfig+0x3c0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e010      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_OscConfig+0x3bc>)
 8002994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800299c:	230f      	movs	r3, #15
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_OscConfig+0x3bc>)
 80029a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <HAL_RCC_OscConfig+0x3bc>)
 80029ac:	4905      	ldr	r1, [pc, #20]	; (80029c4 <HAL_RCC_OscConfig+0x3c4>)
 80029ae:	400a      	ands	r2, r1
 80029b0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b006      	add	sp, #24
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	00001388 	.word	0x00001388
 80029c4:	efffffff 	.word	0xefffffff

080029c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0e9      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b76      	ldr	r3, [pc, #472]	; (8002bb8 <HAL_RCC_ClockConfig+0x1f0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2207      	movs	r2, #7
 80029e2:	4013      	ands	r3, r2
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d91e      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b73      	ldr	r3, [pc, #460]	; (8002bb8 <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2207      	movs	r2, #7
 80029f0:	4393      	bics	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	4b70      	ldr	r3, [pc, #448]	; (8002bb8 <HAL_RCC_ClockConfig+0x1f0>)
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029fc:	f7fe fcfc 	bl	80013f8 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a04:	e009      	b.n	8002a1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a06:	f7fe fcf7 	bl	80013f8 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	4a6a      	ldr	r2, [pc, #424]	; (8002bbc <HAL_RCC_ClockConfig+0x1f4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e0ca      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a1a:	4b67      	ldr	r3, [pc, #412]	; (8002bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2207      	movs	r2, #7
 8002a20:	4013      	ands	r3, r2
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d017      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2204      	movs	r2, #4
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a3c:	4b60      	ldr	r3, [pc, #384]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a60      	ldr	r2, [pc, #384]	; (8002bc4 <HAL_RCC_ClockConfig+0x1fc>)
 8002a42:	401a      	ands	r2, r3
 8002a44:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a46:	21b0      	movs	r1, #176	; 0xb0
 8002a48:	0109      	lsls	r1, r1, #4
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4e:	4b5c      	ldr	r3, [pc, #368]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4a5d      	ldr	r2, [pc, #372]	; (8002bc8 <HAL_RCC_ClockConfig+0x200>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	4b58      	ldr	r3, [pc, #352]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d055      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002a6c:	4b54      	ldr	r3, [pc, #336]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	221c      	movs	r2, #28
 8002a72:	4393      	bics	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a88:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	029b      	lsls	r3, r3, #10
 8002a90:	4013      	ands	r3, r2
 8002a92:	d11f      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e08b      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa0:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d113      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e07f      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002ab8:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abc:	2202      	movs	r2, #2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d108      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e074      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ac6:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2202      	movs	r2, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e06d      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad4:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2207      	movs	r2, #7
 8002ada:	4393      	bics	r3, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fc86 	bl	80013f8 <HAL_GetTick>
 8002aec:	0003      	movs	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af0:	e009      	b.n	8002b06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002af2:	f7fe fc81 	bl	80013f8 <HAL_GetTick>
 8002af6:	0002      	movs	r2, r0
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	4a2f      	ldr	r2, [pc, #188]	; (8002bbc <HAL_RCC_ClockConfig+0x1f4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e054      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2238      	movs	r2, #56	; 0x38
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1ec      	bne.n	8002af2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d21e      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	4393      	bics	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fc5e 	bl	80013f8 <HAL_GetTick>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b40:	e009      	b.n	8002b56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b42:	f7fe fc59 	bl	80013f8 <HAL_GetTick>
 8002b46:	0002      	movs	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <HAL_RCC_ClockConfig+0x1f4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e02c      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1ee      	bne.n	8002b42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_RCC_ClockConfig+0x204>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b82:	f000 f82b 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b86:	0001      	movs	r1, r0
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	220f      	movs	r2, #15
 8002b90:	401a      	ands	r2, r3
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_RCC_ClockConfig+0x208>)
 8002b94:	0092      	lsls	r2, r2, #2
 8002b96:	58d3      	ldr	r3, [r2, r3]
 8002b98:	221f      	movs	r2, #31
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	000a      	movs	r2, r1
 8002b9e:	40da      	lsrs	r2, r3
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <HAL_RCC_ClockConfig+0x20c>)
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_RCC_ClockConfig+0x210>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7fe fbc9 	bl	8001340 <HAL_InitTick>
 8002bae:	0003      	movs	r3, r0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b004      	add	sp, #16
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	00001388 	.word	0x00001388
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	ffff84ff 	.word	0xffff84ff
 8002bc8:	fffff0ff 	.word	0xfffff0ff
 8002bcc:	ffff8fff 	.word	0xffff8fff
 8002bd0:	08003638 	.word	0x08003638
 8002bd4:	20000004 	.word	0x20000004
 8002bd8:	2000000c 	.word	0x2000000c

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002be2:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x78>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2238      	movs	r2, #56	; 0x38
 8002be8:	4013      	ands	r3, r2
 8002bea:	d10f      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x78>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0adb      	lsrs	r3, r3, #11
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	0013      	movs	r3, r2
 8002bfc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002bfe:	6839      	ldr	r1, [r7, #0]
 8002c00:	4815      	ldr	r0, [pc, #84]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002c02:	f7fd fa81 	bl	8000108 <__udivsi3>
 8002c06:	0003      	movs	r3, r0
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	e01e      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2238      	movs	r2, #56	; 0x38
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d102      	bne.n	8002c1e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x80>)
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	e015      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2238      	movs	r2, #56	; 0x38
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d103      	bne.n	8002c32 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	e00b      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2238      	movs	r2, #56	; 0x38
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b18      	cmp	r3, #24
 8002c3c:	d103      	bne.n	8002c46 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c3e:	23fa      	movs	r3, #250	; 0xfa
 8002c40:	01db      	lsls	r3, r3, #7
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	e001      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002c4a:	687b      	ldr	r3, [r7, #4]
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	02dc6c00 	.word	0x02dc6c00
 8002c5c:	007a1200 	.word	0x007a1200

08002c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c68:	2313      	movs	r3, #19
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c70:	2312      	movs	r3, #18
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	029b      	lsls	r3, r3, #10
 8002c80:	4013      	ands	r3, r2
 8002c82:	d100      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c84:	e079      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2011      	movs	r0, #17
 8002c88:	183b      	adds	r3, r7, r0
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8e:	4b64      	ldr	r3, [pc, #400]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	055b      	lsls	r3, r3, #21
 8002c96:	4013      	ands	r3, r2
 8002c98:	d110      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c9e:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	0549      	lsls	r1, r1, #21
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ca8:	4b5d      	ldr	r3, [pc, #372]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	055b      	lsls	r3, r3, #21
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb6:	183b      	adds	r3, r7, r0
 8002cb8:	2201      	movs	r2, #1
 8002cba:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002cbc:	4b58      	ldr	r3, [pc, #352]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002cbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cc0:	23c0      	movs	r3, #192	; 0xc0
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d019      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d014      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002cd8:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	4a51      	ldr	r2, [pc, #324]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ce2:	4b4f      	ldr	r3, [pc, #316]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ce6:	4b4e      	ldr	r3, [pc, #312]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	0249      	lsls	r1, r1, #9
 8002cec:	430a      	orrs	r2, r1
 8002cee:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002cf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cf4:	4b4a      	ldr	r3, [pc, #296]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002cf6:	494c      	ldr	r1, [pc, #304]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002cfc:	4b48      	ldr	r3, [pc, #288]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4013      	ands	r3, r2
 8002d08:	d016      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fb75 	bl	80013f8 <HAL_GetTick>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002d12:	e00c      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7fe fb70 	bl	80013f8 <HAL_GetTick>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4a43      	ldr	r2, [pc, #268]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d904      	bls.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002d24:	2313      	movs	r3, #19
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	2203      	movs	r2, #3
 8002d2a:	701a      	strb	r2, [r3, #0]
          break;
 8002d2c:	e004      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002d2e:	4b3c      	ldr	r3, [pc, #240]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	2202      	movs	r2, #2
 8002d34:	4013      	ands	r3, r2
 8002d36:	d0ed      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002d38:	2313      	movs	r3, #19
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d42:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	4a37      	ldr	r2, [pc, #220]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d52:	430a      	orrs	r2, r1
 8002d54:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d56:	e005      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	2312      	movs	r3, #18
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2213      	movs	r2, #19
 8002d5e:	18ba      	adds	r2, r7, r2
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d64:	2311      	movs	r3, #17
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d72:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d74:	492e      	ldr	r1, [pc, #184]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	2203      	movs	r2, #3
 8002d8a:	4393      	bics	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2240      	movs	r2, #64	; 0x40
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da2:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002db2:	430a      	orrs	r2, r1
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	01db      	lsls	r3, r3, #7
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d008      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	0899      	lsrs	r1, r3, #2
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da09      	bge.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	22e0      	movs	r2, #224	; 0xe0
 8002e02:	4393      	bics	r3, r2
 8002e04:	0019      	movs	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002e10:	2312      	movs	r3, #18
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	781b      	ldrb	r3, [r3, #0]
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b006      	add	sp, #24
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	40021000 	.word	0x40021000
 8002e24:	fffffcff 	.word	0xfffffcff
 8002e28:	fffeffff 	.word	0xfffeffff
 8002e2c:	00001388 	.word	0x00001388
 8002e30:	efffffff 	.word	0xefffffff
 8002e34:	ffffcfff 	.word	0xffffcfff
 8002e38:	ffff3fff 	.word	0xffff3fff

08002e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0a8      	b.n	8002fa0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	2382      	movs	r3, #130	; 0x82
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d009      	beq.n	8002e76 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	61da      	str	r2, [r3, #28]
 8002e68:	e005      	b.n	8002e76 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	225d      	movs	r2, #93	; 0x5d
 8002e80:	5c9b      	ldrb	r3, [r3, r2]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	225c      	movs	r2, #92	; 0x5c
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7fd ffd2 	bl	8000e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	225d      	movs	r2, #93	; 0x5d
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2140      	movs	r1, #64	; 0x40
 8002eac:	438a      	bics	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	23e0      	movs	r3, #224	; 0xe0
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d902      	bls.n	8002ec2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e002      	b.n	8002ec8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	015b      	lsls	r3, r3, #5
 8002ec6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	23f0      	movs	r3, #240	; 0xf0
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d008      	beq.n	8002ee6 <HAL_SPI_Init+0xaa>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	23e0      	movs	r3, #224	; 0xe0
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d002      	beq.n	8002ee6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	2382      	movs	r3, #130	; 0x82
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	401a      	ands	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	2384      	movs	r3, #132	; 0x84
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	400b      	ands	r3, r1
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2102      	movs	r1, #2
 8002f02:	400b      	ands	r3, r1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6999      	ldr	r1, [r3, #24]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	400b      	ands	r3, r1
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	2138      	movs	r1, #56	; 0x38
 8002f22:	400b      	ands	r3, r1
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	0011      	movs	r1, r2
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2110      	movs	r1, #16
 8002f54:	400b      	ands	r3, r1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	2108      	movs	r1, #8
 8002f5e:	400b      	ands	r3, r1
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68d9      	ldr	r1, [r3, #12]
 8002f66:	23f0      	movs	r3, #240	; 0xf0
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	400b      	ands	r3, r1
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	0011      	movs	r1, r2
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	015b      	lsls	r3, r3, #5
 8002f76:	401a      	ands	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <HAL_SPI_Init+0x16c>)
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	225d      	movs	r2, #93	; 0x5d
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b004      	add	sp, #16
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	fffff7ff 	.word	0xfffff7ff

08002fac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	1dbb      	adds	r3, r7, #6
 8002fba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fbc:	231f      	movs	r3, #31
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	225c      	movs	r2, #92	; 0x5c
 8002fc8:	5c9b      	ldrb	r3, [r3, r2]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_SPI_Transmit+0x26>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e171      	b.n	80032b6 <HAL_SPI_Transmit+0x30a>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	225c      	movs	r2, #92	; 0x5c
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fda:	f7fe fa0d 	bl	80013f8 <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002fe2:	2316      	movs	r3, #22
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	1dba      	adds	r2, r7, #6
 8002fe8:	8812      	ldrh	r2, [r2, #0]
 8002fea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	225d      	movs	r2, #93	; 0x5d
 8002ff0:	5c9b      	ldrb	r3, [r3, r2]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d004      	beq.n	8003002 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002ff8:	231f      	movs	r3, #31
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
    goto error;
 8003000:	e14e      	b.n	80032a0 <HAL_SPI_Transmit+0x2f4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_SPI_Transmit+0x64>
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003010:	231f      	movs	r3, #31
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
    goto error;
 8003018:	e142      	b.n	80032a0 <HAL_SPI_Transmit+0x2f4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	225d      	movs	r2, #93	; 0x5d
 800301e:	2103      	movs	r1, #3
 8003020:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1dba      	adds	r2, r7, #6
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1dba      	adds	r2, r7, #6
 800303a:	8812      	ldrh	r2, [r2, #0]
 800303c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2244      	movs	r2, #68	; 0x44
 8003048:	2100      	movs	r1, #0
 800304a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2246      	movs	r2, #70	; 0x46
 8003050:	2100      	movs	r1, #0
 8003052:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	429a      	cmp	r2, r3
 800306a:	d110      	bne.n	800308e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2140      	movs	r1, #64	; 0x40
 8003078:	438a      	bics	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	01c9      	lsls	r1, r1, #7
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	4013      	ands	r3, r2
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d007      	beq.n	80030ac <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	23e0      	movs	r3, #224	; 0xe0
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d94e      	bls.n	8003156 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <HAL_SPI_Transmit+0x11e>
 80030c0:	2316      	movs	r3, #22
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d13f      	bne.n	800314a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	881a      	ldrh	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	1c9a      	adds	r2, r3, #2
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030ee:	e02c      	b.n	800314a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2202      	movs	r2, #2
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d112      	bne.n	8003124 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003122:	e012      	b.n	800314a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003124:	f7fe f968 	bl	80013f8 <HAL_GetTick>
 8003128:	0002      	movs	r2, r0
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d802      	bhi.n	800313a <HAL_SPI_Transmit+0x18e>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	d102      	bne.n	8003140 <HAL_SPI_Transmit+0x194>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003140:	231f      	movs	r3, #31
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2203      	movs	r2, #3
 8003146:	701a      	strb	r2, [r3, #0]
          goto error;
 8003148:	e0aa      	b.n	80032a0 <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1cd      	bne.n	80030f0 <HAL_SPI_Transmit+0x144>
 8003154:	e080      	b.n	8003258 <HAL_SPI_Transmit+0x2ac>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_SPI_Transmit+0x1be>
 800315e:	2316      	movs	r3, #22
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d000      	beq.n	800316a <HAL_SPI_Transmit+0x1be>
 8003168:	e071      	b.n	800324e <HAL_SPI_Transmit+0x2a2>
    {
      if (hspi->TxXferCount > 1U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d912      	bls.n	800319a <HAL_SPI_Transmit+0x1ee>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	881a      	ldrh	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	1c9a      	adds	r2, r3, #2
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b02      	subs	r3, #2
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003198:	e059      	b.n	800324e <HAL_SPI_Transmit+0x2a2>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	7812      	ldrb	r2, [r2, #0]
 80031a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031c0:	e045      	b.n	800324e <HAL_SPI_Transmit+0x2a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2202      	movs	r2, #2
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d12b      	bne.n	8003228 <HAL_SPI_Transmit+0x27c>
      {
        if (hspi->TxXferCount > 1U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d912      	bls.n	8003200 <HAL_SPI_Transmit+0x254>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	881a      	ldrh	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	1c9a      	adds	r2, r3, #2
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b02      	subs	r3, #2
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031fe:	e026      	b.n	800324e <HAL_SPI_Transmit+0x2a2>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003226:	e012      	b.n	800324e <HAL_SPI_Transmit+0x2a2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003228:	f7fe f8e6 	bl	80013f8 <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d802      	bhi.n	800323e <HAL_SPI_Transmit+0x292>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	3301      	adds	r3, #1
 800323c:	d102      	bne.n	8003244 <HAL_SPI_Transmit+0x298>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d104      	bne.n	800324e <HAL_SPI_Transmit+0x2a2>
        {
          errorcode = HAL_TIMEOUT;
 8003244:	231f      	movs	r3, #31
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2203      	movs	r2, #3
 800324a:	701a      	strb	r2, [r3, #0]
          goto error;
 800324c:	e028      	b.n	80032a0 <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1b4      	bne.n	80031c2 <HAL_SPI_Transmit+0x216>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	6839      	ldr	r1, [r7, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f95e 	bl	8003520 <SPI_EndRxTxTransaction>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	d002      	beq.n	800326e <HAL_SPI_Transmit+0x2c2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_SPI_Transmit+0x2e0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003290:	2b00      	cmp	r3, #0
 8003292:	d004      	beq.n	800329e <HAL_SPI_Transmit+0x2f2>
  {
    errorcode = HAL_ERROR;
 8003294:	231f      	movs	r3, #31
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e000      	b.n	80032a0 <HAL_SPI_Transmit+0x2f4>
  }

error:
 800329e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	225d      	movs	r2, #93	; 0x5d
 80032a4:	2101      	movs	r1, #1
 80032a6:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	225c      	movs	r2, #92	; 0x5c
 80032ac:	2100      	movs	r1, #0
 80032ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80032b0:	231f      	movs	r3, #31
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	781b      	ldrb	r3, [r3, #0]
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b008      	add	sp, #32
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	1dfb      	adds	r3, r7, #7
 80032ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032d0:	f7fe f892 	bl	80013f8 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	18d3      	adds	r3, r2, r3
 80032de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032e0:	f7fe f88a 	bl	80013f8 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	015b      	lsls	r3, r3, #5
 80032ee:	0d1b      	lsrs	r3, r3, #20
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	4353      	muls	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f6:	e058      	b.n	80033aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	d055      	beq.n	80033aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032fe:	f7fe f87b 	bl	80013f8 <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	429a      	cmp	r2, r3
 800330c:	d902      	bls.n	8003314 <SPI_WaitFlagStateUntilTimeout+0x54>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d142      	bne.n	800339a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	21e0      	movs	r1, #224	; 0xe0
 8003320:	438a      	bics	r2, r1
 8003322:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	2382      	movs	r3, #130	; 0x82
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	429a      	cmp	r2, r3
 800332e:	d113      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	429a      	cmp	r2, r3
 800333a:	d005      	beq.n	8003348 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2140      	movs	r1, #64	; 0x40
 8003354:	438a      	bics	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	019b      	lsls	r3, r3, #6
 8003360:	429a      	cmp	r2, r3
 8003362:	d110      	bne.n	8003386 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	491a      	ldr	r1, [pc, #104]	; (80033d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	0189      	lsls	r1, r1, #6
 8003382:	430a      	orrs	r2, r1
 8003384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	225d      	movs	r2, #93	; 0x5d
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	225c      	movs	r2, #92	; 0x5c
 8003392:	2100      	movs	r1, #0
 8003394:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e017      	b.n	80033ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	425a      	negs	r2, r3
 80033ba:	4153      	adcs	r3, r2
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	001a      	movs	r2, r3
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d197      	bne.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b008      	add	sp, #32
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	20000004 	.word	0x20000004
 80033d8:	ffffdfff 	.word	0xffffdfff

080033dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033ea:	2317      	movs	r3, #23
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033f2:	f7fe f801 	bl	80013f8 <HAL_GetTick>
 80033f6:	0002      	movs	r2, r0
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	18d3      	adds	r3, r2, r3
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003402:	f7fd fff9 	bl	80013f8 <HAL_GetTick>
 8003406:	0003      	movs	r3, r0
 8003408:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003412:	4b41      	ldr	r3, [pc, #260]	; (8003518 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	0013      	movs	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	189b      	adds	r3, r3, r2
 800341c:	00da      	lsls	r2, r3, #3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	0d1b      	lsrs	r3, r3, #20
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	4353      	muls	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003428:	e068      	b.n	80034fc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	23c0      	movs	r3, #192	; 0xc0
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	429a      	cmp	r2, r3
 8003432:	d10a      	bne.n	800344a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d107      	bne.n	800344a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	2117      	movs	r1, #23
 8003442:	187b      	adds	r3, r7, r1
 8003444:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003446:	187b      	adds	r3, r7, r1
 8003448:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	d055      	beq.n	80034fc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003450:	f7fd ffd2 	bl	80013f8 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	429a      	cmp	r2, r3
 800345e:	d902      	bls.n	8003466 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d142      	bne.n	80034ec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	21e0      	movs	r1, #224	; 0xe0
 8003472:	438a      	bics	r2, r1
 8003474:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	2382      	movs	r3, #130	; 0x82
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	429a      	cmp	r2, r3
 8003480:	d113      	bne.n	80034aa <SPI_WaitFifoStateUntilTimeout+0xce>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	429a      	cmp	r2, r3
 800348c:	d005      	beq.n	800349a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	429a      	cmp	r2, r3
 8003498:	d107      	bne.n	80034aa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2140      	movs	r1, #64	; 0x40
 80034a6:	438a      	bics	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d110      	bne.n	80034d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80034c2:	400a      	ands	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2180      	movs	r1, #128	; 0x80
 80034d2:	0189      	lsls	r1, r1, #6
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	225d      	movs	r2, #93	; 0x5d
 80034dc:	2101      	movs	r1, #1
 80034de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	225c      	movs	r2, #92	; 0x5c
 80034e4:	2100      	movs	r1, #0
 80034e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e010      	b.n	800350e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d18e      	bne.n	800342a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b00a      	add	sp, #40	; 0x28
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	20000004 	.word	0x20000004
 800351c:	ffffdfff 	.word	0xffffdfff

08003520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	23c0      	movs	r3, #192	; 0xc0
 8003530:	0159      	lsls	r1, r3, #5
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	0013      	movs	r3, r2
 800353a:	2200      	movs	r2, #0
 800353c:	f7ff ff4e 	bl	80033dc <SPI_WaitFifoStateUntilTimeout>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d007      	beq.n	8003554 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003548:	2220      	movs	r2, #32
 800354a:	431a      	orrs	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e027      	b.n	80035a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	0013      	movs	r3, r2
 800355e:	2200      	movs	r2, #0
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	f7ff fead 	bl	80032c0 <SPI_WaitFlagStateUntilTimeout>
 8003566:	1e03      	subs	r3, r0, #0
 8003568:	d007      	beq.n	800357a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	2220      	movs	r2, #32
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e014      	b.n	80035a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	23c0      	movs	r3, #192	; 0xc0
 800357e:	00d9      	lsls	r1, r3, #3
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	0013      	movs	r3, r2
 8003588:	2200      	movs	r2, #0
 800358a:	f7ff ff27 	bl	80033dc <SPI_WaitFifoStateUntilTimeout>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d007      	beq.n	80035a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003596:	2220      	movs	r2, #32
 8003598:	431a      	orrs	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e000      	b.n	80035a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b004      	add	sp, #16
 80035aa:	bd80      	pop	{r7, pc}

080035ac <memset>:
 80035ac:	0003      	movs	r3, r0
 80035ae:	1882      	adds	r2, r0, r2
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d100      	bne.n	80035b6 <memset+0xa>
 80035b4:	4770      	bx	lr
 80035b6:	7019      	strb	r1, [r3, #0]
 80035b8:	3301      	adds	r3, #1
 80035ba:	e7f9      	b.n	80035b0 <memset+0x4>

080035bc <__libc_init_array>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	2600      	movs	r6, #0
 80035c0:	4c0c      	ldr	r4, [pc, #48]	; (80035f4 <__libc_init_array+0x38>)
 80035c2:	4d0d      	ldr	r5, [pc, #52]	; (80035f8 <__libc_init_array+0x3c>)
 80035c4:	1b64      	subs	r4, r4, r5
 80035c6:	10a4      	asrs	r4, r4, #2
 80035c8:	42a6      	cmp	r6, r4
 80035ca:	d109      	bne.n	80035e0 <__libc_init_array+0x24>
 80035cc:	2600      	movs	r6, #0
 80035ce:	f000 f823 	bl	8003618 <_init>
 80035d2:	4c0a      	ldr	r4, [pc, #40]	; (80035fc <__libc_init_array+0x40>)
 80035d4:	4d0a      	ldr	r5, [pc, #40]	; (8003600 <__libc_init_array+0x44>)
 80035d6:	1b64      	subs	r4, r4, r5
 80035d8:	10a4      	asrs	r4, r4, #2
 80035da:	42a6      	cmp	r6, r4
 80035dc:	d105      	bne.n	80035ea <__libc_init_array+0x2e>
 80035de:	bd70      	pop	{r4, r5, r6, pc}
 80035e0:	00b3      	lsls	r3, r6, #2
 80035e2:	58eb      	ldr	r3, [r5, r3]
 80035e4:	4798      	blx	r3
 80035e6:	3601      	adds	r6, #1
 80035e8:	e7ee      	b.n	80035c8 <__libc_init_array+0xc>
 80035ea:	00b3      	lsls	r3, r6, #2
 80035ec:	58eb      	ldr	r3, [r5, r3]
 80035ee:	4798      	blx	r3
 80035f0:	3601      	adds	r6, #1
 80035f2:	e7f2      	b.n	80035da <__libc_init_array+0x1e>
 80035f4:	08003678 	.word	0x08003678
 80035f8:	08003678 	.word	0x08003678
 80035fc:	0800367c 	.word	0x0800367c
 8003600:	08003678 	.word	0x08003678

08003604 <memcpy>:
 8003604:	2300      	movs	r3, #0
 8003606:	b510      	push	{r4, lr}
 8003608:	429a      	cmp	r2, r3
 800360a:	d100      	bne.n	800360e <memcpy+0xa>
 800360c:	bd10      	pop	{r4, pc}
 800360e:	5ccc      	ldrb	r4, [r1, r3]
 8003610:	54c4      	strb	r4, [r0, r3]
 8003612:	3301      	adds	r3, #1
 8003614:	e7f8      	b.n	8003608 <memcpy+0x4>
	...

08003618 <_init>:
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361e:	bc08      	pop	{r3}
 8003620:	469e      	mov	lr, r3
 8003622:	4770      	bx	lr

08003624 <_fini>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr
